<?xml version="1.0" encoding="utf-8"?>
<library isWhitelist="true">
	<extension>
		<entryClass>blackberry.payment.Payment</entryClass>
	</extension>

	<platforms>
		<platform value="AIR">
			<target version="default" config="AIR_XHR" />
		</platform>
	</platforms>

	<configurations>
		<configuration name="AIR_XHR" version="1.0" comment="For XHR architecture for Java implementation">			
			<src type="text/javascript" path="js/common/payment_dispatcher.js" comment="Application JS XHR dispatcher" />
			<src type="text/javascript" path="js/common/payment_ns.js" comment="Application JS interface" />			
			<src type="text/actionscript" path="src/Air/Payment/src" comment="ActionScript implementation" />
		</configuration>
	</configurations>
	
	<features>
		<feature id="blackberry.payment" version="1.0.0" />
	</features>
	
	<object name="blackberry.payment" shortName="Payment" introduced="1.0.0" comment="Entry point for purchasing digital goods.
API that permits BlackBerry device users to initiate the purchase of digital goods from within your application. For example, this API can be used to allow users to purchase additional levels in a gaming application, music from a radio application, or any other digital good registered on the Vendor Portal for BlackBerry App World.
The digital good being purchased must be associated with the calling application in the Vendor Portal for BlackBerry App World.Purchases are initiated via the purchase method. The amount of time that elapses before a response is returned depends on how quickly the user completes the purchase process (which may include steps such as signing in to their BlackBerry ID account and setting up their preferred billing method, etc.). The purchase method dispatches a PaymentSuccessEvent on success, or dispatches a PaymentErrorEvent on failure.
When calling the puchase method only the ID or SKU of the digital good to be purchased is required; it is not necessary to provide both, and all other arguments are optional. If both the ID and SKU are provided, then the ID takes precedence; the SKU is only used if the digital good could not be located on the Payment Service server based on the ID.
If an application requires a list of its digital goods that have already been purchased by the user (e.g., to avoid offering for sale a digital good the user already owns), such a list can be obtained with the getExistingPurchases method. This method requires the same user interaction as the purchase method, so it can also be a long-running method.">

<example><![CDATA[
 <script type="text/javascript">

  function pay(){
	try{
		blackberry.payment.purchase({"digitalGoodID":"123",
							"digitalGoodSKU":"someSKU",
							"digitalGoodName":"SomeName",
							"metaData":"metadata",
							"purchaseAppName":"WebWorks APP",
							"purchaseAppIcon":null},
							success,failure);
		}
	catch (e){
		alert ("Error" + e);
		}
	}
		
	function success(purchase){
		alert ("success called:"+ JSON.stringify(purchase));
	}
	function failure(message){
		alert ("failure called:"+ JSON.stringify(message));
	}

</script>]]></example>

	     <properties>
			<property name="connectionMode" static="true" type="String" readonly="false" comment="Lets you get or set the connectionMode">
				<details>Sets the connection mode used in the application.
				If connection mode is set to 'local', the application does not contact the Payment Service server for any transactions.
				For purchases, a simulated purchase screen is displayed, allowing the user to choose the result of the purchase.
				For retrieving existing purchases, only simulated successful purchases are returned.
				This mode is useful for testing how your application handles the possible results without requiring network connections or currency.
				THIS MODE SHOULD NOT BE USED IN PRODUCTION CODE. If connection mode is set to 'network', purchases and retrievals of existing purchases proceed normally, contacting the Payment Service server as necessary.
				This is the default connection mode, and applications in production should not modify it.
					
				</details>
			</property>
	    </properties>

	    <functions>
			<func name="getExistingPurchases" static="true" returns="void" comment="Assigns a listener for getting the Existing purchases">
				<details>Retrieves the previous successful purchases made by the user from within the calling application.
					If connectionMode is set to CONNECTION_MODE_LOCAL then this method will return an empty array.						
				</details>
				<param name="refresh" type="boolean"
					comment="True if the BlackBerry should be allowed to refresh the list of purchases from the Payment Service server.
					False if the current list of cached purchases should be returned immediately." />
				<param name="callbackOnSuccess" type="String"
					comment="Function to be called when the payment is successfull.">
					<details>
						An array of Purchase JSON Objects is sent back.
						<BR />A JSON purchase object is passed as a parameter. The structure is identical to those already described.
						<BR />{
						<BR />"transactionID": "00000001",
						<BR />"digitalGoodID": "123",
						<BR />"date": "1997-07-16T19:20:30.45+01:00",
						<BR />"digitalGoodSKU": "SOME SKU",
						<BR />"licenseKey": null,
						<BR />"metaData": ""
						<BR />}		
					</details>
				</param>
				<param name="callbackOnFailure" type="String"
					comment="Function to be called when an error occurs.">
					<details>
						<BR />An error code will be passed in corresponding to the following codes
						<BR />digitalGoodNotFound = 0
						<BR />paymentError = 1
						<BR />paymentServerError = 2
						<BR />userCancelled = 3
					</details>
				</param>
					
			</func>
			<func name="purchase" static="true" returns="void" comment="Initiates the purchase of a digital good.">
				<details>
					
				</details>
				<param name="PurchaseOptions" type="String"
					comment="Options to describe the purchase.">
					<details>
						digitalGoodID:The ID corresponding to the digitalGood to be purchased.Only the ID or SKU of the digital good to be purchased is required; it is not necessary to provide both. If both the ID and SKU are provided, then the ID takes precedence; the SKU is only used if the digital good cannot be located by the Payment Service based on the ID.
						<BR />digitalGoodName:A digital good name should be provided in the case where a single ID/SKU represents multiple digital goods on the Payment Service server, and a more specific digital good name should be displayed on the purchase screen. For example, if a game sells additional levels via the Payment Service at a single price point, then a generic "My game level" digital good can be used for all such levels. However, at purchase time, the game application should override "My game level" with the name of the level being purchased. In this way, the end user is aware of exactly what they are purchasing on the purchase confirmation screen.
						<BR />digitalGoodSKU:The SKU corresponding to the digitalGood to be purchased.Only the ID or SKU of the digital good to be purchased is required; it is not necessary to provide both. If both the ID and SKU are provided, then the ID takes precedence; the SKU is only used if the digital good cannot be located by the Payment Service based on the ID.
						<BR />metaData:Metadata offers the application developer a way to store information about each purchase on the Payment Service server, and to retrieve that data via net.rim.blackberry.api.payment.PaymentSystem.getExistingPurchases(boolean). For example, assume a book vendor offers many titles at a single price point, and represents them on the vendor portal as a single digital good. In this case, the ISBN of the book can be provided as metadata, which uniquely identifies the digital good that was purchased. The entire list of purchased books can then be retrieved at any time by obtaining previous purchases via the getExistingPurchases method, filtering on the book's digital good Content ID, and finally enumerating the ISBNs in the metadata of each purchase.
						<BR />puchaseAppName:To further give context to the end user during an in-application purchase, a banner is displayed along the top of the purchase and BlackBerry ID login screens, showing the name and icon of the application the purchase is being made from (i.e., the purchasing application). To customize the name and icon that are displayed, simply provide them as arguments. If the name or icon are not provided as arguments, then they are retrieved from the purchasing application's descriptor. However, this may not work for applications that register with the home screen dynamically; in these cases, it is highly recommended that the purchasing application explicitly provide a name and icon as part of the purchase arguments.
						<BR />purchaseAppIcon:See description of purchaseAppName.
						
						<BR />example
						<BR />{"digitalGoodID":"123",
						<BR />"digitalGoodSKU":"sampleSKU",
						<BR />"digitalGoodName":"Good Name",
						<BR />"metaData":"metadata",
						<BR />"purchaseAppName":"WebWorks Application",
						<BR />"purchaseAppIcon":null}
						
					</details>
				</param>
				<param name="callbackOnSuccess" type="String"
					comment="Function to be called when the payment is successfull.">
					<details>
						<BR />A JSON purchase object is passed as a parameter. The structure is identical to those already described.
						<BR />{
						<BR />"transactionID": "00000001",
						<BR />"digitalGoodID": "123",
						<BR />"date": "1997-07-16T19:20:30.45+01:00",
						<BR />"digitalGoodSKU": "SOME SKU",
						<BR />"licenseKey": null,
						<BR />"metaData": ""
						<BR />}		
					</details>
				</param>
				<param name="callbackOnFailure" type="String"
					comment="Function to be called when an error occurs.">
					<details>
						<BR />An error code will be passed in corresponding to the following codes
						<BR />digitalGoodNotFound = 0
						<BR />paymentError = 1
						<BR />paymentServerError = 2
						<BR />userCancelled = 3
					</details>
				</param>
			</func>
	    </functions>
	</object>	
</library>
