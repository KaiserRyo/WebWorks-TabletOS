<?xml version="1.0" encoding="utf-8"?>
<library>
	<extension id="blackberry.ui.dialog">
		<entryClass>blackberry.ui.dialog.Dialog</entryClass>
	</extension>
  
	<platforms>
		<platform value="AIR">
			<target version="default" config="AIR_XHR" />
		</platform>
	</platforms>

	<configurations>
		<configuration name="AIR_XHR" version="1.0" comment="XHR architecture/Air implementation">			
			<src type="text/javascript" path="js/common/dialog/dialog_dispatcher.js" comment="Dialog JS XHR dispatcher" />
			<src type="text/javascript" path="js/common/dialog/dialog_ns.js" comment="Dialog JS interface" />			
			<src type="text/actionscript" path="src/Air/UserInterface/src" comment="ActionScript implementation" />
		</configuration>
	</configurations>
  
	<features>
		<feature id="blackberry.ui.dialog" version="1.0.0" />
	</features>
  
	<object name="blackberry.ui.dialog" shortName="Dialog" introduced="1.0.0" comment="The Dialog object contains functions for manipulating system dialog boxes.">
		<details>
		  The functionality in this object allows you to integrate standard system dialog boxes into your BlackBerry PlayBook WebWorks Application and control your application flow based on user responses.
		</details>
    
    <example><![CDATA[<script type="text/javascript">
	
	function dialogCallBack(index) {
		alert("The index of the pushed button is " + index);
	}  
		
	function standardDialog() {
		try {
			blackberry.ui.dialog.standardAskAsync("Save?", blackberry.ui.dialog.D_SAVE, dialogCallBack, {title : "Save Dialog", size: blackberry.ui.dialog.SIZE_MEDIUM, position : blackberry.ui.dialog.LOC_BOTTOM});
		}
		catch (e) {
			alert("Exception in standardDialog: " + e);
		}
	}
	
	function customDialog() {
		try {
			var buttons = new Array("Yes", "No", "Sometimes", "NA");
			var ops = {title : "Choose the answer that describes you best", size : blackberry.ui.dialog.SIZE_TALL, position : blackberry.ui.dialog.LOC_CENTER};
			blackberry.ui.dialog.customAskAsync("Do you routinely work out?", buttons, dialogCallBack, ops);
		} catch (e) {
			alert("Exception in customDialog: " + e);
		}
	}
	
	function globalDialog() {
		try {
			var ops = {title : "Global Save Dialog", global : true};
			//Application cannot be sent to background when this dialog is active
			blackberry.ui.dialog.standardAskAsync("Battery level is low. Do you want to save your work?", blackberry.ui.dialog.D_SAVE, dialogCallBack, ops);
		} catch (e) {
			alert(Exception in globalDialog: " + e);
		}
	}

</script>]]></example>

    <functions>
		<func name="standardAskAsync" returns="void" static="true" comment="Creates an asynchronous standard dialog to ask the user a question.">
			<details>Uses the standard dialog. The function is an asynchronous call amd will not block execution. It will return the 0-based index of the user's choice.</details>
			
			<param name="message" type="String" comment="Message to be displayed in the dialog." />
			<param name="type" type="Number" comment="Parameter that specifies the type of standard dialog. Constants starting with D_*." />
			<param name="onOptionSelected" type="Function" comment="Optional callback function that will be invoked when the user makes a selection. Expected signature: function onOptionSelected(selectedButtonIndex)." />
			<param name="settings" type="Object" comment= "Optional Object literal that allows the user to manipulate the size, location, title of the dialog, and whether this is a global dialog (your application cannot be minimized when a global dialog is active; by default when the 'global' flag is not passed, dialog will be modal only for your application). It is not required to provide all parameters, and these do not have to be specified in any particular order."/>			
		</func>
		
		<func name="customAskAsync" returns="void" static="true" comment="Creates an asynchronous custom dialog to ask the user a question.">
			<details>Uses the custom dialog. The function is an asynchronous call amd will not block execution. It will return the 0-based index of the user's choice.</details>
			
			<param name="message" type="String" comment="Message to be displayed in the dialog." />
			<param name="buttons" type="String" array="true" comment="Array of string choices that will be presented to the user in the form of buttons." />
			<param name="onOptionSelected" type="Function" comment="Optional callback function that will be invoked when the user makes a selection. Expected signature: function onOptionSelected(selectedButtonIndex)." />
			<param name="settings" type="Object" comment="Optional Object literal that allows the user to manipulate the size, location, title of the dialog, and whether this is a global dialog (your application cannot be minimized when a global dialog is active; by default when the 'global' flag is not passed, dialog will be modal only for your application). It is not required to provide all parameters, and these do not have to be specified in any particular order." />
		</func>
    </functions>
  
    <constants comment="Dialog Constants">
		<const name="D_OK" type="Number" value="0" readonly="true" static="true" comment="Standard OK dialog" />
		<const name="D_SAVE" type="Number" value="1" readonly="true" static="true" comment="Standard Save dialog" />
		<const name="D_DELETE" type="Number" value="2" readonly="true" static="true" comment="Standard Delete confirmation dialog" />
		<const name="D_YES_NO" type="Number" value="3" readonly="true" static="true" comment="Standard Yes/No dialog" />
		<const name="D_OK_CANCEL" type="Number" value="4" readonly="true" static="true" comment="Standard OK/Cancel dialog" />
		<const name="LOC_BOTTOM" type="String" value="bottomCenter" readonly="true" static="true" comment="Bottom located dialog" />
		<const name="LOC_CENTER" type="String" value="middleCenter" readonly="true" static="true" comment="Center located dialog" />
		<const name="LOC_TOP" type="String" value="topCenter" readonly="true" static="true" comment="Top located dialog" />
		<const name="SIZE_FULL" type="String" value="full" readonly="true" static="true" comment="Full size dialog" />		
		<const name="SIZE_LARGE" type="String" value="large" readonly="true" static="true" comment="Large size dialog" />		
		<const name="SIZE_MEDIUM" type="String" value="medium" readonly="true" static="true" comment="Medium size dialog" />		
		<const name="SIZE_SMALL" type="String" value="small" readonly="true" static="true" comment="Small size dialog" />		
		<const name="SIZE_TALL" type="String" value="tall" readonly="true" static="true" comment="Tall size dialog" />				
    </constants>
    
  </object>
  
</library>
