<asdoc>

<classRec name='MediaPlayerMediaType' fullname='qnx.media:MediaPlayerMediaType' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\MediaPlayerMediaType.as' namespace='qnx.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaPlayMediaType</code> class provides constant values used to determine the media
	 type playing in the <code>MediaPlayer</code>.
	 
	 ]]></description>
<see><![CDATA[qnx.media.MediaPlayer#mediaType
	 ]]></see>
</classRec>
<field name='AUDIO' fullname='qnx.media:MediaPlayerMediaType/AUDIO' type='int' isStatic='true' isConst='true' defaultValue='4' >
<description><![CDATA[
		 The current media track contains audio. 
		 ]]></description>
</field>
<field name='VIDEO' fullname='qnx.media:MediaPlayerMediaType/VIDEO' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[ 
		 The current media track contains video.
		 ]]></description>
</field>
<classRec name='MediaPlayerRepeat' fullname='qnx.media:MediaPlayerRepeat' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\MediaPlayerRepeat.as' namespace='qnx.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaPlayerRepeat</code> class provides constant values used for the <code>MediaPlayer.repeat</code> property.
	 
	 ]]></description>
<see><![CDATA[MediaPlayer#repeat
	 ]]></see>
</classRec>
<field name='ALL' fullname='qnx.media:MediaPlayerRepeat/ALL' type='String' isStatic='true' isConst='true' defaultValue='all' >
<description><![CDATA[
		 Specifies that the current playlist repeats.
		 ]]></description>
</field>
<field name='NONE' fullname='qnx.media:MediaPlayerRepeat/NONE' type='String' isStatic='true' isConst='true' defaultValue='none' >
<description><![CDATA[
		 Specifies that the current playlist does not repeat.
		 ]]></description>
</field>
<field name='TRACK' fullname='qnx.media:MediaPlayerRepeat/TRACK' type='String' isStatic='true' isConst='true' defaultValue='track' >
<description><![CDATA[
		 Specifies that the current track repeats.
		 ]]></description>
</field>
<classRec name='AudioClass' fullname='qnx.media:AudioClass' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\AudioClass.as' namespace='qnx.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<field name='ALARM' fullname='qnx.media:AudioClass/ALARM' type='String' isStatic='true' isConst='true' defaultValue='alarm' >
</field>
<field name='EVENT' fullname='qnx.media:AudioClass/EVENT' type='String' isStatic='true' isConst='true' defaultValue='event' >
</field>
<field name='INPUT' fullname='qnx.media:AudioClass/INPUT' type='String' isStatic='true' isConst='true' defaultValue='input' >
</field>
<field name='NOTIFICATION' fullname='qnx.media:AudioClass/NOTIFICATION' type='String' isStatic='true' isConst='true' defaultValue='notification' >
</field>
<classRec name='AudioEffect' fullname='qnx.media:AudioEffect' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\AudioEffect.as' namespace='qnx.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<field name='ALARM_BATTERY' fullname='qnx.media:AudioEffect/ALARM_BATTERY' type='String' isStatic='true' isConst='true' defaultValue='alarm_battery' >
</field>
<field name='EVENT_BROWSER_START' fullname='qnx.media:AudioEffect/EVENT_BROWSER_START' type='String' isStatic='true' isConst='true' defaultValue='event_browser_start' >
</field>
<field name='EVENT_CAMERA_SHUTTER' fullname='qnx.media:AudioEffect/EVENT_CAMERA_SHUTTER' type='String' isStatic='true' isConst='true' defaultValue='event_camera_shutter' >
</field>
<field name='EVENT_DEVICE_LOCK' fullname='qnx.media:AudioEffect/EVENT_DEVICE_LOCK' type='String' isStatic='true' isConst='true' defaultValue='event_device_lock' >
</field>
<field name='EVENT_DEVICE_TETHER' fullname='qnx.media:AudioEffect/EVENT_DEVICE_TETHER' type='String' isStatic='true' isConst='true' defaultValue='event_device_tether' >
</field>
<field name='EVENT_DEVICE_UNLOCK' fullname='qnx.media:AudioEffect/EVENT_DEVICE_UNLOCK' type='String' isStatic='true' isConst='true' defaultValue='event_device_unlock' >
</field>
<field name='EVENT_DEVICE_UNTETHER' fullname='qnx.media:AudioEffect/EVENT_DEVICE_UNTETHER' type='String' isStatic='true' isConst='true' defaultValue='event_device_untether' >
</field>
<field name='EVENT_RECORDING_START' fullname='qnx.media:AudioEffect/EVENT_RECORDING_START' type='String' isStatic='true' isConst='true' defaultValue='event_recording_start' >
</field>
<field name='EVENT_RECORDING_STOP' fullname='qnx.media:AudioEffect/EVENT_RECORDING_STOP' type='String' isStatic='true' isConst='true' defaultValue='event_recording_stop' >
</field>
<field name='INPUT_KEYPRESS' fullname='qnx.media:AudioEffect/INPUT_KEYPRESS' type='String' isStatic='true' isConst='true' defaultValue='input_keypress' >
</field>
<field name='NOTIFICATION_CALENDAR' fullname='qnx.media:AudioEffect/NOTIFICATION_CALENDAR' type='String' isStatic='true' isConst='true' defaultValue='notification_calendar' >
</field>
<field name='NOTIFICATION_EMAIL' fullname='qnx.media:AudioEffect/NOTIFICATION_EMAIL' type='String' isStatic='true' isConst='true' defaultValue='notification_email' >
</field>
<field name='NOTIFICATION_GENERAL' fullname='qnx.media:AudioEffect/NOTIFICATION_GENERAL' type='String' isStatic='true' isConst='true' defaultValue='notification_general' >
</field>
<field name='NOTIFICATION_VOICEMAIL' fullname='qnx.media:AudioEffect/NOTIFICATION_VOICEMAIL' type='String' isStatic='true' isConst='true' defaultValue='notification_voicemail' >
</field>
<classRec name='MediaPlayerMetadata' fullname='qnx.media:MediaPlayerMetadata' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\MediaPlayerMetadata.as' namespace='qnx.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaPlayerMedadata</code> class contains constants representing the list of possible metadata 
	 properties that may be defined in the metadata object (from the <code>MediaPlayer</code> class).
	 
	 ]]></description>
<see><![CDATA[qnx.media.MediaPlayer
	 ]]></see>
<see><![CDATA[qnx.media.MediaPlayer#metadata
	 ]]></see>
</classRec>
<field name='ALBUM' fullname='qnx.media:MediaPlayerMetadata/ALBUM' type='String' isStatic='true' isConst='true' defaultValue='album' >
<description><![CDATA[
		 A constant representing the name of the album.
		 ]]></description>
</field>
<field name='ARTIST' fullname='qnx.media:MediaPlayerMetadata/ARTIST' type='String' isStatic='true' isConst='true' defaultValue='artist' >
<description><![CDATA[
		 A constant representing the name of the artist.
		 ]]></description>
</field>
<field name='BITRATE' fullname='qnx.media:MediaPlayerMetadata/BITRATE' type='String' isStatic='true' isConst='true' defaultValue='bitrate' >
<description><![CDATA[
		 A constant representing the bit rate of the track.
		 ]]></description>
</field>
<field name='COMMENT' fullname='qnx.media:MediaPlayerMetadata/COMMENT' type='String' isStatic='true' isConst='true' defaultValue='comment' >
<description><![CDATA[
		 A constant representing the comment field. The comment field can be used
		 to provide additional information about an artist or album.
		 ]]></description>
</field>
<field name='DISC' fullname='qnx.media:MediaPlayerMetadata/DISC' type='String' isStatic='true' isConst='true' defaultValue='disc' >
<description><![CDATA[
		 A constant representing the number of the disc.
		 ]]></description>
</field>
<field name='DURATION' fullname='qnx.media:MediaPlayerMetadata/DURATION' type='String' isStatic='true' isConst='true' defaultValue='duration' >
<description><![CDATA[
		 A constant representing the duration of the track.
		 ]]></description>
</field>
<field name='GENRE' fullname='qnx.media:MediaPlayerMetadata/GENRE' type='String' isStatic='true' isConst='true' defaultValue='genre' >
<description><![CDATA[
		 A constant representing the genre of the track.
		 ]]></description>
</field>
<field name='MEDIA_TYPE' fullname='qnx.media:MediaPlayerMetadata/MEDIA_TYPE' type='String' isStatic='true' isConst='true' defaultValue='mediaType' >
<description><![CDATA[
		 A constant representing the media type. 
		 
		 ]]></description>
<see><![CDATA[MediaPlayerMediaType
		 ]]></see>
</field>
<field name='NAME' fullname='qnx.media:MediaPlayerMetadata/NAME' type='String' isStatic='true' isConst='true' defaultValue='name' >
<description><![CDATA[
		 A constant representing the name of the track.
		 ]]></description>
</field>
<field name='SAMPLERATE' fullname='qnx.media:MediaPlayerMetadata/SAMPLERATE' type='String' isStatic='true' isConst='true' defaultValue='samplerate' >
<description><![CDATA[
		 A constant that provides information about the sample rate of the track.
		 ]]></description>
</field>
<field name='TRACK' fullname='qnx.media:MediaPlayerMetadata/TRACK' type='String' isStatic='true' isConst='true' defaultValue='track' >
<description><![CDATA[
		 A constant representing the number of the track.
		 ]]></description>
</field>
<field name='URL' fullname='qnx.media:MediaPlayerMetadata/URL' type='String' isStatic='true' isConst='true' defaultValue='url' >
<description><![CDATA[
		 A constant that contains URL information for the current track or stream.
		 ]]></description>
</field>
<field name='VIDEO_HEIGHT' fullname='qnx.media:MediaPlayerMetadata/VIDEO_HEIGHT' type='String' isStatic='true' isConst='true' defaultValue='video_height' >
<description><![CDATA[
		 A constant that defines the height of the current video track.
		 ]]></description>
</field>
<field name='VIDEO_WIDTH' fullname='qnx.media:MediaPlayerMetadata/VIDEO_WIDTH' type='String' isStatic='true' isConst='true' defaultValue='video_width' >
<description><![CDATA[
		 A constant that defines the width of the current video track.
		 ]]></description>
</field>
<classRec name='MediaServiceConnection' fullname='qnx.media:MediaServiceConnection' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\MediaServiceConnection.as' namespace='qnx.media' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaServiceConnection</code> class negotiates access to the media playback engine to prevent multiple clients 
	 from playing back audio or video at the same time.    
	 ]]></description>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaRequestTrackPlay' type='qnx.events.MediaServiceRequestEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceRequestEvent.TRACK_PLAY
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaRequestTrackPause' type='qnx.events.MediaServiceRequestEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceRequestEvent.TRACK_PAUSE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaRequestTrackPrev' type='qnx.events.MediaServiceRequestEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceRequestEvent.TRACK_PREV
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaRequestTrackNext' type='qnx.events.MediaServiceRequestEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceRequestEvent.TRACK_NEXT
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaServiceAccessChange' type='qnx.events.MediaServiceConnectionEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceConnectionEvent.ACCESS_CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaServiceDisconnect' type='qnx.events.MediaServiceConnectionEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceConnectionEvent.DISCONNECT
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaServiceConnectionFail' type='qnx.events.MediaServiceConnectionEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceConnectionEvent.CONNECTION_FAIL
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaServiceConnection' name='mediaServiceConnect' type='qnx.events.MediaServiceConnectionEvent' >
<description><![CDATA[
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaServiceConnectionEvent.CONNECT
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='MediaServiceConnection' fullname='qnx.media:MediaServiceConnection/MediaServiceConnection' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Create a <code>MediaServiceConnection</code> object.
		 ]]></description>
</method>
<method name='connect' fullname='qnx.media:MediaServiceConnection/connect' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Connects to the media service.
		 ]]></description>
</method>
<method name='disconnect' fullname='qnx.media:MediaServiceConnection/disconnect' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Disconnects from the media service.
		 ]]></description>
</method>
<method name='hasAudioService' fullname='qnx.media:MediaServiceConnection/hasAudioService' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Indicates whether you have been granted access to the media engine.
		 
		 ]]></description>
<return><![CDATA[A <code>Boolean</code> indicating whether or not access was granted. <code>true</code> if access is granted, otherwise
		 <code>false</code>.
		 ]]></return>
</method>
<method name='messageCB' fullname='qnx.media:MediaServiceConnection/private:messageCB' isStatic='false' isFinal='false' isOverride='false'  param_names='msg;cbData' param_types='qnx.pps:Message;String' param_defaults='undefined;null' result_type='void'>
</method>
<method name='ppsEvent' fullname='qnx.media:MediaServiceConnection/private:ppsEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='requestAudioService' fullname='qnx.media:MediaServiceConnection/requestAudioService' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Requests access to the media engine.
		 ]]></description>
</method>
<method name='sendMetadata' fullname='qnx.media:MediaServiceConnection/sendMetadata' isStatic='false' isFinal='false' isOverride='false'  param_names='metadata' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Provides the media service with a set of metadata for the current playback.  
		 
		 Metadata current used by the MediaService is:
		 <table class="summaryTable">
		 <tr><th>Property</th><th>Description</th></tr>
		 <tr><td><b>album</b></td><td>Album name</td></tr>
		 <tr><td><b>track</b></td><td>Track name</td></tr>
		 <tr><td><b>duration</b></td><td>Duration of track in milliseconds</td></tr>
		 <tr><td><b>position</b></td><td>Current playback position in milliseonds</td></tr>
		 <tr><td><b>albumArtwork</b></td><td>url to album artwork</td></tr>
		 </table>
 		 ]]></description>
<param><![CDATA[metadata The metadata object.
		 ]]></param>
</method>
<method name='serviceMessage' fullname='qnx.media:MediaServiceConnection/private:serviceMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='msg;cbData' param_types='qnx.pps:Message;String' param_defaults='undefined;null' result_type='void'>
</method>
<method name='setPlayState' fullname='qnx.media:MediaServiceConnection/setPlayState' isStatic='false' isFinal='false' isOverride='false'  param_names='isPlaying' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Provides the media service with the current state of playback.
		 
		 ]]></description>
<param><![CDATA[isPlaying A <code>Boolean</code> indicating whether or not the media player is active.
		 ]]></param>
</method>
<field name='_pps' fullname='qnx.media:MediaServiceConnection/private:_pps' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<field name='_serviceAcquired' fullname='qnx.media:MediaServiceConnection/private:_serviceAcquired' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='AudioEffectsManager' fullname='qnx.media:AudioEffectsManager' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\AudioEffectsManager.as' namespace='qnx.media' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[ 
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='AudioEffectsManager' fullname='qnx.media:AudioEffectsManager/AudioEffectsManager' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='classOpenFailed' fullname='qnx.media:AudioEffectsManager/private:classOpenFailed' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='controlFail' fullname='qnx.media:AudioEffectsManager/private:controlFail' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='controlOpen' fullname='qnx.media:AudioEffectsManager/private:controlOpen' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableClass' fullname='qnx.media:AudioEffectsManager/enableClass' isStatic='false' isFinal='false' isOverride='false'  param_names='clazz;enable' param_types='String;Boolean' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='getVolume' fullname='qnx.media:AudioEffectsManager/getVolume' isStatic='false' isFinal='false' isOverride='false'  param_names='clazz' param_types='String' param_defaults='undefined' result_type='Number'>
</method>
<method name='loadClass' fullname='qnx.media:AudioEffectsManager/private:loadClass' isStatic='false' isFinal='false' isOverride='false'  param_names='clazz' param_types='String' param_defaults='undefined' result_type='qnx.pps:PPS'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onClassEvent' fullname='qnx.media:AudioEffectsManager/private:onClassEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='open' fullname='qnx.media:AudioEffectsManager/private:open' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='playFile' fullname='qnx.media:AudioEffectsManager/playFile' isStatic='false' isFinal='false' isOverride='false'  param_names='file;clazz' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='play' fullname='qnx.media:AudioEffectsManager/play' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='ppsChanged' fullname='qnx.media:AudioEffectsManager/private:ppsChanged' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='prepareFile' fullname='qnx.media:AudioEffectsManager/prepareFile' isStatic='false' isFinal='false' isOverride='false'  param_names='file;clazz' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='prepare' fullname='qnx.media:AudioEffectsManager/prepare' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='setVolume' fullname='qnx.media:AudioEffectsManager/setVolume' isStatic='false' isFinal='false' isOverride='false'  param_names='clazz;volume' param_types='String;Number' param_defaults='undefined;undefined' result_type='void'>
</method>
<field name='PPS_PATH_ROOT' fullname='qnx.media:AudioEffectsManager/private:PPS_PATH_ROOT' type='String' isStatic='true' isConst='true' defaultValue='/pps/services/multimedia/sound/' >
</field>
<field name='_initialized' fullname='qnx.media:AudioEffectsManager/private:_initialized' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_ppsClasses' fullname='qnx.media:AudioEffectsManager/private:_ppsClasses' type='qnx.pps:PPS' isStatic='false' isConst='false' >
</field>
<field name='_ppsControl' fullname='qnx.media:AudioEffectsManager/private:_ppsControl' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<field name='_ppsSounds' fullname='qnx.media:AudioEffectsManager/private:_ppsSounds' type='qnx.pps:PPS' isStatic='false' isConst='false' >
</field>
<field name='_queue' fullname='qnx.media:AudioEffectsManager/private:_queue' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_retry' fullname='qnx.media:AudioEffectsManager/private:_retry' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_soundClasses' fullname='qnx.media:AudioEffectsManager/private:_soundClasses' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='MediaPlayer' fullname='qnx.media:MediaPlayer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\MediaPlayer.as' namespace='qnx.media' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaPlayer</code> class can be used to control playback of audio or video files, streams, and track sets (for example, playlists, SQL queries, etc).
	 ]]></description>
<metadata>
	<Event owner='qnx.media:MediaPlayer' name='error' type='flash.error.ErrorEvent' >
<description><![CDATA[
	 Dispatched when an error has occurred during an asynchronous operation.
	 
	 ]]></description>
<eventType><![CDATA[flash.error.ErrorEvent.ERROR
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaPlayer' name='prepareComplete' type='qnx.events.MediaPlayerEvent' >
<description><![CDATA[
	 
	 
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaPlayerEvent.PREPARE_COMPLETE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaPlayer' name='bufferChange' type='qnx.events.MediaPlayerEvent' >
<description><![CDATA[
	 
	 
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaPlayerEvent.BUFFER_CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.media:MediaPlayer' name='infoChange' type='qnx.events.MediaPlayerEvent' >
<description><![CDATA[
	 
	 
	 ]]></description>
<eventType><![CDATA[qnx.events.MediaPlayerEvent.INFO_CHANGE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='MediaPlayer' fullname='qnx.media:MediaPlayer/MediaPlayer' isStatic='false' isFinal='false' isOverride='false'  param_names='url;display' param_types='String;qnx.media:VideoDisplay' param_defaults='null;null' result_type='*'>
<description><![CDATA[
		 Creates a <code>MediaPlayer</code> object from a URL, with a <code>VideoDisplay</code>.
		 <p>
		 When done with the <code>MediaPlayer</code>, you should call <code>dispose</code>, to free the resources.
		 </p>
		 
		 ]]></description>
<param><![CDATA[url The URL to use for playback [optional].
		 ]]></param>
<param><![CDATA[diaplay The <code>VideoDisplay</code> to use for video playback [optional].
		 ]]></param>
<see><![CDATA[#dispose()
		 ]]></see>
<see><![CDATA[qnx.media.VideoDisplay
		 ]]></see>
</method>
<method name='callError' fullname='qnx.media:MediaPlayer/private:callError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='contextReady' fullname='qnx.media:MediaPlayer/private:contextReady' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='dispose' fullname='qnx.media:MediaPlayer/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Releases resources associated with this <code>MediaPlayer</code> object.
		 
		 <p>It is considered good practice to call 
		 this method when you're done using the <code>MediaPlayer</code>.
		 </p>
		 ]]></description>
</method>
<method name='dumpObj' fullname='qnx.media:MediaPlayer/private:dumpObj' isStatic='false' isFinal='false' isOverride='false'  param_names='obj;indent' param_types='Object;String' param_defaults='undefined;' result_type='String'>
</method>
<method name='generateRandomString' fullname='qnx.media:MediaPlayer/private:generateRandomString' isStatic='true' isFinal='false' isOverride='false'  param_names='newLength;userAlphabet' param_types='uint;String' param_defaults='1;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' result_type='String'>
</method>
<method name='getInputType' fullname='qnx.media:MediaPlayer/private:getInputType' isStatic='false' isFinal='false' isOverride='false'  param_names='_url' param_types='String' param_defaults='undefined' result_type='String'>
</method>
<method name='getPlayQueueMetadata' fullname='qnx.media:MediaPlayer/getPlayQueueMetadata' isStatic='false' isFinal='false' isOverride='false'  param_names='offset' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Gets the metadata of a track in the play queue, given the offset of the track.
		 
		 ]]></description>
<param><![CDATA[offset The offset of the track in the queue.
		 ]]></param>
</method>
<method name='inputAttached' fullname='qnx.media:MediaPlayer/private:inputAttached' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='internal_play' fullname='qnx.media:MediaPlayer/private:internal_play' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
         Handles resetting the track speed and starting playback
         ]]></description>
</method>
<method name='internal_prepare' fullname='qnx.media:MediaPlayer/private:internal_prepare' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='mapMetadataProperties' fullname='qnx.media:MediaPlayer/private:mapMetadataProperties' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Object'>
</method>
<method name='outputAttached' fullname='qnx.media:MediaPlayer/private:outputAttached' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='pause' fullname='qnx.media:MediaPlayer/pause' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Pauses playback.
		 ]]></description>
</method>
<method name='playItemChange' fullname='qnx.media:MediaPlayer/private:playItemChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='playQueueChange' fullname='qnx.media:MediaPlayer/private:playQueueChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='play' fullname='qnx.media:MediaPlayer/play' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Starts or resumes playback.
		 
		 <p>
		 If playback had previously been paused, playback will continue from where it was paused. 
		 If playback had been stopped, or never previously started, playback will start at the beginning.
		 </p>
		 ]]></description>
</method>
<method name='prepare' fullname='qnx.media:MediaPlayer/prepare' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Prepares the player for playback.
		 
		 <p>
		 After setting the URL and/or the <code>VideoDisplay</code>, you can call <code>prepare</code> to start the video subsystem
		 initialization. Once the operation has completed, the <code>MediaPlayerEvent.PREPARE_COMPLETE</code> event is displatched.
		 </p>
		 ]]></description>
</method>
<method name='reset' fullname='qnx.media:MediaPlayer/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Resets the <code>MediaPlayer</code> to its uninitialized state. 
		 
		 <p>
		 After calling this method, you must initialize it again
		 by setting the URL and by calling <code>prepare</code>.
		 </p>
		 
		 ]]></description>
<see><![CDATA[#prepare()
		 ]]></see>
</method>
<method name='seek' fullname='qnx.media:MediaPlayer/seek' isStatic='false' isFinal='false' isOverride='false'  param_names='position;offset' param_types='uint;int' param_defaults='undefined;-1' result_type='void'>
<description><![CDATA[
		 Seeks to a given time position and/or track offset.
		 
		 ]]></description>
<param><![CDATA[msec The offset in milliseconds from the start for which to seek to.
		 ]]></param>
<param><![CDATA[offset The track to seek. If not specified, the current track is used.
		 ]]></param>
</method>
<method name='stateChange' fullname='qnx.media:MediaPlayer/private:stateChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
         Handle state change events from the renderer and make sure our internal
         state matches.
         ]]></description>
<param><![CDATA[event Renderer state change event parameters
         ]]></param>
</method>
<method name='statusChange' fullname='qnx.media:MediaPlayer/private:statusChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='stop' fullname='qnx.media:MediaPlayer/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops playback after playback has been stopped or paused.
		 ]]></description>
</method>
<method name='bufferCapacity' fullname='qnx.media:MediaPlayer/bufferCapacity/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the current buffer size used for playback of the current track in milliseconds.
		 ]]></description>
</method>
<method name='bufferLevel' fullname='qnx.media:MediaPlayer/bufferLevel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the current buffer level of the current playing track in milliseconds.
		 ]]></description>
</method>
<method name='duration' fullname='qnx.media:MediaPlayer/duration/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Gets the duration of the file that is currently playing in milliseconds.
		 ]]></description>
</method>
<method name='isPaused' fullname='qnx.media:MediaPlayer/isPaused/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Checks whether the <code>MediaPlayer</code> is playing.
		 		 ]]></description>
<return><![CDATA[Returns a <code>Boolean</code> indicating whether or not a track is paused.
		 ]]></return>
</method>
<method name='isPlaying' fullname='qnx.media:MediaPlayer/isPlaying/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Checks whether the <code>MediaPlayer</code> is playing.
		 
		 ]]></description>
<return><![CDATA[Returns a <code>Boolean</code> indicating whether or not a track is playing.
		 ]]></return>
</method>
<method name='mediaType' fullname='qnx.media:MediaPlayer/mediaType/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the type of media that is currently playing.
		 
		 ]]></description>
<return><![CDATA[An integer representing the media type. 4 indicates video, 2 indicates audio.
		 ]]></return>
<see><![CDATA[qnx.media.MediaPlayerMediaType
		 ]]></see>
</method>
<method name='metadata' fullname='qnx.media:MediaPlayer/metadata/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Returns the metadata that is associated with the current track.
		 
		 ]]></description>
<see><![CDATA[qnx.media.MediaPlayerMetadata
		 ]]></see>
</method>
<method name='numTracks' fullname='qnx.media:MediaPlayer/numTracks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Returns the number of tracks to play.
		 ]]></description>
</method>
<method name='position' fullname='qnx.media:MediaPlayer/position/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Gets the current playback position of the current track in milliseconds.
		 ]]></description>
</method>
<method name='repeat' fullname='qnx.media:MediaPlayer/repeat/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='speed' fullname='qnx.media:MediaPlayer/speed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		  Gets or sets the play speed, in units of 1/1000 of normal speed. 
		 <p>
		 For example, speed == 0 is paused, speed == 1000 indicates normal playback speed. 
		 </p>
		 ]]></description>
</method>
<method name='trackIndex' fullname='qnx.media:MediaPlayer/trackIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Gets the track index of the media playing in the current playlist.
		 ]]></description>
</method>
<method name='url' fullname='qnx.media:MediaPlayer/url/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='videoDisplay' fullname='qnx.media:MediaPlayer/videoDisplay/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.media:VideoDisplay'>
<description><![CDATA[
		 Gets or sets the <code>VideoDisplay</code> to use for displaying the video portion of the media.
		 
		 <p>This call is optional.
		 </p>
		 <p>
		 Not calling this method when playing back a video will result in only the audio track being played.
		 </p>
		 ]]></description>
<param><![CDATA[display The VideoDisplay to use for video
		 ]]></param>
<see><![CDATA[qnx.media.VideoDisplay
		 ]]></see>
</method>
<method name='repeat' fullname='qnx.media:MediaPlayer/repeat/set' isStatic='false' isFinal='false' isOverride='false'  param_names='mode' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets or sets the player repeat mode.
		 <p>
		 Supported modes are:
		 </p>
		 <ul>
		 <li>MediaPlayerRepeat.ALL</li>
		 <li>MediaPlayerRepeat.NONE</li>
		 <li>MediaPlayerRepeat.TRACK</li>
		 </ul>
		 
		 ]]></description>
<see><![CDATA[qnx.media.MediaPlayerRepeat
		 
		 ]]></see>
</method>
<method name='speed' fullname='qnx.media:MediaPlayer/speed/set' isStatic='false' isFinal='false' isOverride='false'  param_names='speed' param_types='uint' param_defaults='undefined' result_type='void'>
</method>
<method name='url' fullname='qnx.media:MediaPlayer/url/set' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the URL for playback (file-path, http/rtsp URL, etc) to use.
		 
		 ]]></description>
<param><![CDATA[url The URL to playback.
		 ]]></param>
</method>
<method name='videoDisplay' fullname='qnx.media:MediaPlayer/videoDisplay/set' isStatic='false' isFinal='false' isOverride='false'  param_names='display' param_types='qnx.media:VideoDisplay' param_defaults='undefined' result_type='void'>
</method>
<field name='IDLE' fullname='qnx.media:MediaPlayer/private:IDLE' type='String' isStatic='true' isConst='true' defaultValue='IDLE' >
</field>
<field name='METADATA_MAP' fullname='qnx.media:MediaPlayer/private:METADATA_MAP' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='PAUSED' fullname='qnx.media:MediaPlayer/private:PAUSED' type='String' isStatic='true' isConst='true' defaultValue='PAUSED' >
</field>
<field name='PAUSING' fullname='qnx.media:MediaPlayer/private:PAUSING' type='String' isStatic='true' isConst='true' defaultValue='PAUSING' >
</field>
<field name='PLAYING' fullname='qnx.media:MediaPlayer/private:PLAYING' type='String' isStatic='true' isConst='true' defaultValue='PLAYING' >
</field>
<field name='PREPARED' fullname='qnx.media:MediaPlayer/private:PREPARED' type='String' isStatic='true' isConst='true' defaultValue='PREPARED' >
</field>
<field name='PREPARE' fullname='qnx.media:MediaPlayer/private:PREPARE' type='String' isStatic='true' isConst='true' defaultValue='PREPARE' >
</field>
<field name='PREPARING' fullname='qnx.media:MediaPlayer/private:PREPARING' type='String' isStatic='true' isConst='true' defaultValue='PREPARING' >
</field>
<field name='STOPPED' fullname='qnx.media:MediaPlayer/private:STOPPED' type='String' isStatic='true' isConst='true' defaultValue='STOPPED' >
</field>
<field name='STOPPING' fullname='qnx.media:MediaPlayer/private:STOPPING' type='String' isStatic='true' isConst='true' defaultValue='STOPPING' >
</field>
<field name='_audioOutput' fullname='qnx.media:MediaPlayer/private:_audioOutput' type='qnx.media.impl.mmr:MMROutput' isStatic='false' isConst='false' >
</field>
<field name='_bufferCapacity' fullname='qnx.media:MediaPlayer/private:_bufferCapacity' type='int' isStatic='false' isConst='false' >
</field>
<field name='_bufferLevel' fullname='qnx.media:MediaPlayer/private:_bufferLevel' type='int' isStatic='false' isConst='false' >
</field>
<field name='_curOffset' fullname='qnx.media:MediaPlayer/private:_curOffset' type='int' isStatic='false' isConst='false' >
</field>
<field name='_curPosition' fullname='qnx.media:MediaPlayer/private:_curPosition' type='int' isStatic='false' isConst='false' >
</field>
<field name='_metadata' fullname='qnx.media:MediaPlayer/private:_metadata' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_mmr_context' fullname='qnx.media:MediaPlayer/private:_mmr_context' type='qnx.media.impl.mmr:MMRContext' isStatic='false' isConst='false' >
</field>
<field name='_playImmediate' fullname='qnx.media:MediaPlayer/private:_playImmediate' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_rmode' fullname='qnx.media:MediaPlayer/private:_rmode' type='String' isStatic='false' isConst='false' defaultValue='none' >
</field>
<field name='_savedSpeed' fullname='qnx.media:MediaPlayer/private:_savedSpeed' type='int' isStatic='false' isConst='false' >
</field>
<field name='_state' fullname='qnx.media:MediaPlayer/private:_state' type='String' isStatic='false' isConst='false' >
</field>
<field name='_url' fullname='qnx.media:MediaPlayer/private:_url' type='String' isStatic='false' isConst='false' >
</field>
<field name='_videoDisplay' fullname='qnx.media:MediaPlayer/private:_videoDisplay' type='qnx.media:VideoDisplay' isStatic='false' isConst='false' >
</field>
<field name='_videoOutput' fullname='qnx.media:MediaPlayer/private:_videoOutput' type='qnx.media.impl.mmr:MMROutput' isStatic='false' isConst='false' >
</field>
<classRec name='VideoDisplay' fullname='qnx.media:VideoDisplay' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\VideoDisplay.as' namespace='qnx.media' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>VideoDisplay</code> class represents the display area of video playback when using the <code>MediaPlayer</code> object.
	 ]]></description>
</classRec>
<method name='VideoDisplay' fullname='qnx.media:VideoDisplay/VideoDisplay' isStatic='false' isFinal='false' isOverride='false'  param_names='allowOverlay' param_types='Boolean' param_defaults='true' result_type='*'>
<description><![CDATA[
		  Creates a <code>VideoDisplay</code> Object.
		 
		 ]]></description>
<param><![CDATA[allowOverlay A <code>Boolean</code> indicating whether or not overlay is allowed. <code>true</code> to allow overlay, otherwise
		 <code>false</code>.
		 ]]></param>
</method>
<method name='drawBars' fullname='qnx.media:VideoDisplay/private:drawBars' isStatic='false' isFinal='false' isOverride='false'  param_names='videoRect' param_types='VideoDisplay.as$237:Rect' param_defaults='undefined' result_type='void'>
</method>
<method name='drawRect' fullname='qnx.media:VideoDisplay/private:drawRect' isStatic='false' isFinal='false' isOverride='false'  param_names='rect;alpha;color' param_types='VideoDisplay.as$237:Rect;Number;uint' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='draw' fullname='qnx.media:VideoDisplay/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fitToSize' fullname='qnx.media:VideoDisplay/private:fitToSize' isStatic='false' isFinal='false' isOverride='false'  param_names='source;dest' param_types='VideoDisplay.as$237:Rect;VideoDisplay.as$237:Rect' param_defaults='undefined;undefined' result_type='VideoDisplay.as$237:Rect'>
</method>
<method name='onAdded' fullname='qnx.media:VideoDisplay/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.media:VideoDisplay/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='outputAttached' fullname='qnx.media:VideoDisplay/private:outputAttached' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='outputDetached' fullname='qnx.media:VideoDisplay/private:outputDetached' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='playItemChange' fullname='qnx.media:VideoDisplay/private:playItemChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='playQueueChange' fullname='qnx.media:VideoDisplay/private:playQueueChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.media.impl.mmr:MMREvent' param_defaults='undefined' result_type='void'>
</method>
<method name='setContext' fullname='qnx.media:VideoDisplay/qnx_internal:setContext' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='qnx.media.impl.mmr:MMRContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[MMRContext The multimedia renderer.
		 
		 
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='videoEnabled' fullname='qnx.media:VideoDisplay/private:videoEnabled' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='_mediaType' fullname='qnx.media:VideoDisplay/private:_mediaType/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='backgroundColor' fullname='qnx.media:VideoDisplay/backgroundColor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The background color of the <code>VideoDisplay</code> object.
		 
		 ]]></description>
<param><![CDATA[rgb The RGB value of the background color.
		 ]]></param>
<return><![CDATA[An RGB value representing the background color.
		 ]]></return>
</method>
<method name='videoHeight' fullname='qnx.media:VideoDisplay/videoHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Returns the height of the video, or 0 if there is no video, no display was set, or the height has not 
		 been determined yet. 
		 
		 <p>
		 The <code>qnx.events.MediaPlayerEvent.videoChange</code> event can be used to provide a 
		 notification when the height is available.
		 </p>
		 ]]></description>
<see><![CDATA[qnx.events.MediaPlayerEvent#videoChange
		 ]]></see>
</method>
<method name='videoWidth' fullname='qnx.media:VideoDisplay/videoWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 Returns the width of the video, or 0 if there is no video, no display was set, or the width has not 
		 been determined yet. 
		 <p>
		 The <code>qnx.events.MediaPlayerEvent.videoChange</code> event can be used to provide a 
		 notification when the width is available.
		 </p>
		 ]]></description>
<see><![CDATA[qnx.events.MediaPlayerEvent#videoChange
		 ]]></see>
</method>
<method name='visible' fullname='qnx.media:VideoDisplay/visible/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='backgroundColor' fullname='qnx.media:VideoDisplay/backgroundColor/set' isStatic='false' isFinal='false' isOverride='false'  param_names='rgb' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 The background color of the <code>VideoDisplay</code> object.
		 ]]></description>
</method>
<method name='visible' fullname='qnx.media:VideoDisplay/visible/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_bkgColor' fullname='qnx.media:VideoDisplay/private:_bkgColor' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_chromaColor' fullname='qnx.media:VideoDisplay/private:_chromaColor' type='uint' isStatic='false' isConst='false' defaultValue='0x000000' >
</field>
<field name='_curOffset' fullname='qnx.media:VideoDisplay/private:_curOffset' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_enabled' fullname='qnx.media:VideoDisplay/private:_enabled' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_mmr_context' fullname='qnx.media:VideoDisplay/private:_mmr_context' type='qnx.media.impl.mmr:MMRContext' isStatic='false' isConst='false' >
</field>
<field name='_mmr_output' fullname='qnx.media:VideoDisplay/private:_mmr_output' type='qnx.media.impl.mmr:MMROutput' isStatic='false' isConst='false' >
</field>
<field name='_videoAlpha' fullname='qnx.media:VideoDisplay/private:_videoAlpha' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='allowOverlay' fullname='qnx.media:VideoDisplay/qnx_internal:allowOverlay' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AuxFunctions' fullname='caurina.transitions:AuxFunctions' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\AuxFunctions.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='concatObjects' fullname='caurina.transitions:AuxFunctions/concatObjects' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='Object'>
</method>
<method name='getObjectLength' fullname='caurina.transitions:AuxFunctions/getObjectLength' isStatic='true' isFinal='false' isOverride='false'  param_names='p_object' param_types='Object' param_defaults='undefined' result_type='uint'>
<description><![CDATA[

		 Returns the number of properties an object has

		 
		 ]]></description>
<param><![CDATA[p_object			Object		Target object with a number of properties

		 ]]></param>
<return><![CDATA[Number		Number of total properties the object has

		 ]]></return>
</method>
<method name='numberToB' fullname='caurina.transitions:AuxFunctions/numberToB' isStatic='true' isFinal='false' isOverride='false'  param_names='p_num' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[

		 Gets the B (0000xx) bits from a number

		 
		 ]]></description>
<param><![CDATA[p_num				Number		Color number (ie, 0xffff00)

		 ]]></param>
<return><![CDATA[Number		The B value

		 ]]></return>
</method>
<method name='numberToG' fullname='caurina.transitions:AuxFunctions/numberToG' isStatic='true' isFinal='false' isOverride='false'  param_names='p_num' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[

		 Gets the G (00xx00) bits from a number

		 
		 ]]></description>
<param><![CDATA[p_num				Number		Color number (ie, 0xffff00)

		 ]]></param>
<return><![CDATA[Number		The G value

		 ]]></return>
</method>
<method name='numberToR' fullname='caurina.transitions:AuxFunctions/numberToR' isStatic='true' isFinal='false' isOverride='false'  param_names='p_num' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[

		 Gets the R (xx0000) bits from a number

		 
		 ]]></description>
<param><![CDATA[p_num				Number		Color number (ie, 0xffff00)

		 ]]></param>
<return><![CDATA[Number		The R value

		 ]]></return>
</method>
<classRec name='SpecialPropertySplitter' fullname='caurina.transitions:SpecialPropertySplitter' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\SpecialPropertySplitter.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='SpecialPropertySplitter' fullname='caurina.transitions:SpecialPropertySplitter/SpecialPropertySplitter' isStatic='false' isFinal='false' isOverride='false'  param_names='p_splitFunction;p_parameters' param_types='Function;Array' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Builds a new group special property object.

		 
		 ]]></description>
<param><![CDATA[p_splitFunction		Function	Reference to the function used to split a value

		 ]]></param>
</method>
<method name='toString' fullname='caurina.transitions:SpecialPropertySplitter/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Converts the instance to a string that can be used when trace()ing the object

		 ]]></description>
</method>
<field name='parameters' fullname='caurina.transitions:SpecialPropertySplitter/parameters' type='Array' isStatic='false' isConst='false' >
</field>
<field name='splitValues' fullname='caurina.transitions:SpecialPropertySplitter/splitValues' type='Function' isStatic='false' isConst='false' >
</field>
<classRec name='SpecialProperty' fullname='caurina.transitions:SpecialProperty' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\SpecialProperty.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='SpecialProperty' fullname='caurina.transitions:SpecialProperty/SpecialProperty' isStatic='false' isFinal='false' isOverride='false'  param_names='p_getFunction;p_setFunction;p_parameters;p_preProcessFunction' param_types='Function;Function;Array;Function' param_defaults='undefined;undefined;null;null' result_type='*'>
<description><![CDATA[

		 Builds a new special property object.

		 
		 ]]></description>
<param><![CDATA[p_getFunction		Function	Reference to the function used to get the special property value

		 ]]></param>
<param><![CDATA[p_setFunction		Function	Reference to the function used to set the special property value

		 ]]></param>
</method>
<method name='toString' fullname='caurina.transitions:SpecialProperty/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Converts the instance to a string that can be used when trace()ing the object

		 ]]></description>
</method>
<field name='getValue' fullname='caurina.transitions:SpecialProperty/getValue' type='Function' isStatic='false' isConst='false' >
</field>
<field name='parameters' fullname='caurina.transitions:SpecialProperty/parameters' type='Array' isStatic='false' isConst='false' >
</field>
<field name='preProcess' fullname='caurina.transitions:SpecialProperty/preProcess' type='Function' isStatic='false' isConst='false' >
</field>
<field name='setValue' fullname='caurina.transitions:SpecialProperty/setValue' type='Function' isStatic='false' isConst='false' >
</field>
<classRec name='PropertyInfoObj' fullname='caurina.transitions:PropertyInfoObj' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\PropertyInfoObj.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='PropertyInfoObj' fullname='caurina.transitions:PropertyInfoObj/caurina.transitions:PropertyInfoObj' isStatic='false' isFinal='false' isOverride='false'  param_names='p_valueStart;p_valueComplete;p_originalValueComplete;p_arrayIndex;p_extra;p_isSpecialProperty;p_modifierFunction;p_modifierParameters' param_types='Number;Number;Object;Number;Object;Boolean;Function;Array' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[

		 Initializes the basic PropertyInfoObj.

		 
		 ]]></description>
<param><![CDATA[p_valueStart		Number		Starting value of the tweening (null if not started yet)

		 ]]></param>
<param><![CDATA[p_valueComplete		Number		Final (desired) property value

		 ]]></param>
</method>
<method name='clone' fullname='caurina.transitions:PropertyInfoObj/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='caurina.transitions:PropertyInfoObj'>
<description><![CDATA[

		 Clones this property info and returns the new PropertyInfoObj

		 
		 ]]></description>
<param><![CDATA[omitEvents		Boolean			Whether or not events such as onStart (and its parameters) should be omitted

		 ]]></param>
<return><![CDATA[TweenListObj	A copy of this object

		 ]]></return>
</method>
<method name='toString' fullname='caurina.transitions:PropertyInfoObj/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns this object described as a String.

		 
		 ]]></description>
<return><![CDATA[String		The description of this object.

		 ]]></return>
</method>
<field name='arrayIndex' fullname='caurina.transitions:PropertyInfoObj/arrayIndex' type='Number' isStatic='false' isConst='false' >
</field>
<field name='extra' fullname='caurina.transitions:PropertyInfoObj/extra' type='Object' isStatic='false' isConst='false' >
</field>
<field name='hasModifier' fullname='caurina.transitions:PropertyInfoObj/hasModifier' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='isSpecialProperty' fullname='caurina.transitions:PropertyInfoObj/isSpecialProperty' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='modifierFunction' fullname='caurina.transitions:PropertyInfoObj/modifierFunction' type='Function' isStatic='false' isConst='false' >
</field>
<field name='modifierParameters' fullname='caurina.transitions:PropertyInfoObj/modifierParameters' type='Array' isStatic='false' isConst='false' >
</field>
<field name='originalValueComplete' fullname='caurina.transitions:PropertyInfoObj/originalValueComplete' type='Object' isStatic='false' isConst='false' >
</field>
<field name='valueComplete' fullname='caurina.transitions:PropertyInfoObj/valueComplete' type='Number' isStatic='false' isConst='false' >
</field>
<field name='valueStart' fullname='caurina.transitions:PropertyInfoObj/valueStart' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='TweenListObj' fullname='caurina.transitions:TweenListObj' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\TweenListObj.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Nate Chatellier, Zeh Fernando

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.4

	 ]]></version>
</classRec>
<method name='TweenListObj' fullname='caurina.transitions:TweenListObj/caurina.transitions:TweenListObj' isStatic='false' isFinal='false' isOverride='false'  param_names='p_scope;p_timeStart;p_timeComplete;p_useFrames;p_transition;p_transitionParams' param_types='Object;Number;Number;Boolean;Function;Object' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[

		 Initializes the basic TweenListObj.

		 
		 ]]></description>
<param><![CDATA[p_scope				Object		Object affected by this tweening

		 ]]></param>
<param><![CDATA[p_timeStart			Number		Time when this tweening should start

		 ]]></param>
<param><![CDATA[p_timeComplete		Number		Time when this tweening should end

		 ]]></param>
<param><![CDATA[p_useFrames			Boolean		Whether or not to use frames instead of time

		 ]]></param>
<param><![CDATA[p_transition		Function	Equation to control the transition animation

		 ]]></param>
</method>
<method name='clone' fullname='caurina.transitions:TweenListObj/clone' isStatic='false' isFinal='false' isOverride='false'  param_names='omitEvents' param_types='Boolean' param_defaults='undefined' result_type='caurina.transitions:TweenListObj'>
<description><![CDATA[

		 Clones this tweening and returns the new TweenListObj

		 
		 ]]></description>
<param><![CDATA[omitEvents		Boolean			Whether or not events such as onStart (and its parameters) should be omitted

		 ]]></param>
<return><![CDATA[TweenListObj	A copy of this object

		 ]]></return>
</method>
<method name='makePropertiesChain' fullname='caurina.transitions:TweenListObj/makePropertiesChain' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj' param_types='Object' param_defaults='undefined' result_type='Object'>
<description><![CDATA[

		 Checks if p_obj "inherits" properties from other objects, as set by the "base" property. Will create a new object, leaving others intact.

		 o_bj.base can be an object or an array of objects. Properties are collected from the first to the last element of the "base" filed, with higher

		 indexes overwritting smaller ones. Does not modify any of the passed objects, but makes a shallow copy of all properties.

		 
		 ]]></description>
<param><![CDATA[p_obj		Object				Object that should be tweened: a movieclip, textfield, etc.. OR an array of objects

		 ]]></param>
<return><![CDATA[Object				A new object with all properties from the p_obj and p_obj.base.

		 ]]></return>
</method>
<method name='toString' fullname='caurina.transitions:TweenListObj/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns this object described as a String.

		 
		 ]]></description>
<return><![CDATA[String		The description of this object.

		 ]]></return>
</method>
<field name='count' fullname='caurina.transitions:TweenListObj/count' type='Number' isStatic='false' isConst='false' >
</field>
<field name='hasStarted' fullname='caurina.transitions:TweenListObj/hasStarted' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='isCaller' fullname='caurina.transitions:TweenListObj/isCaller' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='isPaused' fullname='caurina.transitions:TweenListObj/isPaused' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='onCompleteParams' fullname='caurina.transitions:TweenListObj/onCompleteParams' type='Array' isStatic='false' isConst='false' >
</field>
<field name='onCompleteScope' fullname='caurina.transitions:TweenListObj/onCompleteScope' type='Object' isStatic='false' isConst='false' >
</field>
<field name='onComplete' fullname='caurina.transitions:TweenListObj/onComplete' type='Function' isStatic='false' isConst='false' >
</field>
<field name='onErrorScope' fullname='caurina.transitions:TweenListObj/onErrorScope' type='Object' isStatic='false' isConst='false' >
</field>
<field name='onError' fullname='caurina.transitions:TweenListObj/onError' type='Function' isStatic='false' isConst='false' >
</field>
<field name='onOverwriteParams' fullname='caurina.transitions:TweenListObj/onOverwriteParams' type='Array' isStatic='false' isConst='false' >
</field>
<field name='onOverwriteScope' fullname='caurina.transitions:TweenListObj/onOverwriteScope' type='Object' isStatic='false' isConst='false' >
</field>
<field name='onOverwrite' fullname='caurina.transitions:TweenListObj/onOverwrite' type='Function' isStatic='false' isConst='false' >
</field>
<field name='onStartParams' fullname='caurina.transitions:TweenListObj/onStartParams' type='Array' isStatic='false' isConst='false' >
</field>
<field name='onStartScope' fullname='caurina.transitions:TweenListObj/onStartScope' type='Object' isStatic='false' isConst='false' >
</field>
<field name='onStart' fullname='caurina.transitions:TweenListObj/onStart' type='Function' isStatic='false' isConst='false' >
</field>
<field name='onUpdateParams' fullname='caurina.transitions:TweenListObj/onUpdateParams' type='Array' isStatic='false' isConst='false' >
</field>
<field name='onUpdateScope' fullname='caurina.transitions:TweenListObj/onUpdateScope' type='Object' isStatic='false' isConst='false' >
</field>
<field name='onUpdate' fullname='caurina.transitions:TweenListObj/onUpdate' type='Function' isStatic='false' isConst='false' >
</field>
<field name='properties' fullname='caurina.transitions:TweenListObj/properties' type='Object' isStatic='false' isConst='false' >
</field>
<field name='rounded' fullname='caurina.transitions:TweenListObj/rounded' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='scope' fullname='caurina.transitions:TweenListObj/scope' type='Object' isStatic='false' isConst='false' >
</field>
<field name='skipUpdates' fullname='caurina.transitions:TweenListObj/skipUpdates' type='Number' isStatic='false' isConst='false' >
</field>
<field name='timeComplete' fullname='caurina.transitions:TweenListObj/timeComplete' type='Number' isStatic='false' isConst='false' >
</field>
<field name='timePaused' fullname='caurina.transitions:TweenListObj/timePaused' type='Number' isStatic='false' isConst='false' >
</field>
<field name='timeStart' fullname='caurina.transitions:TweenListObj/timeStart' type='Number' isStatic='false' isConst='false' >
</field>
<field name='timesCalled' fullname='caurina.transitions:TweenListObj/timesCalled' type='Number' isStatic='false' isConst='false' >
</field>
<field name='transitionParams' fullname='caurina.transitions:TweenListObj/transitionParams' type='Object' isStatic='false' isConst='false' >
</field>
<field name='transition' fullname='caurina.transitions:TweenListObj/transition' type='Function' isStatic='false' isConst='false' >
</field>
<field name='updatesSkipped' fullname='caurina.transitions:TweenListObj/updatesSkipped' type='Number' isStatic='false' isConst='false' >
</field>
<field name='useFrames' fullname='caurina.transitions:TweenListObj/useFrames' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='waitFrames' fullname='caurina.transitions:TweenListObj/waitFrames' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='SpecialPropertyModifier' fullname='caurina.transitions:SpecialPropertyModifier' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\SpecialPropertyModifier.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='SpecialPropertyModifier' fullname='caurina.transitions:SpecialPropertyModifier/SpecialPropertyModifier' isStatic='false' isFinal='false' isOverride='false'  param_names='p_modifyFunction;p_getFunction' param_types='Function;Function' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Builds a new special property modifier object.

		 

		 ]]></description>
<param><![CDATA[p_modifyFunction		Function		Function that returns the modifider parameters.

		 ]]></param>
</method>
<method name='toString' fullname='caurina.transitions:SpecialPropertyModifier/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

	 Converts the instance to a string that can be used when trace()ing the object

	 ]]></description>
</method>
<field name='getValue' fullname='caurina.transitions:SpecialPropertyModifier/getValue' type='Function' isStatic='false' isConst='false' >
</field>
<field name='modifyValues' fullname='caurina.transitions:SpecialPropertyModifier/modifyValues' type='Function' isStatic='false' isConst='false' >
</field>
<packageRec name='caurina.transitions.null' fullname='caurina.transitions.null'>
<description><![CDATA[

 Equations

 Main equations for the Tweener class

 
 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier

 ]]></author>
<version><![CDATA[1.0.2

 ]]></version>
</packageRec>
<classRec name='Equations' fullname='caurina.transitions:Equations' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\Equations.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='Equations' fullname='caurina.transitions:Equations/Equations' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='easeInBack' fullname='caurina.transitions:Equations/easeInBack' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a back (overshooting cubic easing: (s+1)^3 - s^2) easing in: accelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInBounce' fullname='caurina.transitions:Equations/easeInBounce' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in: accelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInCirc' fullname='caurina.transitions:Equations/easeInCirc' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a circular (sqrt(1-t^2)) easing in: accelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInCubic' fullname='caurina.transitions:Equations/easeInCubic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a cubic (t^3) easing in: accelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInElastic' fullname='caurina.transitions:Equations/easeInElastic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an elastic (exponentially decaying sine wave) easing in: accelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[a		Amplitude.

		 ]]></param>
<param><![CDATA[p		Period.

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInExpo' fullname='caurina.transitions:Equations/easeInExpo' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an exponential (2^t) easing in: accelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutBack' fullname='caurina.transitions:Equations/easeInOutBack' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a back (overshooting cubic easing: (s+1)^3 - s^2) easing in/out: acceleration until halfway, then deceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutBounce' fullname='caurina.transitions:Equations/easeInOutBounce' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in/out: acceleration until halfway, then deceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutCirc' fullname='caurina.transitions:Equations/easeInOutCirc' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a circular (sqrt(1-t^2)) easing in/out: acceleration until halfway, then deceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutCubic' fullname='caurina.transitions:Equations/easeInOutCubic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a cubic (t^3) easing in/out: acceleration until halfway, then deceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutElastic' fullname='caurina.transitions:Equations/easeInOutElastic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an elastic (exponentially decaying sine wave) easing in/out: acceleration until halfway, then deceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[a		Amplitude.

		 ]]></param>
<param><![CDATA[p		Period.

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutExpo' fullname='caurina.transitions:Equations/easeInOutExpo' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an exponential (2^t) easing in/out: acceleration until halfway, then deceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutQuad' fullname='caurina.transitions:Equations/easeInOutQuad' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quadratic (t^2) easing in/out: acceleration until halfway, then deceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutQuart' fullname='caurina.transitions:Equations/easeInOutQuart' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quartic (t^4) easing in/out: acceleration until halfway, then deceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutQuint' fullname='caurina.transitions:Equations/easeInOutQuint' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quintic (t^5) easing in/out: acceleration until halfway, then deceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInOutSine' fullname='caurina.transitions:Equations/easeInOutSine' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a sinusoidal (sin(t)) easing in/out: acceleration until halfway, then deceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInQuad' fullname='caurina.transitions:Equations/easeInQuad' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quadratic (t^2) easing in: accelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInQuart' fullname='caurina.transitions:Equations/easeInQuart' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quartic (t^4) easing in: accelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInQuint' fullname='caurina.transitions:Equations/easeInQuint' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quintic (t^5) easing in: accelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeInSine' fullname='caurina.transitions:Equations/easeInSine' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a sinusoidal (sin(t)) easing in: accelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeNone' fullname='caurina.transitions:Equations/easeNone' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a simple linear tweening, with no easing.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutBack' fullname='caurina.transitions:Equations/easeOutBack' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a back (overshooting cubic easing: (s+1)^3 - s^2) easing out: decelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutBounce' fullname='caurina.transitions:Equations/easeOutBounce' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out: decelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutCirc' fullname='caurina.transitions:Equations/easeOutCirc' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a circular (sqrt(1-t^2)) easing out: decelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutCubic' fullname='caurina.transitions:Equations/easeOutCubic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a cubic (t^3) easing out: decelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutElastic' fullname='caurina.transitions:Equations/easeOutElastic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an elastic (exponentially decaying sine wave) easing out: decelerating from zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[a		Amplitude.

		 ]]></param>
<param><![CDATA[p		Period.

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutExpo' fullname='caurina.transitions:Equations/easeOutExpo' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an exponential (2^t) easing out: decelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInBack' fullname='caurina.transitions:Equations/easeOutInBack' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a back (overshooting cubic easing: (s+1)^3 - s^2) easing out/in: deceleration until halfway, then acceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[s		Overshoot ammount: higher s means greater overshoot (0 produces cubic easing with no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInBounce' fullname='caurina.transitions:Equations/easeOutInBounce' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out/in: deceleration until halfway, then acceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInCirc' fullname='caurina.transitions:Equations/easeOutInCirc' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a circular (sqrt(1-t^2)) easing out/in: deceleration until halfway, then acceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInCubic' fullname='caurina.transitions:Equations/easeOutInCubic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a cubic (t^3) easing out/in: deceleration until halfway, then acceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInElastic' fullname='caurina.transitions:Equations/easeOutInElastic' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an elastic (exponentially decaying sine wave) easing out/in: deceleration until halfway, then acceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<param><![CDATA[a		Amplitude.

		 ]]></param>
<param><![CDATA[p		Period.

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInExpo' fullname='caurina.transitions:Equations/easeOutInExpo' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for an exponential (2^t) easing out/in: deceleration until halfway, then acceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInQuad' fullname='caurina.transitions:Equations/easeOutInQuad' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quadratic (t^2) easing out/in: deceleration until halfway, then acceleration.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInQuart' fullname='caurina.transitions:Equations/easeOutInQuart' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quartic (t^4) easing out/in: deceleration until halfway, then acceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInQuint' fullname='caurina.transitions:Equations/easeOutInQuint' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quintic (t^5) easing out/in: deceleration until halfway, then acceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutInSine' fullname='caurina.transitions:Equations/easeOutInSine' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a sinusoidal (sin(t)) easing out/in: deceleration until halfway, then acceleration.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutQuad' fullname='caurina.transitions:Equations/easeOutQuad' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quadratic (t^2) easing out: decelerating to zero velocity.

		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutQuart' fullname='caurina.transitions:Equations/easeOutQuart' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quartic (t^4) easing out: decelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutQuint' fullname='caurina.transitions:Equations/easeOutQuint' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a quintic (t^5) easing out: decelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='easeOutSine' fullname='caurina.transitions:Equations/easeOutSine' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Easing equation function for a sinusoidal (sin(t)) easing out: decelerating from zero velocity.

 		 
		 ]]></description>
<param><![CDATA[t		Current time (in frames or seconds).

		 ]]></param>
<param><![CDATA[b		Starting value.

		 ]]></param>
<param><![CDATA[c		Change needed in value.

		 ]]></param>
<param><![CDATA[d		Expected easing duration (in frames or seconds).

		 ]]></param>
<return><![CDATA[The correct value.

		 ]]></return>
</method>
<method name='init' fullname='caurina.transitions:Equations/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the equations to the Tweener class, so they can be found by the direct string parameters.

		 This method doesn't actually have to be used - equations can always be referenced by their full function

		 names. But "registering" them make them available as their shorthand string names.

		 ]]></description>
</method>
<packageRec name='caurina.transitions.null' fullname='caurina.transitions.null'>
<description><![CDATA[

 Tweener

 Transition controller for movieclips, sounds, textfields and other objects

 
 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert, Francis Turmel

 ]]></author>
<version><![CDATA[1.33.74

 ]]></version>
</packageRec>
<classRec name='Tweener' fullname='caurina.transitions:Tweener' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\Tweener.as' namespace='caurina.transitions' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='Tweener' fullname='caurina.transitions:Tweener/Tweener' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addCaller' fullname='caurina.transitions:Tweener/addCaller' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scopes;p_parameters' param_types='Object;Object' param_defaults='null;null' result_type='Boolean'>
<description><![CDATA[

		 Adds a new caller tweening.

		 
		 ]]></description>
<param><![CDATA[(first-n param)		Object that should be tweened: a movieclip, textfield, etc.. OR an array of objects

		 ]]></param>
<param><![CDATA[(last param)		Object containing the specified parameters in any order, as well as the properties that should be tweened and their values

		 ]]></param>
<param><![CDATA[.time				Number				Time in seconds or frames for the tweening to take (defaults 2)

		 ]]></param>
<param><![CDATA[.delay				Number				Delay time (defaults 0)

		 ]]></param>
<param><![CDATA[.count				Number				Number of times this caller should be called

		 ]]></param>
<param><![CDATA[.transition			String/Function		Type of transition equation... (defaults to "easeoutexpo")

		 ]]></param>
<param><![CDATA[.onStart			Function			Event called when tween starts

		 ]]></param>
<param><![CDATA[.onUpdate			Function			Event called when tween updates

		 ]]></param>
<param><![CDATA[.onComplete			Function			Event called when tween ends

		 ]]></param>
<param><![CDATA[.waitFrames			Boolean				Whether to wait (or not) one frame for each call

		 ]]></param>
<return><![CDATA[<code>true</code> if the tween was successfully added, <code>false</code> if otherwise.

		 ]]></return>
</method>
<method name='addTween' fullname='caurina.transitions:Tweener/addTween' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scopes;p_parameters' param_types='Object;Object' param_defaults='null;null' result_type='Boolean'>
<description><![CDATA[

		 Adds a new tweening.

		 
		 ]]></description>
<param><![CDATA[(first-n param)		Object				Object that should be tweened: a movieclip, textfield, etc.. OR an array of objects

		 ]]></param>
<param><![CDATA[(last param)		Object				Object containing the specified parameters in any order, as well as the properties that should be tweened and their values

		 ]]></param>
<param><![CDATA[.time				Number				Time in seconds or frames for the tweening to take (defaults 2)

		 ]]></param>
<param><![CDATA[.delay				Number				Delay time (defaults 0)

		 ]]></param>
<param><![CDATA[.useFrames			Boolean				Whether to use frames instead of seconds for time control (defaults false)

		 ]]></param>
<param><![CDATA[.transition			String/Function		Type of transition equation... (defaults to "easeoutexpo")

		 ]]></param>
<param><![CDATA[.onStart			Function			Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onUpdate			Function			Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onComplete			Function			Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onOverwrite		Function			Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onStartParams		Array				Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onUpdateParams		Array				Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onCompleteParams	Array				Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.onOverwriteParams	Array				Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.rounded			Boolean				Direct property, See the TweenListObj class

		 ]]></param>
<param><![CDATA[.skipUpdates		Number				Direct property, See the TweenListObj class

		 ]]></param>
<return><![CDATA[Boolean				TRUE if the tween was successfully added, FALSE if otherwise

		 ]]></return>
</method>
<method name='affectTweens' fullname='caurina.transitions:Tweener/private:affectTweens' isStatic='true' isFinal='false' isOverride='false'  param_names='p_affectFunction;p_scope;p_properties' param_types='Function;Object;Array' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Do some generic action on specific tweenings (pause, resume, remove, more?)

		 
		 ]]></description>
<param><![CDATA[p_function			Function	Function to run on the tweenings that match

		 ]]></param>
<param><![CDATA[p_scope				Object		Object that must have its tweens affected by the function

		 ]]></param>
<param><![CDATA[p_properties		Array		Array of strings that must be affected

		 ]]></param>
<return><![CDATA[Boolean		Whether or not it successfully affected something

		 ]]></return>
</method>
<method name='getCurrentTweeningTime' fullname='caurina.transitions:Tweener/getCurrentTweeningTime' isStatic='true' isFinal='false' isOverride='false'  param_names='p_tweening' param_types='Object' param_defaults='undefined' result_type='Number'>
<description><![CDATA[

		 Get the current tweening time (no matter if it uses frames or time as basis), given a specific tweening

		 
		 ]]></description>
<param><![CDATA[p_tweening				TweenListObj		Tween information

		 ]]></param>
</method>
<method name='getTweenCount' fullname='caurina.transitions:Tweener/getTweenCount' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope' param_types='Object' param_defaults='undefined' result_type='Number'>
<description><![CDATA[

		 Returns the number of properties being tweened for a given object.

		 
		 ]]></description>
<param><![CDATA[p_scope		Target object.

		 ]]></param>
<return><![CDATA[Total number of properties being tweened (including delayed or paused tweens).

		 ]]></return>
</method>
<method name='getTweens' fullname='caurina.transitions:Tweener/getTweens' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope' param_types='Object' param_defaults='undefined' result_type='Array'>
<description><![CDATA[

		 Returns an array containing a list of the properties being tweened for this object.

		 
		 ]]></description>
<param><![CDATA[p_scope		Target object.

		 ]]></param>
<return><![CDATA[Total number of properties being tweened (including delayed or paused tweens).

		 ]]></return>
</method>
<method name='getVersion' fullname='caurina.transitions:Tweener/getVersion' isStatic='true' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Return the current tweener version

		 
		 ]]></description>
<return><![CDATA[String		The number of the current Tweener version

		 ]]></return>
</method>
<method name='handleError' fullname='caurina.transitions:Tweener/private:handleError' isStatic='true' isFinal='false' isOverride='false'  param_names='pTweening;pError;pCallBackName' param_types='caurina.transitions:TweenListObj;Error;String' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='init' fullname='caurina.transitions:Tweener/init' isStatic='true' isFinal='false' isOverride='false'  param_names='rest' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Initiates the Tweener--should only be ran once.

		 ]]></description>
</method>
<method name='isTweening' fullname='caurina.transitions:Tweener/isTweening' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Finds whether or not an object has any tweening.

		 
		 ]]></description>
<param><![CDATA[p_scope		Target object.

		 ]]></param>
<return><![CDATA[<code>true</code> if there's a tweening occuring on this object (paused, delayed, or active), <code>false</code> if otherwise.

		 ]]></return>
</method>
<method name='onEnterFrame' fullname='caurina.transitions:Tweener/onEnterFrame' isStatic='true' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Ran once every frame. It's the main engine; updates all existing tweenings.

		 ]]></description>
</method>
<method name='pauseAllTweens' fullname='caurina.transitions:Tweener/pauseAllTweens' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Pause all tweenings on the engine.

		 
		 ]]></description>
<return><![CDATA[<code>true</code> if it successfully paused any tweening, <code>false</code> if otherwise.

		 ]]></return>
<see><![CDATA[#resumeAllTweens()

		 ]]></see>
</method>
<method name='pauseTweenByIndex' fullname='caurina.transitions:Tweener/pauseTweenByIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='p_tween' param_types='Number' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Pauses a specific tween.

		 
		 ]]></description>
<param><![CDATA[p_tween				Number		Index of the tween to be paused

		 ]]></param>
<return><![CDATA[Boolean		Whether or not it successfully paused this tweening

		 ]]></return>
</method>
<method name='pauseTweens' fullname='caurina.transitions:Tweener/pauseTweens' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope;args' param_types='Object;restParam' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Pause tweenings for a given object.

		 
		 ]]></description>
<param><![CDATA[p_scope				Object that must have its tweens paused

		 ]]></param>
<param><![CDATA[(2nd-last params)	Property(ies) that must be paused

		 ]]></param>
<return><![CDATA[<code>true</code> if it successfully paused any tweening, <code>false</code> if otherwise.

		 ]]></return>
</method>
<method name='printError' fullname='caurina.transitions:Tweener/printError' isStatic='true' isFinal='false' isOverride='false'  param_names='p_message' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Output an error message

		 
		 ]]></description>
<param><![CDATA[p_message				String		The error message to output

		 ]]></param>
</method>
<method name='registerSpecialPropertyModifier' fullname='caurina.transitions:Tweener/registerSpecialPropertyModifier' isStatic='true' isFinal='false' isOverride='false'  param_names='p_name;p_modifyFunction;p_getFunction' param_types='String;Function;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Adds a new special property modifier to the available modifier list.

		 
		 ]]></description>
<param><![CDATA[p_name				Name of the "special" property modifier.

		 ]]></param>
<param><![CDATA[p_modifyFunction	Function that modifies the value.

		 ]]></param>
<param><![CDATA[p_getFunction		Function that gets the value.

		 ]]></param>
</method>
<method name='registerSpecialPropertySplitter' fullname='caurina.transitions:Tweener/registerSpecialPropertySplitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_name;p_splitFunction;p_parameters' param_types='String;Function;Array' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[

		 Adds a new special property splitter to the available splitter list.

		 
		 ]]></description>
<param><![CDATA[p_name				Name of the "special" property splitter.

		 ]]></param>
<param><![CDATA[p_splitFunction		Function that splits the value.

		 ]]></param>
</method>
<method name='registerSpecialProperty' fullname='caurina.transitions:Tweener/registerSpecialProperty' isStatic='true' isFinal='false' isOverride='false'  param_names='p_name;p_getFunction;p_setFunction;p_parameters;p_preProcessFunction' param_types='String;Function;Function;Array;Function' param_defaults='undefined;undefined;undefined;null;null' result_type='void'>
<description><![CDATA[

		 Adds a new special property to the available special property list.

		 
		 ]]></description>
<param><![CDATA[p_name				Name of the "special" property.

		 ]]></param>
<param><![CDATA[p_getFunction		Function that gets the value.

		 ]]></param>
<param><![CDATA[p_setFunction		Function that sets the value.

		 ]]></param>
</method>
<method name='registerTransition' fullname='caurina.transitions:Tweener/registerTransition' isStatic='true' isFinal='false' isOverride='false'  param_names='p_name;p_function' param_types='String;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Adds a new function to the available transition list "shortcuts".

		 
		 ]]></description>
<param><![CDATA[p_name				String		Shorthand transition name

		 ]]></param>
<param><![CDATA[p_function			Function	The proper equation function

		 ]]></param>
</method>
<method name='removeAllTweens' fullname='caurina.transitions:Tweener/removeAllTweens' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Remove all tweenings from the engine.

		 
		 ]]></description>
<return><![CDATA[<code>true</code> if it successfully removed any tweening, <code>false</code> if otherwise.

		 ]]></return>
</method>
<method name='removeTweenByIndex' fullname='caurina.transitions:Tweener/removeTweenByIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='i;p_finalRemoval' param_types='Number;Boolean' param_defaults='undefined;false' result_type='Boolean'>
<description><![CDATA[

		 Remove a specific tweening from the tweening list.

		 
		 ]]></description>
<param><![CDATA[p_tween				Number		Index of the tween to be removed on the tweenings list

		 ]]></param>
<return><![CDATA[Boolean		Whether or not it successfully removed this tweening

		 ]]></return>
</method>
<method name='removeTweensByTime' fullname='caurina.transitions:Tweener/removeTweensByTime' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope;p_properties;p_timeStart;p_timeComplete' param_types='Object;Object;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Remove an specified tweening of a specified object the tweening list, if it conflicts with the given time.

		 
		 ]]></description>
<param><![CDATA[p_scope				Object						List of objects affected

		 ]]></param>
<param><![CDATA[p_properties		Object 						List of properties affected (PropertyInfoObj instances)

		 ]]></param>
<param><![CDATA[p_timeStart			Number						Time when the new tween starts

		 ]]></param>
<param><![CDATA[p_timeComplete		Number						Time when the new tween ends

		 ]]></param>
<return><![CDATA[Boolean						Whether or not it actually deleted something

		 ]]></return>
</method>
<method name='removeTweens' fullname='caurina.transitions:Tweener/removeTweens' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope;args' param_types='Object;restParam' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Remove tweenings from a given object from the tweening list.

		 
		 ]]></description>
<param><![CDATA[p_tween				Object		Object that must have its tweens removed

		 ]]></param>
<param><![CDATA[(2nd-last params)	Object		Property(ies) that must be removed

		 ]]></param>
<return><![CDATA[Boolean		Whether or not it successfully removed this tweening

		 ]]></return>
</method>
<method name='resumeAllTweens' fullname='caurina.transitions:Tweener/resumeAllTweens' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Resume all tweenings on the engine.

		 
		 ]]></description>
<return><![CDATA[<code>true</code> if it successfully resumed any tweening, <code>false</code> if otherwise.

		 ]]></return>
<see><![CDATA[#pauseAllTweens()

		 ]]></see>
</method>
<method name='resumeTweenByIndex' fullname='caurina.transitions:Tweener/resumeTweenByIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='p_tween' param_types='Number' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Resumes a specific tween.

		 
		 ]]></description>
<param><![CDATA[p_tween				Number		Index of the tween to be resumed

		 ]]></param>
<return><![CDATA[Boolean		Whether or not it successfully resumed this tweening

		 ]]></return>
</method>
<method name='resumeTweens' fullname='caurina.transitions:Tweener/resumeTweens' isStatic='true' isFinal='false' isOverride='false'  param_names='p_scope;args' param_types='Object;restParam' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[

		 Resume tweenings from a given object.

		 
		 ]]></description>
<param><![CDATA[p_scope				Object		Object that must have its tweens resumed

		 ]]></param>
<param><![CDATA[(2nd-last params)	Object		Property(ies) that must be resumed

		 ]]></param>
<return><![CDATA[Boolean		Whether or not it successfully resumed something

		 ]]></return>
</method>
<method name='setTimeScale' fullname='caurina.transitions:Tweener/setTimeScale' isStatic='true' isFinal='false' isOverride='false'  param_names='p_time' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the new time scale.

		 
		 ]]></description>
<param><![CDATA[p_time				Number		New time scale (0.5 = slow, 1 = normal, 2 = 2x fast forward, etc)

		 ]]></param>
</method>
<method name='splitTweens' fullname='caurina.transitions:Tweener/splitTweens' isStatic='true' isFinal='false' isOverride='false'  param_names='p_tween;p_properties' param_types='Number;Array' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[

		 Splits a tweening in two

		 
		 ]]></description>
<param><![CDATA[p_tween				Number		Object that must have its tweens split

		 ]]></param>
<param><![CDATA[p_properties		Array		Array of strings containing the list of properties that must be separated

		 ]]></param>
<return><![CDATA[Number		The index number of the new tween

		 ]]></return>
</method>
<method name='startEngine' fullname='caurina.transitions:Tweener/private:startEngine' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Starts the Tweener class engine. It is supposed to be running every time a tween exists.

		 ]]></description>
</method>
<method name='stopEngine' fullname='caurina.transitions:Tweener/private:stopEngine' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Stops the Tweener class engine.

		 ]]></description>
</method>
<method name='updateFrame' fullname='caurina.transitions:Tweener/updateFrame' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Updates the current frame count

		 ]]></description>
</method>
<method name='updateTime' fullname='caurina.transitions:Tweener/updateTime' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Updates the time to enforce time grid-based updates.

		 ]]></description>
</method>
<method name='updateTweenByIndex' fullname='caurina.transitions:Tweener/private:updateTweenByIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='i' param_types='Number' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[

		 Updates a specific tween.

		 
		 ]]></description>
<param><![CDATA[i					Number		Index (from the tween list) of the tween that should be updated

		 ]]></param>
<return><![CDATA[Boolean		FALSE if it's already finished and should be deleted, TRUE if otherwise

		 ]]></return>
</method>
<method name='updateTweens' fullname='caurina.transitions:Tweener/private:updateTweens' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Updates all existing tweenings.

		 
		 ]]></description>
<return><![CDATA[Boolean		FALSE if no update was made because there's no tweening (even delayed ones)

		 ]]></return>
</method>
<field name='__tweener_controller__' fullname='caurina.transitions:Tweener/private:__tweener_controller__' type='flash.display:MovieClip' isStatic='true' isConst='false' >
</field>
<field name='_currentTimeFrame' fullname='caurina.transitions:Tweener/private:_currentTimeFrame' type='Number' isStatic='true' isConst='false' >
</field>
<field name='_currentTime' fullname='caurina.transitions:Tweener/private:_currentTime' type='Number' isStatic='true' isConst='false' >
</field>
<field name='_engineExists' fullname='caurina.transitions:Tweener/private:_engineExists' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
</field>
<field name='_inited' fullname='caurina.transitions:Tweener/private:_inited' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
</field>
<field name='_specialPropertyList' fullname='caurina.transitions:Tweener/private:_specialPropertyList' type='Object' isStatic='true' isConst='false' >
</field>
<field name='_specialPropertyModifierList' fullname='caurina.transitions:Tweener/private:_specialPropertyModifierList' type='Object' isStatic='true' isConst='false' >
</field>
<field name='_specialPropertySplitterList' fullname='caurina.transitions:Tweener/private:_specialPropertySplitterList' type='Object' isStatic='true' isConst='false' >
</field>
<field name='_timeScale' fullname='caurina.transitions:Tweener/private:_timeScale' type='Number' isStatic='true' isConst='false' defaultValue='1' >
</field>
<field name='_transitionList' fullname='caurina.transitions:Tweener/private:_transitionList' type='Object' isStatic='true' isConst='false' >
</field>
<field name='_tweenList' fullname='caurina.transitions:Tweener/private:_tweenList' type='Array' isStatic='true' isConst='false' >
</field>
<field name='autoOverwrite' fullname='caurina.transitions:Tweener/autoOverwrite' type='Boolean' isStatic='true' isConst='false' defaultValue='true' >
</field>
<classRec name='DialogPosition' fullname='qnx.dialog:DialogPosition' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\DialogPosition.as' namespace='qnx.dialog' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	  The DialogPosition class contains values that are used to define the

	 position of the dialog.

	 ]]></description>
</classRec>
<method name='DialogPosition' fullname='qnx.dialog:DialogPosition/DialogPosition' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates a DialogPosition instance.

		 ]]></description>
</method>
<field name='BOTTOM_CENTER' fullname='qnx.dialog:DialogPosition/BOTTOM_CENTER' type='String' isStatic='true' isConst='true' defaultValue='bottomCenter' >
<description><![CDATA[ A constant indicating the dialog position as bottom center. ]]></description>
</field>
<field name='MIDDLE_CENTER' fullname='qnx.dialog:DialogPosition/MIDDLE_CENTER' type='String' isStatic='true' isConst='true' defaultValue='middleCenter' >
<description><![CDATA[ A constant indicating the dialog position as middle center. ]]></description>
</field>
<field name='TOP_CENTER' fullname='qnx.dialog:DialogPosition/TOP_CENTER' type='String' isStatic='true' isConst='true' defaultValue='topCenter' >
<description><![CDATA[ A constant indicating the dialog position as top center. ]]></description>
</field>
<classRec name='DialogAlign' fullname='qnx.dialog:DialogAlign' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\DialogAlign.as' namespace='qnx.dialog' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  The <code>DialogAlign</code> class contains values that are used to define the vertical 
	 position of the dialog. The dialog is always centered horizontally.
	 ]]></description>
</classRec>
<method name='DialogAlign' fullname='qnx.dialog:DialogAlign/DialogAlign' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>DialogAlign</code> instance.
		 ]]></description>
</method>
<field name='BOTTOM' fullname='qnx.dialog:DialogAlign/BOTTOM' type='String' isStatic='true' isConst='true' defaultValue='bottomCenter' >
<description><![CDATA[ A constant indicating the dialog position as bottom center. ]]></description>
</field>
<field name='CENTER' fullname='qnx.dialog:DialogAlign/CENTER' type='String' isStatic='true' isConst='true' defaultValue='middleCenter' >
<description><![CDATA[ A constant indicating the dialog position as middle center. ]]></description>
</field>
<field name='TOP' fullname='qnx.dialog:DialogAlign/TOP' type='String' isStatic='true' isConst='true' defaultValue='topCenter' >
<description><![CDATA[ A constant indicating the dialog position as top center. ]]></description>
</field>
<classRec name='DialogSize' fullname='qnx.dialog:DialogSize' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\DialogSize.as' namespace='qnx.dialog' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	  The <code>DialogSize</code> class contains the values that are used to define the size of a dialog.

	 ]]></description>
</classRec>
<method name='DialogSize' fullname='qnx.dialog:DialogSize/DialogSize' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates a new <code>DialogSize</code> instance.

		 ]]></description>
</method>
<field name='SIZE_FULL' fullname='qnx.dialog:DialogSize/SIZE_FULL' type='String' isStatic='true' isConst='true' defaultValue='full' >
<description><![CDATA[ A constant indicating the size should be full, or it should fill the screen.]]></description>
</field>
<field name='SIZE_LARGE' fullname='qnx.dialog:DialogSize/SIZE_LARGE' type='String' isStatic='true' isConst='true' defaultValue='large' >
<description><![CDATA[ A constant indicating the large dialog size. ]]></description>
</field>
<field name='SIZE_MEDIUM' fullname='qnx.dialog:DialogSize/SIZE_MEDIUM' type='String' isStatic='true' isConst='true' defaultValue='medium' >
<description><![CDATA[ A constant indicating the medium dialog size.]]></description>
</field>
<field name='SIZE_SMALL' fullname='qnx.dialog:DialogSize/SIZE_SMALL' type='String' isStatic='true' isConst='true' defaultValue='small' >
<description><![CDATA[ A constant indicating the small dialog size.]]></description>
</field>
<field name='SIZE_TALL' fullname='qnx.dialog:DialogSize/SIZE_TALL' type='String' isStatic='true' isConst='true' defaultValue='tall' >
<description><![CDATA[ A constant indicating that the size should be tall, or that it should favour height over width.]]></description>
</field>
<classRec name='DialogButtonProperty' fullname='qnx.dialog:DialogButtonProperty' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\DialogButtonProperty.as' namespace='qnx.dialog' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>DialogButtonProperty</code> class contains dialog button properties. 
	 
	 <p>
	 The properties enable you to modify the appearance or behavior of a button. In the following 
	 listing, a dialog button is disabled by passing the <code>DialogButtonProperty.ENABLED</code> 
	 property value (and the value <code>false</code>) into the 
	 <code>setButtonPropertyAt</code> method: 
	 </p>
	 
	 <listing>
	    private function showAlertDialog():void
    	{
	 	  alert = new AlertDialog();
	      alert.title = "Meeting reminder";
	      alert.message = "The group benefits meeting in the Blue room is about to start.";
	      alert.addButton("Snooze");
		  alert.addButton("Cancel");
		  alert.addButton("Help");
		  alert.setButtonPropertyAt(DialogButtonProperty.ENABLED, false, 2);
		  alert.dialogSize= DialogSize.SIZE_SMALL;
	      alert.addEventListener(DialogEvent.DIALOG_BUTTON_CLICKED, dButtonClicked); 
	      alert.show(IowWindow.getAirWindow().group);
    	 }
	 </listing>
	 <p>
	 The code snippet above produces the following dialog:
	 </p>
	 <img src="../../images/button_out.gif"></img>
	  ]]></description>
<see><![CDATA[qnx.dialog.BaseDialog
	 ]]></see>
<see><![CDATA[qnx.dialog.BaseDialog#setButtonPropertyAt
	 ]]></see>
</classRec>
<method name='DialogButtonProperty' fullname='qnx.dialog:DialogButtonProperty/DialogButtonProperty' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
	 Creates a <code>DialogButtonProperty</code> instance.
	 ]]></description>
</method>
<field name='CONTEXT' fullname='qnx.dialog:DialogButtonProperty/CONTEXT' type='String' isStatic='true' isConst='true' defaultValue='context' >
<description><![CDATA[
		  A constant representing the button "context" property. 
		 ]]></description>
</field>
<field name='ENABLED' fullname='qnx.dialog:DialogButtonProperty/ENABLED' type='String' isStatic='true' isConst='true' defaultValue='enabled' >
<description><![CDATA[
		  A constant representing the button "enabled" property.
		 ]]></description>
</field>
<field name='LABEL' fullname='qnx.dialog:DialogButtonProperty/LABEL' type='String' isStatic='true' isConst='true' defaultValue='label' >
<description><![CDATA[
		  A constant representing the button "label" property.
		 ]]></description>
</field>
<field name='SKIN' fullname='qnx.dialog:DialogButtonProperty/SKIN' type='String' isStatic='true' isConst='true' defaultValue='skin' >
<description><![CDATA[
		  A constant representing the button "skin" property. 
		 ]]></description>
</field>
<field name='VISIBLE' fullname='qnx.dialog:DialogButtonProperty/VISIBLE' type='String' isStatic='true' isConst='true' defaultValue='visible' >
<description><![CDATA[
		  A constant representing the button "visible" property.
		 ]]></description>
</field>
<classRec name='DialogInterface' fullname='qnx.dialog:DialogInterface' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\DialogInterface.as' namespace='qnx.dialog' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>DialogInterface</code> class provides functionality

	 for the dialog client component.

	 ]]></description>
</classRec>
<method name='DialogInterface' fullname='qnx.dialog:DialogInterface/DialogInterface' isStatic='false' isFinal='false' isOverride='false'  param_names='server' param_types='Boolean' param_defaults='undefined' result_type='*'>
<description><![CDATA[

		 Constructs a new <code>DialogInterface</code> instance using the provided client descriptor.

		 ]]></description>
<param><![CDATA[server A <code>Boolean</code> that determines if the instance is a server. <em>true</em> for

		 a server, <em>false</em> for a client.

		 ]]></param>
</method>
<method name='buttonClicked' fullname='qnx.dialog:DialogInterface/buttonClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='msg;resp_obj' param_types='qnx.pps:Message;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 

		 

		 ]]></description>
<param><![CDATA[msg

		 ]]></param>
<param><![CDATA[resp_obj

		 ]]></param>
</method>
<method name='cancel' fullname='qnx.dialog:DialogInterface/cancel' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Cancels the dialog, given a dialog ID.

		 

		 ]]></description>
<param><![CDATA[id The ID of the dialog to cancel.

		 ]]></param>
</method>
<method name='channelEvent' fullname='qnx.dialog:DialogInterface/private:channelEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='close' fullname='qnx.dialog:DialogInterface/private:close' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Closes the connection.

		 ]]></description>
</method>
<method name='commandHandler' fullname='qnx.dialog:DialogInterface/private:commandHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='message;command' param_types='qnx.pps:Message;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dialogCB' fullname='qnx.dialog:DialogInterface/private:dialogCB' isStatic='false' isFinal='false' isOverride='false'  param_names='msg;cbData' param_types='qnx.pps:Message;String' param_defaults='undefined;null' result_type='Boolean'>
</method>
<method name='getInstance' fullname='qnx.dialog:DialogInterface/getInstance' isStatic='true' isFinal='false' isOverride='false'  param_names='server' param_types='Boolean' param_defaults='false' result_type='qnx.dialog:DialogInterface'>
<description><![CDATA[

		 Return a <code>DialogInterface</code> instance, given a client descriptor.

		 

		 ]]></description>
<param><![CDATA[server A <code>Boolean</code> that determines if the instance is a server. <em>true</em> for

		 a server, <em>false</em> for a client.

		 ]]></param>
<return><![CDATA[A <code>DialogInterface</code> instance.

		 ]]></return>
</method>
<method name='keyToPeer' fullname='qnx.dialog:DialogInterface/private:keyToPeer' isStatic='false' isFinal='false' isOverride='false'  param_names='peer' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onClose' fullname='qnx.dialog:DialogInterface/protected:onClose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onConnect' fullname='qnx.dialog:DialogInterface/protected:onConnect' isStatic='false' isFinal='false' isOverride='false'  param_names='clientId' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='onDisconnect' fullname='qnx.dialog:DialogInterface/protected:onDisconnect' isStatic='false' isFinal='false' isOverride='false'  param_names='clientId' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='onOpenFail' fullname='qnx.dialog:DialogInterface/private:onOpenFail' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onOpen' fullname='qnx.dialog:DialogInterface/protected:onOpen' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='open' fullname='qnx.dialog:DialogInterface/private:open' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Opens the connection (as the server or as a client).

		 ]]></description>
</method>
<method name='peerToKey' fullname='qnx.dialog:DialogInterface/private:peerToKey' isStatic='false' isFinal='false' isOverride='false'  param_names='peer' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sendCancel' fullname='qnx.dialog:DialogInterface/private:sendCancel' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='sendResponse' fullname='qnx.dialog:DialogInterface/private:sendResponse' isStatic='false' isFinal='false' isOverride='false'  param_names='msg' param_types='qnx.pps:Message' param_defaults='undefined' result_type='void'>
</method>
<method name='sendShow' fullname='qnx.dialog:DialogInterface/private:sendShow' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='String'>
</method>
<method name='sendUpdate' fullname='qnx.dialog:DialogInterface/private:sendUpdate' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='show' fullname='qnx.dialog:DialogInterface/show' isStatic='false' isFinal='false' isOverride='false'  param_names='dialog' param_types='*' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 Shows a dialog.

		 

		 ]]></description>
<param><![CDATA[dialog The dialog to show.

		 ]]></param>
<return><![CDATA[The ID of the dialog, or -1 if the dialog is a server.

		 ]]></return>
</method>
<method name='update' fullname='qnx.dialog:DialogInterface/update' isStatic='false' isFinal='false' isOverride='false'  param_names='dialog' param_types='*' param_defaults='undefined' result_type='void'>
</method>
<field name='CANCEL' fullname='qnx.dialog:DialogInterface/private:CANCEL' type='String' isStatic='true' isConst='true' defaultValue='cancel' >
</field>
<field name='SHOW' fullname='qnx.dialog:DialogInterface/private:SHOW' type='String' isStatic='true' isConst='true' defaultValue='show' >
</field>
<field name='UPDATE' fullname='qnx.dialog:DialogInterface/private:UPDATE' type='String' isStatic='true' isConst='true' defaultValue='update' >
</field>
<field name='allowInstantiation' fullname='qnx.dialog:DialogInterface/private:allowInstantiation' type='Boolean' isStatic='true' isConst='false' defaultValue='false' >
</field>
<field name='channel' fullname='qnx.dialog:DialogInterface/private:channel' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<field name='debugName' fullname='qnx.dialog:DialogInterface/private:debugName' type='String' isStatic='false' isConst='false' >
</field>
<field name='dialogs' fullname='qnx.dialog:DialogInterface/private:dialogs' type='Object' isStatic='false' isConst='false' >
</field>
<field name='instance' fullname='qnx.dialog:DialogInterface/private:instance' type='qnx.dialog:DialogInterface' isStatic='true' isConst='false' >
</field>
<field name='serverInstance' fullname='qnx.dialog:DialogInterface/private:serverInstance' type='qnx.dialog:DialogInterface' isStatic='true' isConst='false' >
</field>
<field name='serverPath' fullname='qnx.dialog:DialogInterface/private:serverPath' type='String' isStatic='true' isConst='true' defaultValue='/pps/services/dialog/control' >
</field>
<field name='server' fullname='qnx.dialog:DialogInterface/private:server' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='BaseDialog' fullname='qnx.dialog:BaseDialog' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\BaseDialog.as' namespace='qnx.dialog' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
<description><![CDATA[ 

	 The <code>BaseDialog</code> class is the base class for all dialogs in the system. It creates 

	 the background to stop clickthroughs, it provides the row of buttons, and contains the show/hide

	 functions and other methods that can be overriden by classes inheriting this

	 base class.

	 

	 

	 
	 ]]></description>
</classRec>
<method name='BaseDialog' fullname='qnx.dialog:BaseDialog/BaseDialog' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 
		 Constructor for the <code>AlertDialog</code> class.

		 

		 <p>This method initializes the description and response 

		 objects, and sets up the background for the dialog.

		 </p>

		 ]]></description>
</method>
<method name='addButton' fullname='qnx.dialog:BaseDialog/addButton' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[

		 Adds a button to the dialog.

		 

		 ]]></description>
<param><![CDATA[label The button label.  

		 ]]></param>
<returns><![CDATA[int The index number of the button.

		 ]]></returns>
</method>
<method name='cancel' fullname='qnx.dialog:BaseDialog/cancel' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Cancels or hides the dialog.

		 ]]></description>
</method>
<method name='getButtonPropertyAt' fullname='qnx.dialog:BaseDialog/getButtonPropertyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='prop;index' param_types='String;int' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[

		 Gets the value of a property, given the property name and property object index.

		 

		 ]]></description>
<param><![CDATA[prop The property <code>String</code> value.

		 ]]></param>
<param><![CDATA[index The index of the property object to inspect.

		 

		 ]]></param>
<see><![CDATA[qnx.dialog.DialogButtonProperty

		 ]]></see>
</method>
<method name='getItemAt' fullname='qnx.dialog:BaseDialog/getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[

		 Returns the button property object based on the index.

		 

		 ]]></description>
<param><![CDATA[index The index of the button object.

		 ]]></param>
<see><![CDATA[qnx.dialog.DialogButtonProperty

		 ]]></see>
<returns><![CDATA[A <code>DialogButtonProperty</code> object. 

		 

		 ]]></returns>
</method>
<method name='mergeDesc' fullname='qnx.dialog:BaseDialog/private:mergeDesc' isStatic='false' isFinal='false' isOverride='false'  param_names='dst;src' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='receiveResponse' fullname='qnx.dialog:BaseDialog/receiveResponse' isStatic='false' isFinal='false' isOverride='false'  param_names='resp_obj' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeButtonAt' fullname='qnx.dialog:BaseDialog/removeButtonAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Removes a button from the dialog, given an index.

		 

		 ]]></description>
<param><![CDATA[index The index of the button to remove.

		 ]]></param>
</method>
<method name='sendDescription' fullname='qnx.dialog:BaseDialog/sendDescription' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[

		 Gathers up and returns the description object for the dialog (client side).

		 ]]></description>
</method>
<method name='setButtonPropertyAt' fullname='qnx.dialog:BaseDialog/setButtonPropertyAt' isStatic='false' isFinal='false' isOverride='false'  param_names='prop;value;index' param_types='String;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[

		 Sets a button property given a property name, a property value, and the index of a button property object.

		 

		  ]]></description>
<param><![CDATA[prop The name of the property to set.

		 	]]></param>
<param><![CDATA[value The value of the property.

		 	]]></param>
<param><![CDATA[index The index of a button property object. 

		 

		 ]]></param>
<see><![CDATA[qnx.dialog.DialogButtonProperty

		 ]]></see>
</method>
<method name='show' fullname='qnx.dialog:BaseDialog/show' isStatic='false' isFinal='false' isOverride='false'  param_names='groupId' param_types='String' param_defaults='null' result_type='void'>
<description><![CDATA[

		 Shows the dialog as a system or application dialog.

		 

		 <p>

		 <b>Note:</b> If you're creating a dialog for your application, it's a good idea to pass in a

		 valid group ID:

		 

		 <listing>

		 alert.show(IowWindow.getAirWindow().group);

		 </listing>

		 This ensures that the dialog will be modal for only your application. In other words, your application

         can still be minimized when this dialog is active. If you're creating a system-level dialog, don't pass

		 in a group ID.

	     </p> 

		 

		 ]]></description>
<param><![CDATA[groupId The group ID of the app to attach the dialog to (null to be system dialog).

		 

		 

		 ]]></param>
</method>
<method name='update' fullname='qnx.dialog:BaseDialog/update' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Updates the dialog to reflect its current attributes.

		 ]]></description>
</method>
<method name='dialogHeight' fullname='qnx.dialog:BaseDialog/protected:dialogHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Gets the dialog height

		 

		 ]]></description>
<return><![CDATA[_dialogHeight The dialog height

		 ]]></return>
</method>
<method name='dialogSize' fullname='qnx.dialog:BaseDialog/dialogSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets the size of the dialog.

		 

		 ]]></description>
<return><![CDATA[A <code>String</code> containing the size of the dialog.

		 ]]></return>
<see><![CDATA[DialogSize

		 ]]></see>
</method>
<method name='dialogWidth' fullname='qnx.dialog:BaseDialog/protected:dialogWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Gets the dialog width.

		 

		 ]]></description>
<return><![CDATA[_dialogWidth An integer representing the width of the dialog.

		 ]]></return>
</method>
<method name='hideOnButtonClick' fullname='qnx.dialog:BaseDialog/hideOnButtonClick/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Gets or sets the a value that determines if the dialog will close 

		 when the user clicks a button.

		 <p>

		 Set to <em>true</em> if the dialog must be cancelled by the caller to be

		 removed from the screen. By default, dialogs are removed when

		 a button is pressed.

		 </p>

		 ]]></description>
</method>
<method name='selectedIndex' fullname='qnx.dialog:BaseDialog/selectedIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Returns the selected index of the button (that was clicked). 

		 ]]></description>
</method>
<method name='align' fullname='qnx.dialog:BaseDialog/align/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_position' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the position of the dialog.

		 

		 

		 ]]></description>
<see><![CDATA[DialogAlign

		 ]]></see>
</method>
<method name='dialogSize' fullname='qnx.dialog:BaseDialog/dialogSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_size' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the size of the dialog.

		 

		 ]]></description>
<param><![CDATA[_size The size to set for the dialog.

		 ]]></param>
<see><![CDATA[DialogSize

		 ]]></see>
</method>
<method name='hideOnButtonClick' fullname='qnx.dialog:BaseDialog/hideOnButtonClick/set' isStatic='false' isFinal='false' isOverride='false'  param_names='cr' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Gets or sets the a value that determines if the dialog will close 

		 

		 Set to <em>true</em> if the dialog must be cancelled by the caller to be

		 removed from the screen. By default, dialogs are removed when

		 a button is pressed.

		 ]]></description>
</method>
<method name='modalAlpha' fullname='qnx.dialog:BaseDialog/modalAlpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_alpha' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the background alpha value.

		 

		 ]]></description>
<param><![CDATA[_alpha The alpha to set for the background.

		 ]]></param>
</method>
<method name='titleHtml' fullname='qnx.dialog:BaseDialog/titleHtml/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the html text for the dialog's title.

		 

		 <p>

		 The <code>titleHtml</code> function improves the look and feel of your dialogs by providing HTML formatting to text elements. In the 

		 following listing, the title text of a dialog is centered using an HTML paragraph tag, and styled using the italic and bold tags.

		 </p>

		 <listing version="3.0">

		 var dialog:AlertDialog = new AlertDialog();

		 dlaoig.titleHtml = "&lt;p align='center'&gt;&lt;b&gt;&lt;i&gt;My HTML formatted title&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;";

		 </listing>

		 ]]></description>
</method>
<method name='title' fullname='qnx.dialog:BaseDialog/title/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the text for the dialog's title.

		 ]]></description>
</method>
<field name='_dialogHeight' fullname='qnx.dialog:BaseDialog/private:_dialogHeight' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_dialogWidth' fullname='qnx.dialog:BaseDialog/private:_dialogWidth' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_selectedIndex' fullname='qnx.dialog:BaseDialog/private:_selectedIndex' type='int' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='clientId' fullname='qnx.dialog:BaseDialog/clientId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ 

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='desc_obj' fullname='qnx.dialog:BaseDialog/protected:desc_obj' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<protected><![CDATA[
		 

		 The internal description object used for saving the dialog details.

		 ]]></protected>
</field>
<field name='groupId' fullname='qnx.dialog:BaseDialog/groupId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='id' fullname='qnx.dialog:BaseDialog/id' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<public><![CDATA[
		 

		 The ID of the dialog, where each ID is unique to the client owner.

		 ]]></public>
</field>
<field name='resp_obj' fullname='qnx.dialog:BaseDialog/protected:resp_obj' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<protected><![CDATA[
		 

		 The internal response object used for saving dialog responses.

		 ]]></protected>
</field>
<classRec name='AlertDialog' fullname='qnx.dialog:AlertDialog' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\AlertDialog.as' namespace='qnx.dialog' access='public' baseclass='qnx.dialog:BaseDialog' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>AlertDialog</code> class encapsulates the properties of

	 an alert dialog, which is used to display system alerts to the user.

	 	

	 

	 <p>

	 An alert dialog can be tailored to meet your needs. The following listing shows an alert dialog, called 

	 <code>alert</code>, that displays a message along with <code>OK</code> and <code>CANCEL</code> buttons. 

	 It traces the result of a button press including the button location and text on the button:

	 </p>

	 

	 <listing version="3.0">

	 private function showAlertDialog():void

     {

		alert = new AlertDialog();

		alert.title = "Warning";

		alert.message = "This operation may harm your computer. Do you still want to proceed?";

		alert.addButton("OK");

		alert.addButton("CANCEL");

		alert.dialogSize= DialogSize.SIZE_MEDIUM;

		alert.addEventListener(DialogEvent.DIALOG_BUTTON_CLICKED, alertButtonClicked); 

		alert.show(IowWindow.getAirWindow().group);

	 }

	 

	 private function alertButtonClicked(event:Event):void

	 {

	  	trace("Button Clicked Index: " + event.target.selectedIndex);

	      trace("Button properties Object"+event.target.getItemAt(event.target.selectedIndex);

	 }

	 </listing>

	 <p>

	 The code snippet above produces the following dialog:

	 </p>

	 <img src="../../images/alert.gif"></img>

	 

	 <p>The <code>AlertDialog</code> class extends the <code>BaseDialog</code> class.</p>

	 ]]></description>
<see><![CDATA[qnx.dialog.BaseDialog

	 

	 ]]></see>
</classRec>
<method name='AlertDialog' fullname='qnx.dialog:AlertDialog/AlertDialog' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Constructor for the <code>AlertDialog</code> class.

		 ]]></description>
</method>
<method name='messageHtml' fullname='qnx.dialog:AlertDialog/messageHtml/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the message <code>TextField</code>'s html value.

		 

		 <p>

		 In addition to providing HTML formatting to message text, the <code>messageHtml</code> method can be used to place 

		 images from the web within the message body of a dialog. In the following listing, an external image is placed in the

		 body of a dialog and scaled using the width and height attributes.

		 </p>

		 <listing version="3.0">

		 var dialog:AlertDialog = new AlertDialog();

		 dialog.messageHtml = "&lt;img src='http://www.somewebsite.com/somegraphic.jpg' width='500' height='350'/&gt;";

		 </listing>

		 ]]></description>
</method>
<method name='message' fullname='qnx.dialog:AlertDialog/message/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the value of the message field.

		 ]]></description>
</method>
<classRec name='PopupList' fullname='qnx.dialog:PopupList' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\PopupList.as' namespace='qnx.dialog' access='public' baseclass='qnx.dialog:BaseDialog' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>PopupList</code> class encapsulates the properties of

	 a dropdown or popup list class, which is used to

	 display lists to and allow selection updates by the user.

	 <p>

	 The following listing shows a dialog with a <code>PopupList</code>. The dialog

	 allows a user to select a wireless network SSID from a group of available networks:

	 <listing>

	  private function showPopup():void

	  {

		popUp = new PopupList();

		popUp.title = "Wireless Networks";

		popUp.items = ['Home', 'Work', 'Cottage', 'School'];

		popUp.addButton("OK");

		popUp.addButton("Cancel");

		popUp.dialogSize= DialogSize.SIZE_MEDIUM;

		popUp.addEventListener(DialogEvent.DIALOG_BUTTON_CLICKED, dButtonClicked); 

		popUp.show(IowWindow.getAirWindow().group);			

	  } 

	 </listing>

	 </p>

	 <p>

	 The code snippet above produces the following dialog:

	 </p>

	 <img src="../../images/popup.gif"></img>

	 <p>

	 You can use the <code>selectedIndices</code> method to specify an array of indices. The indices will 

	 appear as selected when the dialog is loaded. The <code>multiSelect</code> property enables the user to

	 select multiple list items at once.

	 </p>

	 

	 <p>

	 <b>Note:</b> In the last line of the code snippet above, the window group ID is passed

	 into the <code>show</code> method:

	 

	 <listing>

	 .show(IowWindow.getAirWindow().group);

	 </listing>

	 This ensures that the dialog will be modal for only this application. In other words, the application

	 can still be minimized when this dialog is active.  

	 

	 </p>

	 

	 ]]></description>
</classRec>
<method name='PopupList' fullname='qnx.dialog:PopupList/PopupList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Constructor for the <code>PopupList</code> class.

		 ]]></description>
</method>
<method name='selectedIndices' fullname='qnx.dialog:PopupList/selectedIndices/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 Gets or sets the selected item index array.

		 

		 ]]></description>
<param><![CDATA[_selected An array of selected list items.

		 ]]></param>
</method>
<method name='items' fullname='qnx.dialog:PopupList/items/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_items' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the list item array.

		 

		 ]]></description>
<param><![CDATA[An array of list items.

		 ]]></param>
</method>
<method name='multiSelect' fullname='qnx.dialog:PopupList/multiSelect/set' isStatic='false' isFinal='false' isOverride='false'  param_names='multi' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets a <code>Boolean</code> that allows multiple item selection in the list.

		 

		 ]]></description>
<param><![CDATA[multi Set to <em>true</em> to allow multi-select, otherwise <em>false</em>.

		 ]]></param>
</method>
<method name='selectedIndices' fullname='qnx.dialog:PopupList/selectedIndices/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_selected' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the selected item index array.

		 

		 ]]></description>
<param><![CDATA[_selected An array of selected list items.

		 ]]></param>
</method>
<classRec name='LoginDialog' fullname='qnx.dialog:LoginDialog' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\LoginDialog.as' namespace='qnx.dialog' access='public' baseclass='qnx.dialog:AlertDialog' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>LoginDialog</code> class encapsulates the properties of

	 a login dialog. The login dialog is used to provide password and identification

	 functionality for the device.

	 

	 <p>

	 The following code listing sets up a login dialog with two buttons, a title, and a message:

	 </p>

	 <listing>

	    private function showLoginDialog():void

		{

			login = new LoginDialog();

			login.title = "Device is locked";

			login.message = "Please enter your username and password:";

			login.addButton("OK");

			login.addButton("Cancel");			

			login.passwordPrompt = "password";

			login.rememberMeLabel = 'Remember me';

			login.rememberMe = true;

			login.dialogSize= DialogSize.SIZE_SMALL;

			login.addEventListener(DialogEvent.DIALOG_BUTTON_CLICKED, dButtonClicked); 

			login.show(IowWindow.getAirWindow().group);

		}

		</listing>

	 

	 <p>The code above produces the following dialog:

	 

	 </p>

	 <img src="../../images/login.gif"></img>

     <p>

	 <p>

	 The <code>passwordPrompt</code> and <code>usernamePrompt</code> properties allow you to add placeholder

	 text to the password and username fields. A user can click the <code>rememberMe</code> checkbox to store	 

	 user login information.

	 

	 

	 </p>

	 <b>Note:</b> In the last line of the code snippet above, the window group ID is passed

	 into the <code>show</code> method:

	 

	 <listing>

	 .show(IowWindow.getAirWindow().group);

	 </listing>

	 This ensures that the dialog will be modal for only this application. In other words, the application

	 can still be minimized when this dialog is active.  

	 

	 </p> 

	 <p>

	 The LoginDialog class extends the <code>AlertDialog</code> class. 

	 </p>

	 ]]></description>
<see><![CDATA[qnx.dialog.AlertDialog

	 

	 ]]></see>
</classRec>
<method name='LoginDialog' fullname='qnx.dialog:LoginDialog/LoginDialog' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Constructor for the <code>LoginDialog</code> class.

		 ]]></description>
</method>
<method name='password' fullname='qnx.dialog:LoginDialog/password/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the password entered by the user.

		 

		 ]]></description>
<return><![CDATA[A String representing the password.

		 ]]></return>
</method>
<method name='rememberMe' fullname='qnx.dialog:LoginDialog/rememberMe/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Gets or sets a value that determines the user's preference for remembering login credentials.

		 

		 ]]></description>
<return><![CDATA[A <code>Boolean</code> indicating the preference.

		 ]]></return>
</method>
<method name='username' fullname='qnx.dialog:LoginDialog/username/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Returns the username entered by the user.

		 

		 ]]></description>
<return><![CDATA[A <code>String</code> representing the username.

		 ]]></return>
</method>
<method name='passwordLabel' fullname='qnx.dialog:LoginDialog/passwordLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the password label for the dialog. If null, the password field is not shown.

		 ]]></description>
</method>
<method name='passwordPrompt' fullname='qnx.dialog:LoginDialog/passwordPrompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the password placeholder text for the user.

		 ]]></description>
</method>
<method name='password' fullname='qnx.dialog:LoginDialog/password/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the default password for the user.

		 ]]></description>
</method>
<method name='rememberMeLabel' fullname='qnx.dialog:LoginDialog/rememberMeLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the remember me label for the dialog checkbox. If null, the remember me check-box is not shown.

		 ]]></description>
</method>
<method name='rememberMe' fullname='qnx.dialog:LoginDialog/rememberMe/set' isStatic='false' isFinal='false' isOverride='false'  param_names='remember' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the default preference for remembering the user's credentials.

		 ]]></description>
</method>
<method name='usernameLabel' fullname='qnx.dialog:LoginDialog/usernameLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the user name label for the dialog. If null, the user name field is not shown.

		 ]]></description>
</method>
<method name='usernamePrompt' fullname='qnx.dialog:LoginDialog/usernamePrompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the user name placeholder text for the dialog.

		 ]]></description>
</method>
<method name='username' fullname='qnx.dialog:LoginDialog/username/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the default username for the user.

		 ]]></description>
</method>
<field name='passwordContainer' fullname='qnx.dialog:LoginDialog/protected:passwordContainer' type='qnx.ui.core:Container' isStatic='false' isConst='false' >
</field>
<field name='passwordLabel_txt' fullname='qnx.dialog:LoginDialog/private:passwordLabel_txt' type='qnx.ui.text:Label' isStatic='false' isConst='false' >
</field>
<field name='password_txt' fullname='qnx.dialog:LoginDialog/protected:password_txt' type='qnx.ui.text:TextInput' isStatic='false' isConst='false' >
</field>
<field name='rememberMeContainer' fullname='qnx.dialog:LoginDialog/private:rememberMeContainer' type='qnx.ui.core:Container' isStatic='false' isConst='false' >
</field>
<field name='rememberMeLabel_txt' fullname='qnx.dialog:LoginDialog/private:rememberMeLabel_txt' type='qnx.ui.text:Label' isStatic='false' isConst='false' >
</field>
<field name='rememberMe_check' fullname='qnx.dialog:LoginDialog/private:rememberMe_check' type='qnx.ui.buttons:CheckBox' isStatic='false' isConst='false' >
</field>
<field name='usernameContainer' fullname='qnx.dialog:LoginDialog/protected:usernameContainer' type='qnx.ui.core:Container' isStatic='false' isConst='false' >
</field>
<field name='usernameLabel_txt' fullname='qnx.dialog:LoginDialog/private:usernameLabel_txt' type='qnx.ui.text:Label' isStatic='false' isConst='false' >
</field>
<field name='username_txt' fullname='qnx.dialog:LoginDialog/protected:username_txt' type='qnx.ui.text:TextInput' isStatic='false' isConst='false' >
</field>
<classRec name='PromptDialog' fullname='qnx.dialog:PromptDialog' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\PromptDialog.as' namespace='qnx.dialog' access='public' baseclass='qnx.dialog:AlertDialog' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>PromptDialog</code> class encapsulates the properties of

	 a prompt dialog. The prompt dialog is used to prompt the user to complete an action.

	 

	 <p>

	 The following code listing sets up a small prompt dialog with two buttons, a title, and a message:

	 </p>

	 <listing version="3.0">

	    private function showPromptDialog():void

		{

			prompt = new PromptDialog();

			prompt.title = "WEP Key";

			prompt.message = "Please enter your 14 digit encryption key:";

			prompt.addButton("OK");

			prompt.addButton("Cancel");

			prompt.dialogSize= DialogSize.SIZE_SMALL;

			prompt.addEventListener(DialogEvent.DIALOG_BUTTON_CLICKED, dButtonClicked); 

			prompt.show(IowWindow.getAirWindow().group);

		}

	 </listing>

	 

	 <p>

	 The code snippet above produces the following dialog:

	 </p>

	 <img src="../../images/prompt.gif"></img>

	 

	 <p>

	 <b>Note:</b> In the last line of the code snippet above, the window group ID is passed

	 into the <code>show</code> method:

	 

	 <listing>

	 .show(IowWindow.getAirWindow().group);

	 </listing>

	 This ensures that the dialog will be modal for only this application. In other words, the application

	 can still be minimized when this dialog is active.  

	 

	 </p>

	 <p>

	 The <code>PromptDialog</code> class extends the <code>AlertDialog</code> class. 

	 </p>

	 ]]></description>
<see><![CDATA[qnx.dialog.AlertDialog

	 

	 ]]></see>
</classRec>
<method name='PromptDialog' fullname='qnx.dialog:PromptDialog/PromptDialog' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates a <code>PromptDialog</code> instance.

		 ]]></description>
</method>
<method name='text' fullname='qnx.dialog:PromptDialog/text/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets the value of the input <code>TextField</code>.

		 

		 ]]></description>
<param><![CDATA[text The text to set on the input field.

		 ]]></param>
</method>
<method name='prompt' fullname='qnx.dialog:PromptDialog/prompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Sets the value of the input placeholder text.

		 

		 ]]></description>
<param><![CDATA[text The placeholder text to set on the input field

		 ]]></param>
</method>
<method name='text' fullname='qnx.dialog:PromptDialog/text/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_text' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='inputField_txt' fullname='qnx.dialog:PromptDialog/protected:inputField_txt' type='qnx.ui.text:TextInput' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<protected><![CDATA[
		 

		 The inputField text input field.

		 ]]></protected>
</field>
<classRec name='PasswordChangeDialog' fullname='qnx.dialog:PasswordChangeDialog' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\dialog\PasswordChangeDialog.as' namespace='qnx.dialog' access='public' baseclass='qnx.dialog:LoginDialog' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>PasswordChangeDialog</code> class encapsulates the properties of a
	 password set/change dialog. The password change dialog is used to provide
	 password modification functionality for the device.  The user name field
	 is optional to support use cases in which the user name is implicit or
	 there is no user name (e.g., device password).
	 
	 <p>
	 The following code listing sets up a password change dialog with two buttons, a title, and a message:
	 </p>
	 <listing version="3.0">
		private function showPwDialog():void
		{
			pw = new PasswordChangeDialog();
			pw.title = "Password change";
			pw.message = "Please enter your new password:";
			pw.addButton("OK");
			pw.addButton("Cancel");
			pw.dialogSize= DialogSize.SIZE_MEDIUM;
			pw.addEventListener(DialogEvent.DIALOG_BUTTON_CLICKED, dButtonClicked); 
			pw.show(IowWindow.getAirWindow().group);
		}
	 </listing>
	 
	 <p>
	 The code snippet above produces the following dialog:
	 </p>
	 <img src="../../images/pw.gif"></img>
	 
	 <p>
	 <b>Note:</b> In the last line of the code snippet above, the window group ID is passed
	 into the <code>show</code> method:
	 
	 <listing>
	 .show(IowWindow.getAirWindow().group);
	 </listing>
	 This ensures that the dialog will be modal for only this application. In other words, the application
	 can still be minimized when this dialog is active.  
	 
	 </p>
	 <p>
	 The <code>PasswordChangeDialog</code> class extends the <code>LoginDialog</code> class. 
	 </p>
	 ]]></description>
<see><![CDATA[qnx.dialog.LoginDialog
	 
	 ]]></see>
</classRec>
<method name='PasswordChangeDialog' fullname='qnx.dialog:PasswordChangeDialog/PasswordChangeDialog' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Constructor for the <code>PasswordChangeDialog</code> class.
		 ]]></description>
</method>
<method name='confirmation' fullname='qnx.dialog:PasswordChangeDialog/confirmation/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the new password confirmation entered by the user.
		 
		 ]]></description>
<return><![CDATA[A <code>String</code> representing the new password confirmation.
		 ]]></return>
</method>
<method name='newPassword' fullname='qnx.dialog:PasswordChangeDialog/newPassword/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the new password entered by the user.
		 
		 ]]></description>
<return><![CDATA[A <code>String</code> representing the new password.
		 ]]></return>
</method>
<method name='confirmationLabel' fullname='qnx.dialog:PasswordChangeDialog/confirmationLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the confirmation label for the dialog. 
		 
		 <p>
		 If null, a default label is
		 used since the confirmation field is not optional.
		 </p>
		 ]]></description>
<param><![CDATA[label The confirmation field label.
		 ]]></param>
</method>
<method name='confirmationPrompt' fullname='qnx.dialog:PasswordChangeDialog/confirmationPrompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the confirmation placeholder text for the user.
		 
		 ]]></description>
<param><![CDATA[text The confirmation text.
		 ]]></param>
</method>
<method name='newPasswordLabel' fullname='qnx.dialog:PasswordChangeDialog/newPasswordLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the new password label for the dialog. 
		 <p>
		 If null, a default label is
		 used since the new password field is not optional.
		 </p>
		 ]]></description>
</method>
<method name='newPasswordPrompt' fullname='qnx.dialog:PasswordChangeDialog/newPasswordPrompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the new password placeholder text for the user.
		 
		 ]]></description>
<param><![CDATA[text The password placeholder text.
		 ]]></param>
</method>
<classRec name='SkinAssets' fullname='qnx.ui.skins:SkinAssets' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\SkinAssets.as' namespace='qnx.ui.skins' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This class contains references to embedded graphic assets which are used by the component skins
	 for both the light and dark themes.
	 
	 ]]></description>
<see><![CDATA[UISkin
	 ]]></see>
<see><![CDATA[SkinStates
	 ]]></see>
</classRec>
<field name='CellRendererDisabledBlack' fullname='qnx.ui.skins:SkinAssets/CellRendererDisabledBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled state of the cell renderer for the dark theme.
		 ]]></description>
</field>
<field name='CellRendererDisabledWhite' fullname='qnx.ui.skins:SkinAssets/CellRendererDisabledWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled state of the cell renderer for the light theme.
		 ]]></description>
</field>
<field name='CellRendererSelected' fullname='qnx.ui.skins:SkinAssets/CellRendererSelected' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected state of the cell renderer for the dark and light theme.
		 ]]></description>
</field>
<field name='CellRendererUpBlack' fullname='qnx.ui.skins:SkinAssets/CellRendererUpBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the cell renderer for the dark theme.
		 ]]></description>
</field>
<field name='CellRendererUpOddBlack' fullname='qnx.ui.skins:SkinAssets/CellRendererUpOddBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the cell renderer if its an odd number for alternating cells for the dark theme.
		 ]]></description>
</field>
<field name='CellRendererUpOddWhite' fullname='qnx.ui.skins:SkinAssets/CellRendererUpOddWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the cell renderer if its an odd number for alternating cells for the light theme.
		 ]]></description>
</field>
<field name='CellRendererUpWhite' fullname='qnx.ui.skins:SkinAssets/CellRendererUpWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the cell renderer for the light theme.
		 ]]></description>
</field>
<field name='CheckBoxDisabledBlack' fullname='qnx.ui.skins:SkinAssets/CheckBoxDisabledBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled state of the checkbox for the dark theme.
		 ]]></description>
</field>
<field name='CheckBoxDisabledSelectedBlack' fullname='qnx.ui.skins:SkinAssets/CheckBoxDisabledSelectedBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected and disabled state of the checkbox for the dark theme.
		 ]]></description>
</field>
<field name='CheckBoxDisabledSelectedWhite' fullname='qnx.ui.skins:SkinAssets/CheckBoxDisabledSelectedWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for a disabled and selected state of the checkbox for the light theme.
		 ]]></description>
</field>
<field name='CheckBoxDisabledWhite' fullname='qnx.ui.skins:SkinAssets/CheckBoxDisabledWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled state of the checkbox for the light theme.
		 ]]></description>
</field>
<field name='CheckBoxDownSelected' fullname='qnx.ui.skins:SkinAssets/CheckBoxDownSelected' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the down state of the checkbox for both the light and the dark theme.
		 ]]></description>
</field>
<field name='CheckBoxDown' fullname='qnx.ui.skins:SkinAssets/CheckBoxDown' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the down state of the checkbox for the light theme.
		 ]]></description>
</field>
<field name='CheckBoxSelectedBlack' fullname='qnx.ui.skins:SkinAssets/CheckBoxSelectedBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected state of the checkbox for the light theme.
		 ]]></description>
</field>
<field name='CheckBoxSelectedWhite' fullname='qnx.ui.skins:SkinAssets/CheckBoxSelectedWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected state of the checkbox for the light theme.
		 ]]></description>
</field>
<field name='CheckBoxUpBlack' fullname='qnx.ui.skins:SkinAssets/CheckBoxUpBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the checkbox for the dark theme.
		 ]]></description>
</field>
<field name='CheckBoxUpWhite' fullname='qnx.ui.skins:SkinAssets/CheckBoxUpWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the checkbox for the light theme.
		 ]]></description>
</field>
<field name='DropDownBackgroundBlack' fullname='qnx.ui.skins:SkinAssets/DropDownBackgroundBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the drop down list background for the dark theme.
		 ]]></description>
</field>
<field name='DropDownBackgroundWhite' fullname='qnx.ui.skins:SkinAssets/DropDownBackgroundWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the drop down list background for the light theme.
		 ]]></description>
</field>
<field name='DropDownDisabledBlack' fullname='qnx.ui.skins:SkinAssets/DropDownDisabledBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled drop down button for the dark theme.
		 ]]></description>
</field>
<field name='DropDownDisabledWhite' fullname='qnx.ui.skins:SkinAssets/DropDownDisabledWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled drop down button for the light theme.
		 ]]></description>
</field>
<field name='DropDownUpBlack' fullname='qnx.ui.skins:SkinAssets/DropDownUpBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up drop down button for the dark theme.
		 ]]></description>
</field>
<field name='DropDownUpSelectedBlack' fullname='qnx.ui.skins:SkinAssets/DropDownUpSelectedBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected drop down button for the dark theme.
		 ]]></description>
</field>
<field name='DropDownUpSelectedWhite' fullname='qnx.ui.skins:SkinAssets/DropDownUpSelectedWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected drop down button for the light theme.
		 ]]></description>
</field>
<field name='DropDownUpWhite' fullname='qnx.ui.skins:SkinAssets/DropDownUpWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up drop down button for the light theme.
		 ]]></description>
</field>
<field name='PickerLineBlack' fullname='qnx.ui.skins:SkinAssets/PickerLineBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show a line in the picker in the dark theme.
		 ]]></description>
</field>
<field name='PickerLineWhite' fullname='qnx.ui.skins:SkinAssets/PickerLineWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show a line in the picker in the light theme.
		 ]]></description>
</field>
<field name='PickerListBackgroundBlack' fullname='qnx.ui.skins:SkinAssets/PickerListBackgroundBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show a background in the picker in the dark theme.
		 ]]></description>
</field>
<field name='PickerListBackgroundWhite' fullname='qnx.ui.skins:SkinAssets/PickerListBackgroundWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show a background in the picker in the light theme.
		 ]]></description>
</field>
<field name='RoundedButtonDisabledBlack' fullname='qnx.ui.skins:SkinAssets/RoundedButtonDisabledBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled state of the button for the dark theme.
		 ]]></description>
</field>
<field name='RoundedButtonDisabledWhite' fullname='qnx.ui.skins:SkinAssets/RoundedButtonDisabledWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the disabled state of the button for the light theme.
		 ]]></description>
</field>
<field name='RoundedButtonSelected' fullname='qnx.ui.skins:SkinAssets/RoundedButtonSelected' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected state of the button for the dark and light theme.
		 ]]></description>
</field>
<field name='RoundedButtonUpBlack' fullname='qnx.ui.skins:SkinAssets/RoundedButtonUpBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the button for the dark theme.
		 ]]></description>
</field>
<field name='RoundedButtonUpWhite' fullname='qnx.ui.skins:SkinAssets/RoundedButtonUpWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the up state of the button for the light theme.
		 ]]></description>
</field>
<field name='SectionListHeaderBlack' fullname='qnx.ui.skins:SkinAssets/SectionListHeaderBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selection list header for the dark theme.
		 ]]></description>
</field>
<field name='SectionListHeaderWhite' fullname='qnx.ui.skins:SkinAssets/SectionListHeaderWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selection list header for the light theme.
		 ]]></description>
</field>
<field name='SliderThumbDisabled' fullname='qnx.ui.skins:SkinAssets/SliderThumbDisabled' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the slider track thumb in the disabled state.
		 ]]></description>
</field>
<field name='SliderThumbSelectedGlow' fullname='qnx.ui.skins:SkinAssets/SliderThumbSelectedGlow' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image currently not used.
		 ]]></description>
</field>
<field name='SliderThumbUp' fullname='qnx.ui.skins:SkinAssets/SliderThumbUp' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the slider track thumb in the up state.
		 ]]></description>
</field>
<field name='SliderTrackBackground' fullname='qnx.ui.skins:SkinAssets/SliderTrackBackground' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the slider track background.
		 ]]></description>
</field>
<field name='SliderTrackFillDisabled' fullname='qnx.ui.skins:SkinAssets/SliderTrackFillDisabled' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the slider track fill in the disabled state.
		 ]]></description>
</field>
<field name='SliderTrackFillUp' fullname='qnx.ui.skins:SkinAssets/SliderTrackFillUp' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the slider track fill in the up state.
		 ]]></description>
</field>
<field name='TextInputClearIcon' fullname='qnx.ui.skins:SkinAssets/TextInputClearIcon' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the clear text icon in the text input.
		 ]]></description>
</field>
<field name='TextInputDown' fullname='qnx.ui.skins:SkinAssets/TextInputDown' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the text input background in the down state.
		 ]]></description>
</field>
<field name='TextInputFocus' fullname='qnx.ui.skins:SkinAssets/TextInputFocus' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the text input background in the focused state.
		 ]]></description>
</field>
<field name='TextInputUp' fullname='qnx.ui.skins:SkinAssets/TextInputUp' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the text input background in the up state.
		 ]]></description>
</field>
<field name='ToggleSwitchTrackBlack' fullname='qnx.ui.skins:SkinAssets/ToggleSwitchTrackBlack' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the toggle switch track for the dark theme.
		 ]]></description>
</field>
<field name='ToggleSwitchTrackSelected' fullname='qnx.ui.skins:SkinAssets/ToggleSwitchTrackSelected' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the selected fill of the toggle switch.
		 ]]></description>
</field>
<field name='ToggleSwitchTrackWhite' fullname='qnx.ui.skins:SkinAssets/ToggleSwitchTrackWhite' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used for the toggle switch track for the light theme.
		 ]]></description>
</field>
<field name='VolumeIconDisabled0' fullname='qnx.ui.skins:SkinAssets/VolumeIconDisabled0' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the disabled state.
		 ]]></description>
</field>
<field name='VolumeIconDisabled1' fullname='qnx.ui.skins:SkinAssets/VolumeIconDisabled1' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the disabled state.
		 ]]></description>
</field>
<field name='VolumeIconDisabled2' fullname='qnx.ui.skins:SkinAssets/VolumeIconDisabled2' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the disabled state.
		 ]]></description>
</field>
<field name='VolumeIconDisabled3' fullname='qnx.ui.skins:SkinAssets/VolumeIconDisabled3' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the disabled state.
		 ]]></description>
</field>
<field name='VolumeIconUp0' fullname='qnx.ui.skins:SkinAssets/VolumeIconUp0' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the up state.
		 ]]></description>
</field>
<field name='VolumeIconUp1' fullname='qnx.ui.skins:SkinAssets/VolumeIconUp1' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the up state.
		 ]]></description>
</field>
<field name='VolumeIconUp2' fullname='qnx.ui.skins:SkinAssets/VolumeIconUp2' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the up state.
		 ]]></description>
</field>
<field name='VolumeIconUp3' fullname='qnx.ui.skins:SkinAssets/VolumeIconUp3' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show volume level in the volume thumb in the up state.
		 ]]></description>
</field>
<field name='VolumeTrackBackground' fullname='qnx.ui.skins:SkinAssets/VolumeTrackBackground' type='Class' isStatic='true' isConst='false' >
<description><![CDATA[
		 Image used to show the volume track background.
		 ]]></description>
</field>
<classRec name='SkinStates' fullname='qnx.ui.skins:SkinStates' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\SkinStates.as' namespace='qnx.ui.skins' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>SkinStates</code> class defines the skin states that are referenced by the skin classes.
	 
	 <p>
	 For an overview of skins and skin assets, including an example of how to create your own custom skins, 
	 see <a href="package-detail.html">Understanding skins</a>. 
	 </p>
	 ]]></description>
<see><![CDATA[qnx.ui.skins.UISkin
	 ]]></see>
</classRec>
<field name='DISABLED_SELECTED' fullname='qnx.ui.skins:SkinStates/DISABLED_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='disabled_selected' >
<description><![CDATA[ A <code>String</code> which represents the DISABLED_SELECTED state of the skin ]]></description>
</field>
<field name='DISABLED' fullname='qnx.ui.skins:SkinStates/DISABLED' type='String' isStatic='true' isConst='true' defaultValue='disabled' >
<description><![CDATA[ A <code>String</code> which represents the DISABLED state of the skin ]]></description>
</field>
<field name='DOWN_SELECTED' fullname='qnx.ui.skins:SkinStates/DOWN_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='down_selected' >
<description><![CDATA[ A <code>String</code> which represents the DOWN state of the skin when it is selected]]></description>
</field>
<field name='DOWN' fullname='qnx.ui.skins:SkinStates/DOWN' type='String' isStatic='true' isConst='true' defaultValue='down' >
<description><![CDATA[ A <code>String</code> which represents the DOWN state of the skin ]]></description>
</field>
<field name='FOCUS' fullname='qnx.ui.skins:SkinStates/FOCUS' type='String' isStatic='true' isConst='true' defaultValue='focus' >
<description><![CDATA[ A <code>String</code> which represents the FOCUS state of the skin ]]></description>
</field>
<field name='SELECTED' fullname='qnx.ui.skins:SkinStates/SELECTED' type='String' isStatic='true' isConst='true' defaultValue='selected' >
<description><![CDATA[ A <code>String</code> which represents the SELECTED state of the skin ]]></description>
</field>
<field name='UP_ODD' fullname='qnx.ui.skins:SkinStates/UP_ODD' type='String' isStatic='true' isConst='true' defaultValue='up_odd' >
<description><![CDATA[ A <code>String</code> which represents the UP state of a list item at an odd numbered index ]]></description>
</field>
<field name='UP' fullname='qnx.ui.skins:SkinStates/UP' type='String' isStatic='true' isConst='true' defaultValue='up' >
<description><![CDATA[ A <code>String</code> which represents the UP state of the skin ]]></description>
</field>
<interfaceRec name='ISkin' fullname='qnx.ui.skins:ISkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\ISkin.as' namespace='qnx.ui.skins' access='public' baseClasses='qnx.ui.display:IDisplayObject;qnx.ui.display:ISizeable' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <i>ISkin</i> interface is the interface for component skins. 
	 <p>
	 All button and cell renderer skins must implement this interface.
	 </p>
	 ]]></description>
<see><![CDATA[qnx.ui.skins.UISkin
	 ]]></see>
<see><![CDATA[qnx.ui.skins.SkinStates
	 ]]></see>
</interfaceRec>
<method name='getLayoutRect' fullname='qnx.ui.skins:ISkin/qnx.ui.skins:ISkin:getLayoutRect' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
		 Returns the layout rectangle.
		 
		 ]]></description>
<return><![CDATA[A <code>Rectangle</code> object representing the layout.
		 ]]></return>
</method>
<method name='state' fullname='qnx.ui.skins:ISkin/qnx.ui.skins:ISkin:state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the state of the skin.
		
		]]></description>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
</method>
<method name='state' fullname='qnx.ui.skins:ISkin/qnx.ui.skins:ISkin:state/set' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<classRec name='DialogBackground' fullname='qnx.ui.skins:DialogBackground' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\assets\src\qnx\ui\skins\DialogBackground.as' namespace='qnx.ui.skins' access='public' baseclass='flash.display:MovieClip' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='DialogBackground' fullname='qnx.ui.skins:DialogBackground/DialogBackground' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='setSize' fullname='qnx.ui.skins:DialogBackground/setSize' isStatic='false' isFinal='false' isOverride='false'  param_names='width;height' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
</method>
<field name='bl_mc' fullname='qnx.ui.skins:DialogBackground/bl_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='bm_mc' fullname='qnx.ui.skins:DialogBackground/bm_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='br_mc' fullname='qnx.ui.skins:DialogBackground/br_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='message' fullname='qnx.ui.skins:DialogBackground/message' type='flash.text:TextField' isStatic='false' isConst='false' >
</field>
<field name='ml_mc' fullname='qnx.ui.skins:DialogBackground/ml_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='mm_mc' fullname='qnx.ui.skins:DialogBackground/mm_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='mr_mc' fullname='qnx.ui.skins:DialogBackground/mr_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='title' fullname='qnx.ui.skins:DialogBackground/title' type='flash.text:TextField' isStatic='false' isConst='false' >
</field>
<field name='tl_mc' fullname='qnx.ui.skins:DialogBackground/tl_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='tm_mc' fullname='qnx.ui.skins:DialogBackground/tm_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<field name='tr_mc' fullname='qnx.ui.skins:DialogBackground/tr_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
</field>
<classRec name='UISkin' fullname='qnx.ui.skins:UISkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\UISkin.as' namespace='qnx.ui.skins' access='public' baseclass='qnx.ui.core:UIComponent' interfaces='qnx.ui.skins:ISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>UISkin</code> class contains the base skin implementation for all UI component skins.
	 
	 <p>
	 For an overview of skins and skin assets, including an example of how to create your own custom skins, 
	 see <a href="package-detail.html">Understanding skins</a>. 
	 </p>
	 
	 ]]></description>
<see><![CDATA[SkinStates
	 ]]></see>
<see><![CDATA[ISkin
	 ]]></see>
</classRec>
<method name='UISkin' fullname='qnx.ui.skins:UISkin/UISkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>UISkin</code> instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins:UISkin/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getLayoutRect' fullname='qnx.ui.skins:UISkin/getLayoutRect' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[ 
		 Returns the layout rectangle.
		 
		 ]]></description>
<return><![CDATA[A <code>Rectangle</code> object representing the layout.
		 ]]></return>
</method>
<method name='init' fullname='qnx.ui.skins:UISkin/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins:UISkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSkinState' fullname='qnx.ui.skins:UISkin/protected:setSkinState' isStatic='false' isFinal='false' isOverride='false'  param_names='state;asset' param_types='String;flash.display:DisplayObject' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 Associates a UI component state with a skin asset. Use this method to set up custom skins.
		 
		 ]]></description>
<param><![CDATA[state The state for which to set the skin asset.
		 ]]></param>
<param><![CDATA[asset The asset to associate with the skin.
		 
		 ]]></param>
</method>
<method name='setState' fullname='qnx.ui.skins:UISkin/protected:setState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showSkin' fullname='qnx.ui.skins:UISkin/protected:showSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Shows the given skin state.
		 <p>
		 Use this method to display skin states in custom skins.
		 </p>
		 ]]></description>
<param><![CDATA[skin The instance of the skin state.
		 ]]></param>
</method>
<method name='state' fullname='qnx.ui.skins:UISkin/state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[ 
		Gets or sets the state of the skin.
		
		]]></description>
</method>
<method name='state' fullname='qnx.ui.skins:UISkin/state/set' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='__state' fullname='qnx.ui.skins:UISkin/protected:__state' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__states' fullname='qnx.ui.skins:UISkin/protected:__states' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='currentState' fullname='qnx.ui.skins:UISkin/protected:currentState' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='BaseSkin' fullname='qnx.ui.skins:BaseSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\BaseSkin.as' namespace='qnx.ui.skins' access='public' baseclass='qnx.ui.skins:UISkin' interfaces='qnx.ui.skins:ISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='BaseSkin' fullname='qnx.ui.skins:BaseSkin/BaseSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new BaseSkin instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins:BaseSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabled_mc' fullname='qnx.ui.skins:BaseSkin/disabled_mc' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='down_mc' fullname='qnx.ui.skins:BaseSkin/down_mc' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selected_mc' fullname='qnx.ui.skins:BaseSkin/selected_mc' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='up_mc' fullname='qnx.ui.skins:BaseSkin/up_mc' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='IMFKeyboardOptions' fullname='qnx.input:IMFKeyboardOptions' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\input\IMFKeyboardOptions.as' namespace='qnx.input' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='IMFKeyboardOptions' fullname='qnx.input:IMFKeyboardOptions/IMFKeyboardOptions' isStatic='false' isFinal='false' isOverride='false'  param_names='type;enterType' param_types='String;String' param_defaults='undefined;undefined' result_type='*'>
</method>
<field name='enterType' fullname='qnx.input:IMFKeyboardOptions/enterType' type='String' isStatic='false' isConst='false' >
</field>
<field name='type' fullname='qnx.input:IMFKeyboardOptions/type' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='IMFConnection' fullname='qnx.input:IMFConnection' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\input\IMFConnection.as' namespace='qnx.input' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='IMFConnection' fullname='qnx.input:IMFConnection/IMFConnection' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='hideInput' fullname='qnx.input:IMFConnection/hideInput' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='imfDisconnected' fullname='qnx.input:IMFConnection/private:imfDisconnected' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='imfHide' fullname='qnx.input:IMFConnection/private:imfHide' isStatic='false' isFinal='false' isOverride='false'  param_names='msg;data' param_types='qnx.pps:Message;Object' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='onStage' fullname='qnx.input:IMFConnection/private:onStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='setKeyboardOptions' fullname='qnx.input:IMFConnection/setKeyboardOptions' isStatic='false' isFinal='false' isOverride='false'  param_names='field;options' param_types='flash.text:TextField;qnx.input:IMFKeyboardOptions' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='showInput' fullname='qnx.input:IMFConnection/showInput' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='textFocus' fullname='qnx.input:IMFConnection/private:textFocus' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:FocusEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='imfConnection' fullname='qnx.input:IMFConnection/imfConnection/get' isStatic='true' isFinal='false' isOverride='false'  result_type='qnx.input:IMFConnection'>
</method>
<field name='_allowCreate' fullname='qnx.input:IMFConnection/private:_allowCreate' type='Boolean' isStatic='true' isConst='false' >
</field>
<field name='_fields' fullname='qnx.input:IMFConnection/private:_fields' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='_imfPPSChannel' fullname='qnx.input:IMFConnection/private:_imfPPSChannel' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<field name='_instance' fullname='qnx.input:IMFConnection/private:_instance' type='qnx.input:IMFConnection' isStatic='true' isConst='false' >
</field>
<field name='_stages' fullname='qnx.input:IMFConnection/private:_stages' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IView' fullname='qnx.views:IView' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\views\IView.as' namespace='qnx.views' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='state' fullname='qnx.views:IView/qnx.views:IView:state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the state of the view.
		 
		 <p>
		 One of:
		 <ul>
		 <li><code>ANIMATION_IN_COMPLETE</code></li>
		 <li><code>ANIMATION_IN_START</code></li>
		 <li><code>ANIMATION_OUT_COMPLETE</code></li>
		 <li><code>ANIMATION_OUT_COMPLETE</code></li>
		 </ul>
		 </p>
		 ]]></description>
<see><![CDATA[qnx.views.UIViewStates
		 ]]></see>
</method>
<method name='state' fullname='qnx.views:IView/qnx.views:IView:state/set' isStatic='false' isFinal='false' isOverride='false'  param_names='stateStr' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<classRec name='UIViewStates' fullname='qnx.views:UIViewStates' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\views\UIViewStates.as' namespace='qnx.views' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  ]]></description>
<see><![CDATA[qnx.views.NavController
	  ]]></see>
<see><![CDATA[qnx.views.UIViewStates
	  ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='UIViewStates' fullname='qnx.views:UIViewStates/UIViewStates' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new UIViewStates instance.
		 ]]></description>
</method>
<field name='ANIMATION_IN_COMPLETE' fullname='qnx.views:UIViewStates/ANIMATION_IN_COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='animationInComplete' >
<description><![CDATA[
		 A constant indicating that the animation inside the view has completed.
		 ]]></description>
</field>
<field name='ANIMATION_IN_START' fullname='qnx.views:UIViewStates/ANIMATION_IN_START' type='String' isStatic='true' isConst='true' defaultValue='animationInStart' >
<description><![CDATA[
		 A constant indicating that the animation inside the view has started.
		 ]]></description>
</field>
<field name='ANIMATION_OUT_COMPLETE' fullname='qnx.views:UIViewStates/ANIMATION_OUT_COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='animationOutComplete' >
<description><![CDATA[
		 A constant indicating that the animation outside the view has completed.
		 ]]></description>
</field>
<field name='ANIMATION_OUT_START' fullname='qnx.views:UIViewStates/ANIMATION_OUT_START' type='String' isStatic='true' isConst='true' defaultValue='animationOutStart' >
<description><![CDATA[
		 A constant indicating that the animation outside the view has started.
		 ]]></description>
</field>
<classRec name='NavController' fullname='qnx.views:NavController' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\views\NavController.as' namespace='qnx.views' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[

	  ]]></description>
<see><![CDATA[qnx.views.UIViewStates

	  ]]></see>
<see><![CDATA[qnx.views.UIView

	  ]]></see>
<private><![CDATA[]]></private>
<metadata>
	<Event owner='qnx.views:NavController' name='navControllerEvent_view_changed' type='qnx.events.ui.NavControllerEvent' >
<description><![CDATA[

	   Dispatched when the view change operation has completed.

	   ]]></description>
<eventType><![CDATA[qnx.ui.events.NavControllerEvent

	   ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.views:NavController' name='navControllerEvent_view_changing' type='qnx.ui.events.NavControllerEvent' >
<description><![CDATA[

	  Dispatched when the view has started to change.

	  ]]></description>
<eventType><![CDATA[qnx.ui.events.NavControllerEvent

	  ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='NavController' fullname='qnx.views:NavController/NavController' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='flash.events:IEventDispatcher' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Creates a NavController instance given a target.

		 

		 ]]></description>
<param><![CDATA[target The target for which to create the NavController.

		 ]]></param>
</method>
<method name='addView' fullname='qnx.views:NavController/protected:addView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='qnx.views:IView'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='animateViews' fullname='qnx.views:NavController/protected:animateViews' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='changeSection' fullname='qnx.views:NavController/changeSection' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Changes the view. 

		 <p>

		 This function can be called externally.

		 </p>

		 ]]></description>
<params><![CDATA[view A <code>String</code> or class reference representing a view object. 

		 ]]></params>
</method>
<method name='changeView' fullname='qnx.views:NavController/protected:changeView' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createView' fullname='qnx.views:NavController/private:createView' isStatic='false' isFinal='false' isOverride='false'  param_names='theView' param_types='Object' param_defaults='undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='determineViewDirection' fullname='qnx.views:NavController/private:determineViewDirection' isStatic='false' isFinal='false' isOverride='false'  param_names='oldIndex;newIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='didChange' fullname='qnx.views:NavController/protected:didChange' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatch' fullname='qnx.views:NavController/private:dispatch' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getViewIndex' fullname='qnx.views:NavController/private:getViewIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='theView' param_types='Object' param_defaults='undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAnimationComplete' fullname='qnx.views:NavController/protected:onAnimationComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onViewChanged' fullname='qnx.views:NavController/protected:onViewChanged' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='popView' fullname='qnx.views:NavController/protected:popView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionAndAnimateView' fullname='qnx.views:NavController/private:positionAndAnimateView' isStatic='false' isFinal='false' isOverride='false'  param_names='theView;thePosition' param_types='Object;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionView' fullname='qnx.views:NavController/protected:positionView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;thePosition' param_types='Object;String' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='pushView' fullname='qnx.views:NavController/protected:pushView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeItem' fullname='qnx.views:NavController/protected:removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='qnx.views:IView' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='switchView' fullname='qnx.views:NavController/protected:switchView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='willChange' fullname='qnx.views:NavController/protected:willChange' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='container' fullname='qnx.views:NavController/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Sprite'>
<description><![CDATA[

		 Gets or sets the container sprite used to contain the views. 

		 ]]></description>
</method>
<method name='dataProvider' fullname='qnx.views:NavController/dataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[

		 Gets or sets the <code>DataProvider</code> for the view.

		 ]]></description>
</method>
<method name='selectedIndex' fullname='qnx.views:NavController/selectedIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Gets or sets the selected index. 

		 ]]></description>
</method>
<method name='viewField' fullname='qnx.views:NavController/viewField/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets the field <code>String</code>.

		 
		 <p>

		 The <code>String</code> is inspected to create or access views. 

		 </p>

		 ]]></description>
<returns><![CDATA[String 

		 ]]></returns>
</method>
<method name='viewInstanceField' fullname='qnx.views:NavController/viewInstanceField/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets a <code>String</code> representing the instance of the view.

		 ]]></description>
</method>
<method name='container' fullname='qnx.views:NavController/container/set' isStatic='false' isFinal='false' isOverride='false'  param_names='theContainer' param_types='flash.display:Sprite' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Container sprite used to contain the views 

		 ]]></description>
</method>
<method name='dataProvider' fullname='qnx.views:NavController/dataProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='theArray' param_types='Array' param_defaults='undefined' result_type='void'>
</method>
<method name='selectedIndex' fullname='qnx.views:NavController/selectedIndex/set' isStatic='false' isFinal='false' isOverride='false'  param_names='ind' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='viewField' fullname='qnx.views:NavController/viewField/set' isStatic='false' isFinal='false' isOverride='false'  param_names='theString' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Gets or sets the field <code>String</code>.

		 
		 <p>

		 The String is inspected to create or access views. 

		 </p>

		 ]]></description>
<param><![CDATA[theString The <code>String</code> identifying the view. 

		 ]]></param>
<returns><![CDATA[void

		 ]]></returns>
</method>
<method name='viewInstanceField' fullname='qnx.views:NavController/viewInstanceField/set' isStatic='false' isFinal='false' isOverride='false'  param_names='theString' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='POSITION_LEFT' fullname='qnx.views:NavController/private:POSITION_LEFT' type='String' isStatic='true' isConst='true' defaultValue='positionLeft' >
</field>
<field name='POSITION_RIGHT' fullname='qnx.views:NavController/private:POSITION_RIGHT' type='String' isStatic='true' isConst='true' defaultValue='positionRight' >
</field>
<field name='__container' fullname='qnx.views:NavController/private:__container' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='__dataProvider' fullname='qnx.views:NavController/private:__dataProvider' type='Array' isStatic='false' isConst='false' >
</field>
<field name='__isAnimating' fullname='qnx.views:NavController/private:__isAnimating' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='__nextView' fullname='qnx.views:NavController/protected:__nextView' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedIndex' fullname='qnx.views:NavController/private:__selectedIndex' type='int' isStatic='false' isConst='false' >
</field>
<field name='__viewField' fullname='qnx.views:NavController/private:__viewField' type='String' isStatic='false' isConst='false' defaultValue='view' >
</field>
<field name='__viewInstanceField' fullname='qnx.views:NavController/private:__viewInstanceField' type='String' isStatic='false' isConst='false' defaultValue='viewInstance' >
</field>
<field name='currentView' fullname='qnx.views:NavController/protected:currentView' type='qnx.views:IView' isStatic='false' isConst='false' defaultValue='null' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='nextView' fullname='qnx.views:NavController/protected:nextView' type='qnx.views:IView' isStatic='false' isConst='false' defaultValue='null' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='UIView' fullname='qnx.views:UIView' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\views\UIView.as' namespace='qnx.views' access='public' baseclass='flash.display:MovieClip' interfaces='qnx.views:IView' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  ]]></description>
<see><![CDATA[qnx.views.NavController
	  ]]></see>
<see><![CDATA[qnx.views.UIViewStates
	  ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='UIView' fullname='qnx.views:UIView/UIView' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new UIView instance.
		 ]]></description>
</method>
<method name='onAnimationInComplete' fullname='qnx.views:UIView/protected:onAnimationInComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAnimationInStart' fullname='qnx.views:UIView/protected:onAnimationInStart' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAnimationOutComplete' fullname='qnx.views:UIView/protected:onAnimationOutComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAnimationOutStart' fullname='qnx.views:UIView/protected:onAnimationOutStart' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setState' fullname='qnx.views:UIView/setState' isStatic='false' isFinal='false' isOverride='false'  param_names='stateStr' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='state' fullname='qnx.views:UIView/state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the current state of the view.
		 ]]></description>
</method>
<method name='state' fullname='qnx.views:UIView/state/set' isStatic='false' isFinal='false' isOverride='false'  param_names='stateStr' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='__state' fullname='qnx.views:UIView/protected:__state' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='MediaControlOption' fullname='qnx.ui.media:MediaControlOption' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\media\MediaControlOption.as' namespace='qnx.ui.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaControlOption</code> class provides constant values for the <code>MediaControl.setOption</code> method.
	 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControl#setOption()
	 ]]></see>
<see><![CDATA[qnx.ui.media.MediaControl#getOption()
	 ]]></see>
</classRec>
<field name='BACKGROUND' fullname='qnx.ui.media:MediaControlOption/BACKGROUND' type='String' isStatic='true' isConst='true' defaultValue='background' >
<description><![CDATA[
		 Show or hide the background in the MediaControl component.
		 ]]></description>
</field>
<field name='DURATION' fullname='qnx.ui.media:MediaControlOption/DURATION' type='String' isStatic='true' isConst='true' defaultValue='duration' >
<description><![CDATA[
		 Show or hide the duration label in the MediaControl component.
		 ]]></description>
</field>
<field name='FULLSCREEN' fullname='qnx.ui.media:MediaControlOption/FULLSCREEN' type='String' isStatic='true' isConst='true' defaultValue='fullscreen' >
<description><![CDATA[
		 Show or hide the fullscreen in the MediaControl component.
		 ]]></description>
</field>
<field name='NEXT' fullname='qnx.ui.media:MediaControlOption/NEXT' type='String' isStatic='true' isConst='true' defaultValue='next' >
<description><![CDATA[
		 Show or hide the next button in the MediaControl component.
		 ]]></description>
</field>
<field name='PLAY_PAUSE' fullname='qnx.ui.media:MediaControlOption/PLAY_PAUSE' type='String' isStatic='true' isConst='true' defaultValue='play_pause' >
<description><![CDATA[
		 Show or hide the play/pause button in the MediaControl component.
		 ]]></description>
</field>
<field name='POSITION' fullname='qnx.ui.media:MediaControlOption/POSITION' type='String' isStatic='true' isConst='true' defaultValue='position' >
<description><![CDATA[
		 Show or hide the position label in the MediaControl component.
		 ]]></description>
</field>
<field name='PREVIOUS' fullname='qnx.ui.media:MediaControlOption/PREVIOUS' type='String' isStatic='true' isConst='true' defaultValue='previous' >
<description><![CDATA[
		 Show or hide the previous button in the MediaControl component.
		 ]]></description>
</field>
<field name='SEEKBAR' fullname='qnx.ui.media:MediaControlOption/SEEKBAR' type='String' isStatic='true' isConst='true' defaultValue='seekbar' >
<description><![CDATA[
		 Show or hide the seek slider in the MediaControl component.
		 ]]></description>
</field>
<field name='STOP' fullname='qnx.ui.media:MediaControlOption/STOP' type='String' isStatic='true' isConst='true' defaultValue='stop' >
<description><![CDATA[
		 Show or hide the stop button in the MediaControl component.
		 ]]></description>
</field>
<field name='VOLUME' fullname='qnx.ui.media:MediaControlOption/VOLUME' type='String' isStatic='true' isConst='true' defaultValue='volume' >
<description><![CDATA[
		 Show or hide the volume slider in the MediaControl component.
		 ]]></description>
</field>
<classRec name='MediaControlState' fullname='qnx.ui.media:MediaControlState' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\media\MediaControlState.as' namespace='qnx.ui.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaControlState</code> class provides constant values for  the <code>MediaControl.setState</code> method.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControl#setState()
	 ]]></see>
<see><![CDATA[qnx.ui.media.MediaControl#getState()
	 ]]></see>
</classRec>
<field name='PAUSE' fullname='qnx.ui.media:MediaControlState/PAUSE' type='String' isStatic='true' isConst='true' defaultValue='pause' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to indicate that the
		 MediaControl interface should reflect a paused state.
		 ]]></description>
</field>
<field name='PLAY' fullname='qnx.ui.media:MediaControlState/PLAY' type='String' isStatic='true' isConst='true' defaultValue='play' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to indicate that the MediaControl interface
		 should reflect a playing state.
		 ]]></description>
</field>
<field name='SEEK_END' fullname='qnx.ui.media:MediaControlState/SEEK_END' type='String' isStatic='true' isConst='true' defaultValue='seekend' >
<description><![CDATA[
		 This is a transitent state and is delivered only though a STATE_CHANGE event when the user lifts their finger off the screen to 
		 end a seek interaction and should not be progrmatically set. The state of the MediaControl is not set to this.
		 ]]></description>
</field>
<field name='SEEK_START' fullname='qnx.ui.media:MediaControlState/SEEK_START' type='String' isStatic='true' isConst='true' defaultValue='seekstart' >
<description><![CDATA[
		 This is a transitent state and is delivered only though a STATE_CHANGE event when the user presses down on the seekbar 
		 thumb to begin seeking and should not be progrmatically set. The state of the MediaControl is not set to this.
		 ]]></description>
</field>
<field name='STOP' fullname='qnx.ui.media:MediaControlState/STOP' type='String' isStatic='true' isConst='true' defaultValue='stop' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to indicate that the
		 MediaControl interface should reflect a stopped state.
		 ]]></description>
</field>
<classRec name='MediaControlProperty' fullname='qnx.ui.media:MediaControlProperty' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\media\MediaControlProperty.as' namespace='qnx.ui.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaControlProperty</code> class provides constant values for the <code>MediaControl.setProperty</code> method.
	 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControl#setProperty()
	 ]]></see>
<see><![CDATA[qnx.ui.media.MediaControl#getProperty()
	 ]]></see>
</classRec>
<field name='DURATION' fullname='qnx.ui.media:MediaControlProperty/DURATION' type='String' isStatic='true' isConst='true' defaultValue='duration' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to set the value 
		 of the duration property in the MediaControl component.
		 ]]></description>
</field>
<field name='FULLSCREEN' fullname='qnx.ui.media:MediaControlProperty/FULLSCREEN' type='String' isStatic='true' isConst='true' defaultValue='fullscreen' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to
		 set the value of the fullscreen property in the MediaControl component.
		 ]]></description>
</field>
<field name='POSITION' fullname='qnx.ui.media:MediaControlProperty/POSITION' type='String' isStatic='true' isConst='true' defaultValue='position' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to set
		 the value of the position property in the MediaControl component.
		 ]]></description>
</field>
<field name='VOLUME' fullname='qnx.ui.media:MediaControlProperty/VOLUME' type='String' isStatic='true' isConst='true' defaultValue='volume' >
<description><![CDATA[
		 Passed into the <code>MediaControl.setProperty</code> method to
		 set the value of the volume property in the MediaControl component.
		 ]]></description>
</field>
<classRec name='MediaControl' fullname='qnx.ui.media:MediaControl' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\media\MediaControl.as' namespace='qnx.ui.media' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaControl</code> class provides a set of controls that can be used to control media, such as video and audio.
	 <p>
	 The control itself does not control the media. Instead, it broadcasts events as the user interacts with the controls.
	 You can customize the control by setting options to hide or show interace features.
	 </p>
	 ]]></description>
<example><![CDATA[The following example sets up a <code>MediaControl</code> object.

		<listing version="3.0">
		var controls:MediaControl = new MediaControl();
		controls.width = 995;
		controls.height = 65;
		addChild( controls );
		
		controls.setOption( MediaControlOptions.VOLUME, true );
		controls.setOption( MediaControlOptions.PLAY_PAUSE, true );
		controls.setOption( MediaControlOptions.NEXT, true );
		controls.setOption( MediaControlOptions.PREVIOUS, true );
		controls.setOption( MediaControlOptions.STOP, true );
		controls.setOption( MediaControlOptions.SEEKBAR, true );
		controls.setOption( MediaControlOptions.DURATION, true );
		controls.setOption( MediaControlOptions.POSITION, true );
		controls.setOption( MediaControlOptions.FULLSCREEN, true );
		controls.setProperty( MediaControlProperty.VOLUME, 80 );
		
		controls.addEventListener( MediaControlEvent.STATE_CHANGE, stateChanged );
		
		
		function stateChanged( e:MediaControlEvent ):void
		{
			var state:String = controls.getState();
			trace( state );
		} 
		 </listing> 
	 ]]></example>
<see><![CDATA[MediaControlOption
	 ]]></see>
<see><![CDATA[MediaControlProperty
	 ]]></see>
<see><![CDATA[MediaControlState
	 
	 ]]></see>
<metadata>
	<Event owner='qnx.ui.media:MediaControl' name='stateChange' type='qnx.ui.events.MediaControlEvent' >
<description><![CDATA[
	  Dispatched when the state of the media should change based on user interaction with the controls.
	  <p>
	  The following cases will cause this event to be dispatched:
	  </p>
	  <ul>
	  <li>The user presses the stop button.</li>
	  <li>The user presses the pause button.</li>
	  <li>The user presses the play button.</li>
	  <li>The user touches down on the seek thumb.</li>
	  <li>The user releases the seek thumb.</li>
	  </ul>
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.MediaControlEvent.STATE_CHANGE
	  ]]></eventType>
<see><![CDATA[qnx.ui.media.MediaControlState
	  ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.media:MediaControl' name='optionClicked' type='qnx.ui.events.MediaControlEvent' >
<description><![CDATA[
	  Dispatched when certain elements in the control are touched by the user.
	  <p>
	  The following cases will cause this event to be dispatched:
	  </p>
	  <ul>
	  <li>When the user touches the next button.</li>
	  <li>When the user touches the previous button.</li>
	  </ul>
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.MediaControlEvent.OPTION_CLICK
	  ]]></eventType>
<see><![CDATA[qnx.ui.media.MediaControlOptions
	  ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.media:MediaControl' name='propertyChange' type='qnx.ui.events.MediaControlEvent' >
<description><![CDATA[
	  Dispatched when a property has changed through user interaction.
	  <p>
	  The following cases will cause this event to be dispatched:
	  </p>
	  <ul>
	  <li>When the user interacts with the seek bar.</li>
	  <li>When the user interacts with the volume slider.</li>
	  <li>When the user presses the fullscreen button.</li>
	  </ul>
	  
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.MediaControlEvent.PROPERTY_CHANGE
	  ]]></eventType>
<see><![CDATA[qnx.ui.media.MediaControlProperty
	  ]]></see>
	</Event>
</metadata>
</classRec>
<method name='MediaControl' fullname='qnx.ui.media:MediaControl/MediaControl' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>MediaControl</code> instance.
		 ]]></description>
</method>
<method name='dispatchTimeElapsedEvent' fullname='qnx.ui.media:MediaControl/private:dispatchTimeElapsedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='draw' fullname='qnx.ui.media:MediaControl/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fullscreenClicked' fullname='qnx.ui.media:MediaControl/private:fullscreenClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='getOption' fullname='qnx.ui.media:MediaControl/getOption' isStatic='false' isFinal='false' isOverride='false'  param_names='option' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Returns a <code>Boolean</code> indicating whether or not the option is shown.
		 
		 ]]></description>
<param><![CDATA[option The option to retrieve.
		 ]]></param>
<return><![CDATA[Returns <em>true</em> if the option is shown, otherwise <em>false</em>.
		 ]]></return>
<see><![CDATA[#setOption()
		 ]]></see>
<see><![CDATA[qnx.ui.media.MediaControlOption
		 ]]></see>
</method>
<method name='getProperty' fullname='qnx.ui.media:MediaControl/getProperty' isStatic='false' isFinal='false' isOverride='false'  param_names='prop' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Gets the current value of the specified property. Each property will return a different data type.
		 
		 <ul>
		 <li><code>MediaControlProperty.DURATION</code> - Returns an int</li>
		 <li><code>MediaControlProperty.POSITION</code> - Returns an int</li>
		 <li><code>MediaControlProperty.FULLSCREEN</code> - Returns a Boolean</li>
		 <li><code>MediaControlProperty.STATE</code> - Returns a String</li>
		 <li><code>MediaControlProperty.VOLUME</code> - Returns an int</li>
		 </ul>
		 
		 ]]></description>
<see><![CDATA[#setProperty()
		 ]]></see>
<see><![CDATA[qnx.ui.media.MediaControlProperty
		 ]]></see>
</method>
<method name='getSeekbarEnabled' fullname='qnx.ui.media:MediaControl/private:getSeekbarEnabled' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='getState' fullname='qnx.ui.media:MediaControl/getState' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets the state of the control.
		 <p>
		 One of the following values will be returned:
		 </p>
		 <ul>
		 <li><code>MediaControlState.PLAY</code></li>
		 <li><code>MediaControlState.PAUSE</code></li>
		 <li><code>MediaControlState.STOP</code></li>
		 <li><code>MediaControlState.SEEK_START</code></li>
		 <li><code>MediaControlState.SEEK_END</code></li>
		 </ul>
		 
		 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControlState
		 ]]></see>
<see><![CDATA[#setState()
		 ]]></see>
</method>
<method name='init' fullname='qnx.ui.media:MediaControl/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='nextClicked' fullname='qnx.ui.media:MediaControl/private:nextClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='playPauseClicked' fullname='qnx.ui.media:MediaControl/private:playPauseClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='previousClicked' fullname='qnx.ui.media:MediaControl/private:previousClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='seekEnd' fullname='qnx.ui.media:MediaControl/private:seekEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:SliderEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='seekMove' fullname='qnx.ui.media:MediaControl/private:seekMove' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:SliderEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='seekStart' fullname='qnx.ui.media:MediaControl/private:seekStart' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:SliderEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='setButtonConatinerSize' fullname='qnx.ui.media:MediaControl/private:setButtonConatinerSize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='setEnabled' fullname='qnx.ui.media:MediaControl/protected:setEnabled' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setFullscreenIcons' fullname='qnx.ui.media:MediaControl/private:setFullscreenIcons' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='setOption' fullname='qnx.ui.media:MediaControl/setOption' isStatic='false' isFinal='false' isOverride='false'  param_names='option;value' param_types='String;Boolean' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Allows you to hide and show features of the <code>MediaControl</code> class.
		 <p>
		 By default all items are hidden.
		 </p>
		 <p>
		 Valid values for the <code>option</code> parameter are:
		 </p>
		 <ul>
		 <li><code>MediaControlOptions.VOLUME</code></li>
		 <li><code>MediaControlOptions.FULLSCREEN</code></li>
		 <li><code>MediaControlOptions.NEXT</code></li>
		 <li><code>MediaControlOptions.PREVIOUS</code></li>
		 <li><code>MediaControlOptions.PLAY_PAUSE</code></li>
		 <li><code>MediaControlOptions.SEEKBAR</code></li>
		 <li><code>MediaControlOptions.STOP</code></li>
		 <li><code>MediaControlOptions.DURATION</code></li>
		 <li><code>MediaControlOptions.POSITION</code></li>
		 </ul>
		 <p>
		 The <code>MediaControlOptions.SCRUBBER</code> option will be disabled if <code>MediaControlProperty.DURATION</code> property
		 has not been set using the <code>setProperty</code> method.
		 </p>
		 ]]></description>
<param><![CDATA[option The option to show or hide.
		 ]]></param>
<param><![CDATA[value When set to <em>true</em> the option is shown. When set to <em>false</em> the option is hidden.
		 
		 ]]></param>
<see><![CDATA[MediaControlOption
		 ]]></see>
<see><![CDATA[#getOption()
		 
		 ]]></see>
</method>
<method name='setProperty' fullname='qnx.ui.media:MediaControl/setProperty' isStatic='false' isFinal='false' isOverride='false'  param_names='prop;value' param_types='String;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Sets a property to the specified value in the <code>MediaControl</code> component.
		 <p>
		 Valid values for the prop parameter are
		 </p>
		 <ul>
		 <li><code>MediaControlProperty.DURATION</code></li>
		 <li><code>MediaControlProperty.POSITION</code></li>
		 <li><code>MediaControlProperty.FULLSCREEN</code></li>
		 <li><code>MediaControlProperty.VOLUME</code></li>
		 </ul>
		 
		 The <code>MediaControlProperty.DURATION</code> property expects the duration of the media in milliseconds.
		 The <code>MediaControlProperty.POSITION</code> property expects the position of the media in milliseconds.
		 The <code>MediaControlProperty.FULLSCREEN</code> property expects <code>true</code> if the media is in fullscreen mode or <code>false</code> if it is not.
		 The <code>MediaControlProperty.VOLUME</code> property expects an <code>int</code> value ranging between 0 and 100.
		 
		 Sets a property to the specified value in the MediaControl component.
		 Valid values for the prop param are
		 <ul>
		 <li>MediaControlProperty.DURATION</li>
		 <li>MediaControlProperty.POSITION</li>
		 <li>MediaControlProperty.FULLSCREEN</li>
		 <li>MediaControlProperty.VOLUME</li>
		 </ul>
		 The MediaControlProperty.DURATION property expects the duration of the media in milliseconds.
		 The MediaControlProperty.POSITION property expects the position of the media in milliseconds.
		 The MediaControlProperty.FULLSCREEN property expects <code>true</code> if the media is in fullscreen mode or <code>false</code> if it is not.
		 The MediaControlProperty.VOLUME property expects a <code>int</code> value ranging between 0 and 100.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControlProperty
		 ]]></see>
<see><![CDATA[#getProperty()
		 
		 ]]></see>
</method>
<method name='setSeekbarValue' fullname='qnx.ui.media:MediaControl/private:setSeekbarValue' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='setState' fullname='qnx.ui.media:MediaControl/setState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the state of the control.
		 <p>
		 This method expects one of the following values:
		 </p>
		 <ul>
		 <li><code>MediaControlState.PLAY</code></li>
		 <li><code>MediaControlState.PAUSE</code></li>
		 <li><code>MediaControlState.STOP</code></li>
		 </ul>
		 
		 ]]></description>
<param><![CDATA[state The state to set.
		 
		 ]]></param>
<see><![CDATA[qnx.ui.media.MediaControlState
		 ]]></see>
<see><![CDATA[#getState()
		 ]]></see>
</method>
<method name='stopClicked' fullname='qnx.ui.media:MediaControl/private:stopClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='togglePlayPause' fullname='qnx.ui.media:MediaControl/private:togglePlayPause' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='volumeChange' fullname='qnx.ui.media:MediaControl/private:volumeChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:SliderEvent' param_defaults='undefined' result_type='void'>
</method>
<field name='MaximizeIcon' fullname='qnx.ui.media:MediaControl/private:MaximizeIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='MediaControlBackground' fullname='qnx.ui.media:MediaControl/private:MediaControlBackground' type='Class' isStatic='true' isConst='false' >
</field>
<field name='MinimizeIcon' fullname='qnx.ui.media:MediaControl/private:MinimizeIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='NextIcon' fullname='qnx.ui.media:MediaControl/private:NextIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='PauseIcon' fullname='qnx.ui.media:MediaControl/private:PauseIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='PlayIcon' fullname='qnx.ui.media:MediaControl/private:PlayIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='PreviousIcon' fullname='qnx.ui.media:MediaControl/private:PreviousIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='StopIcon' fullname='qnx.ui.media:MediaControl/private:StopIcon' type='Class' isStatic='false' isConst='false' >
</field>
<field name='__duration' fullname='qnx.ui.media:MediaControl/private:__duration' type='int' isStatic='false' isConst='false' >
</field>
<field name='__isFullscreen' fullname='qnx.ui.media:MediaControl/private:__isFullscreen' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__isSeeking' fullname='qnx.ui.media:MediaControl/private:__isSeeking' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__options' fullname='qnx.ui.media:MediaControl/private:__options' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='__position' fullname='qnx.ui.media:MediaControl/private:__position' type='int' isStatic='false' isConst='false' >
</field>
<field name='__state' fullname='qnx.ui.media:MediaControl/private:__state' type='String' isStatic='false' isConst='false' >
</field>
<field name='background_mc' fullname='qnx.ui.media:MediaControl/private:background_mc' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='buttonContainer' fullname='qnx.ui.media:MediaControl/private:buttonContainer' type='qnx.ui.core:Container' isStatic='false' isConst='false' >
</field>
<field name='controlsContainer' fullname='qnx.ui.media:MediaControl/private:controlsContainer' type='qnx.ui.core:Container' isStatic='false' isConst='false' >
</field>
<field name='draggingTimer' fullname='qnx.ui.media:MediaControl/private:draggingTimer' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<field name='duration_txt' fullname='qnx.ui.media:MediaControl/private:duration_txt' type='qnx.ui.text:Label' isStatic='false' isConst='false' >
</field>
<field name='fullscreen_btn' fullname='qnx.ui.media:MediaControl/private:fullscreen_btn' type='qnx.ui.buttons:IconButton' isStatic='false' isConst='false' >
</field>
<field name='maximizeIcon' fullname='qnx.ui.media:MediaControl/private:maximizeIcon' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='minimizeIcon' fullname='qnx.ui.media:MediaControl/private:minimizeIcon' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='next_btn' fullname='qnx.ui.media:MediaControl/private:next_btn' type='qnx.ui.buttons:IconButton' isStatic='false' isConst='false' >
</field>
<field name='pauseIcon' fullname='qnx.ui.media:MediaControl/private:pauseIcon' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='playIcon' fullname='qnx.ui.media:MediaControl/private:playIcon' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='playPause_btn' fullname='qnx.ui.media:MediaControl/private:playPause_btn' type='qnx.ui.buttons:IconButton' isStatic='false' isConst='false' >
</field>
<field name='position_txt' fullname='qnx.ui.media:MediaControl/private:position_txt' type='qnx.ui.text:Label' isStatic='false' isConst='false' >
</field>
<field name='previousSeek' fullname='qnx.ui.media:MediaControl/private:previousSeek' type='Number' isStatic='false' isConst='false' >
</field>
<field name='previous_btn' fullname='qnx.ui.media:MediaControl/private:previous_btn' type='qnx.ui.buttons:IconButton' isStatic='false' isConst='false' >
</field>
<field name='seekbar' fullname='qnx.ui.media:MediaControl/private:seekbar' type='qnx.ui.slider:Slider' isStatic='false' isConst='false' >
</field>
<field name='sliderContainer' fullname='qnx.ui.media:MediaControl/private:sliderContainer' type='qnx.ui.core:Container' isStatic='false' isConst='false' >
</field>
<field name='stop_btn' fullname='qnx.ui.media:MediaControl/private:stop_btn' type='qnx.ui.buttons:IconButton' isStatic='false' isConst='false' >
</field>
<field name='volume' fullname='qnx.ui.media:MediaControl/private:volume' type='qnx.ui.slider:VolumeSlider' isStatic='false' isConst='false' >
</field>
<classRec name='ListSelectionMode' fullname='qnx.ui.listClasses:ListSelectionMode' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\ListSelectionMode.as' namespace='qnx.ui.listClasses' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ListSelectionMode</code> class defines modes that govern list selection. Each mode is defined
	 by one of the following constants:
	 <ul>
	 <li>NONE - indicates no selection</li>
	 <li>SINGLE - indicates that a single item can be selected</li>
	 <li>MULTIPLE - indicates that multiple items can be selected</li>
	 </ul>
	 ]]></description>
</classRec>
<field name='MULTIPLE' fullname='qnx.ui.listClasses:ListSelectionMode/MULTIPLE' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
		 A constant indicating that multiple cells can be selected.
		 ]]></description>
</field>
<field name='NONE' fullname='qnx.ui.listClasses:ListSelectionMode/NONE' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
		 A constant indicating no selection.
		 ]]></description>
</field>
<field name='SINGLE' fullname='qnx.ui.listClasses:ListSelectionMode/SINGLE' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
		 A constant indicating that only a single cell can be selected.
		 ]]></description>
</field>
<classRec name='ScrollDirection' fullname='qnx.ui.listClasses:ScrollDirection' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\ScrollDirection.as' namespace='qnx.ui.listClasses' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ScrollDirection</code> class contains the constants the describe the scroll direction of a list. 
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.List#scrollDirection
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.ScrollPane#scrollDirection
	 ]]></see>
</classRec>
<field name='BOTH' fullname='qnx.ui.listClasses:ScrollDirection/BOTH' type='String' isStatic='true' isConst='true' defaultValue='both' >
<description><![CDATA[
		 A constant representing both horizontal and vertical scrolling.
		 ]]></description>
</field>
<field name='HORIZONTAL' fullname='qnx.ui.listClasses:ScrollDirection/HORIZONTAL' type='String' isStatic='true' isConst='true' defaultValue='horizontal' >
<description><![CDATA[
		 A constant representing horizontal scrolling.
		 ]]></description>
</field>
<field name='NONE' fullname='qnx.ui.listClasses:ScrollDirection/NONE' type='String' isStatic='true' isConst='true' defaultValue='none' >
<description><![CDATA[
		 A constant representing no scrolling.
		 ]]></description>
</field>
<field name='VERTICAL' fullname='qnx.ui.listClasses:ScrollDirection/VERTICAL' type='String' isStatic='true' isConst='true' defaultValue='vertical' >
<description><![CDATA[
		 A constant representing vertical scrolling.
		 ]]></description>
</field>
<interfaceRec name='ICellRenderer' fullname='qnx.ui.listClasses:ICellRenderer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\ICellRenderer.as' namespace='qnx.ui.listClasses' access='public' baseClasses='qnx.ui.display:IDisplayObject;qnx.ui.display:ISizeable' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <i>ICellRenderer</i> interface must be implemented by the cell renderer for the 
	 <code>List</code>, <code>TileList</code>, <code>SectionList</code>, and <code>SectionTileList</code> components.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.List
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.TileList
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.SectionList
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.SectionTileList
	 ]]></see>
</interfaceRec>
<method name='column' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:column/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the column of the cell.
		]]></description>
</method>
<method name='data' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		Gets or sets the data of the cell.
		]]></description>
</method>
<method name='index' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:index/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the index of the cell.
		]]></description>
</method>
<method name='isHeader' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:isHeader/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Gets a <code>Boolean</code> that determines whether or not a row is a header. 
		 ]]></description>
</method>
<method name='row' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:row/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the row of the cell.
		]]></description>
</method>
<method name='section' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:section/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the section of the cell.
		]]></description>
</method>
<method name='state' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the state of the cell.
		]]></description>
</method>
<method name='column' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:column/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='data' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:data/set' isStatic='false' isFinal='false' isOverride='false'  param_names='data' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='index' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:index/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='row' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:row/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='section' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:section/set' isStatic='false' isFinal='false' isOverride='false'  param_names='section' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='state' fullname='qnx.ui.listClasses:ICellRenderer/qnx.ui.listClasses:ICellRenderer:state/set' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<classRec name='ScrollPane' fullname='qnx.ui.listClasses:ScrollPane' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\ScrollPane.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ScrollPane</code> class represents a scrolling pane. 
	 
	 <p>A scrolling pane is effectively a list without cells. 
	 </p>
	 <p>
	 The following example shows a <code>ScrollPane</code> being instantiated and initialized.
	 </p>
	 
	 <listing>
	 scroller = new ScrollPane();
	 scroller.width = 1024;
	 scroller.height = 600;
	 scroller.y = 0;
	 addChild( scroller );
	 	
	 label = new Label();
	 label.multiline = true;
	 label.width = 1024;
	 label.height = 600;
	 setText("File Viewer");
	 
	 scroller.addScrollContent( label );
	 </listing>
	 
	 <p>
	 In  the above example, a <code>Label</code> is instantiated and passed to the scroll pane using the <code>addScrollContent</code> method. 
	 The <code>setText()</code> function, which is used to add text to the label, is listed below: 
	 </p>
	 <listing>
	 private function setText( msg:String ):void
	  {
	   label.text = msg;
	   label.height = label.textHeight + 5;
	   scroller.update();
	  }
	 </listing>
	 ]]></description>
<metadata>
	<Event owner='qnx.ui.listClasses:ScrollPane' name='scrollMove' type='qnx.ui.events.ScrollEvent' >
<description><![CDATA[
	 Dispatched when the scroll pane is moving
	 
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.ScrollEvent.SCROLL_MOVE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:ScrollPane' name='scrollBegin' type='qnx.ui.events.ScrollEvent' >
<description><![CDATA[
	 Dispatched when the scroll pane has started scrolling
	 
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.ScrollEvent.SCROLL_BEGIN
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:ScrollPane' name='scrollEnded' type='qnx.ui.events.ScrollEvent' >
<description><![CDATA[
	  Dispatched when the scroll pane has finished scrolling.
	  
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.ScrollEvent.SCROLL_END
	  ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='ScrollPane' fullname='qnx.ui.listClasses:ScrollPane/ScrollPane' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>ScrollPane</code> instance.
		 ]]></description>
</method>
<method name='addScrollContent' fullname='qnx.ui.listClasses:ScrollPane/addScrollContent' isStatic='false' isFinal='false' isOverride='false'  param_names='content' param_types='Object' param_defaults='undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[
		 Adds content to the scroll pane. 
		 
		 <p>
		 You can add an item to the scroll pane by passing either a class reference, a <code>String</code> linkage identifier, 
		 or an instance of a <code>DisplayObject</code>. 
		 </p>
		 
		 ]]></description>
<param><![CDATA[content The content to be added to the scroll pane.
		 ]]></param>
<return><![CDATA[Returns the item that was added.
		 ]]></return>
<see><![CDATA[flash.display.DisplayObject
		 ]]></see>
</method>
<method name='adjustScrollbars' fullname='qnx.ui.listClasses:ScrollPane/protected:adjustScrollbars' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='canScrollByDirection' fullname='qnx.ui.listClasses:ScrollPane/private:canScrollByDirection' isStatic='false' isFinal='false' isOverride='false'  param_names='direction' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='cleanupListeners' fullname='qnx.ui.listClasses:ScrollPane/protected:cleanupListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='constrain' fullname='qnx.ui.listClasses:ScrollPane/private:constrain' isStatic='false' isFinal='false' isOverride='false'  param_names='val;min;max' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='qnx.ui.listClasses:ScrollPane/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='disposeScrollManagers' fullname='qnx.ui.listClasses:ScrollPane/private:disposeScrollManagers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawBorder' fullname='qnx.ui.listClasses:ScrollPane/private:drawBorder' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawScrollbars' fullname='qnx.ui.listClasses:ScrollPane/protected:drawScrollbars' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.listClasses:ScrollPane/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getScrollContent' fullname='qnx.ui.listClasses:ScrollPane/getScrollContent' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		 Returns the scroll pane content as a <code>DisplayObject</code>.
		 
		 ]]></description>
<return><![CDATA[A <code>DisplayObject</code> containing the scroll pane content.
		 ]]></return>
<see><![CDATA[flash.display.DisplayObject
		 ]]></see>
</method>
<method name='getShowHorizontalScroll' fullname='qnx.ui.listClasses:ScrollPane/private:getShowHorizontalScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getShowVerticalScroll' fullname='qnx.ui.listClasses:ScrollPane/private:getShowVerticalScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hideScrollbars' fullname='qnx.ui.listClasses:ScrollPane/protected:hideScrollbars' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:ScrollPane/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeScroller' fullname='qnx.ui.listClasses:ScrollPane/protected:initializeScroller' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mouseDown' fullname='qnx.ui.listClasses:ScrollPane/private:mouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mouseUp' fullname='qnx.ui.listClasses:ScrollPane/private:mouseUp' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.listClasses:ScrollPane/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.ui.listClasses:ScrollPane/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionScrollBar' fullname='qnx.ui.listClasses:ScrollPane/protected:positionScrollBar' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeItem' fullname='qnx.ui.listClasses:ScrollPane/protected:removeItem' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeScrollContent' fullname='qnx.ui.listClasses:ScrollPane/removeScrollContent' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		 Removes all content from the scroll pane. 
		 
		 
		 ]]></description>
<return><![CDATA[void
		 ]]></return>
<see><![CDATA[flash.display.DisplayObject
		 ]]></see>
</method>
<method name='scrollBegin' fullname='qnx.ui.listClasses:ScrollPane/protected:scrollBegin' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollEnd' fullname='qnx.ui.listClasses:ScrollPane/protected:scrollEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollUpdate' fullname='qnx.ui.listClasses:ScrollPane/protected:scrollUpdate' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showScrollbars' fullname='qnx.ui.listClasses:ScrollPane/protected:showScrollbars' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stageMouseDown' fullname='qnx.ui.listClasses:ScrollPane/private:stageMouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='trackMouse' fullname='qnx.ui.listClasses:ScrollPane/private:trackMouse' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updatePane' fullname='qnx.ui.listClasses:ScrollPane/private:updatePane' isStatic='false' isFinal='false' isOverride='false'  param_names='animate' param_types='Boolean' param_defaults='false' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='update' fullname='qnx.ui.listClasses:ScrollPane/update' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Refreshes the scroll pane properties based on the width and height of the content. 
		<p>
		Call this function if the content of the <code>ScrollPane</code> changes during run time. 
		</p>
		]]></description>
</method>
<method name='borderColor' fullname='qnx.ui.listClasses:ScrollPane/borderColor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enabled' fullname='qnx.ui.listClasses:ScrollPane/enabled/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollDirection' fullname='qnx.ui.listClasses:ScrollPane/scrollDirection/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Sets a <code>String</code> representing the scroll direction of the scroll pane. 
		 <p>
		 The <code>direction</code> argument can be <code>NONE</code> (unable to scroll), <code>BOTH</code> (can scroll in both directions if content exceeds pane 
		 height or width), <code>HORIZONTAL</code> (can only scroll horizontally) and <code>VERTICAL</code> (only on the vertical).
		 </p>			
		 ]]></description>
<see><![CDATA[qnx.ui.listClasses.ScrollDirection
		 ]]></see>
</method>
<method name='scrollX' fullname='qnx.ui.listClasses:ScrollPane/scrollX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Sets the x position of the content item given a pixel value. 
		 
		 <p>
		  The minimum value is 0 pixels, and the maximum value is equal to the width of the content item.
		 </p>
		  ]]></description>
<param><![CDATA[xpos The x value of the scroll pane content.
		 ]]></param>
</method>
<method name='scrollY' fullname='qnx.ui.listClasses:ScrollPane/scrollY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='borderColor' fullname='qnx.ui.listClasses:ScrollPane/borderColor/set' isStatic='false' isFinal='false' isOverride='false'  param_names='color' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enabled' fullname='qnx.ui.listClasses:ScrollPane/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='enable' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollDirection' fullname='qnx.ui.listClasses:ScrollPane/scrollDirection/set' isStatic='false' isFinal='false' isOverride='false'  param_names='direction' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets a <code>String</code> representing the scroll direction of the scroll pane. 
		 <p>
		 The <code>direction</code> argument can be <code>NONE</code> (unable to scroll ), <code>BOTH</code> (can scroll in both directions if content exceeds pane 
		 height or width), <code>HORIZONTAL</code> (can only scroll horizontally) and <code>VERTICAL</code> (only on the vertical).
		 </p>		
		 ]]></description>
<see><![CDATA[qnx.ui.listClasses.ScrollDirection
		 ]]></see>
</method>
<method name='scrollX' fullname='qnx.ui.listClasses:ScrollPane/scrollX/set' isStatic='false' isFinal='false' isOverride='false'  param_names='xpos' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollY' fullname='qnx.ui.listClasses:ScrollPane/scrollY/set' isStatic='false' isFinal='false' isOverride='false'  param_names='ypos' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the y position of the content item given a pixel value.
		 <p>
		  The minimum value is 0 pixels, and the maximum value is equal to the height of the content item.
		 </p>
		  ]]></description>
<param><![CDATA[ypos The y value of the scroll pane content.
		 ]]></param>
</method>
<field name='BEGIN_HORIZONTAL' fullname='qnx.ui.listClasses:ScrollPane/private:BEGIN_HORIZONTAL' type='String' isStatic='true' isConst='true' defaultValue='begin_horizontal' >
</field>
<field name='BEGIN_VERTICAL' fullname='qnx.ui.listClasses:ScrollPane/private:BEGIN_VERTICAL' type='String' isStatic='true' isConst='true' defaultValue='begin_vertical' >
</field>
<field name='END_HORIZONTAL' fullname='qnx.ui.listClasses:ScrollPane/private:END_HORIZONTAL' type='String' isStatic='true' isConst='true' defaultValue='end_horizontal' >
</field>
<field name='END_VERTICAL' fullname='qnx.ui.listClasses:ScrollPane/private:END_VERTICAL' type='String' isStatic='true' isConst='true' defaultValue='end_vertical' >
</field>
<field name='MOVEMENT_THRESHOLD' fullname='qnx.ui.listClasses:ScrollPane/private:MOVEMENT_THRESHOLD' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='MOVE_HORIZONTAL' fullname='qnx.ui.listClasses:ScrollPane/private:MOVE_HORIZONTAL' type='String' isStatic='true' isConst='true' defaultValue='move_horizontal' >
</field>
<field name='MOVE_VERTICAL' fullname='qnx.ui.listClasses:ScrollPane/private:MOVE_VERTICAL' type='String' isStatic='true' isConst='true' defaultValue='move_vertical' >
</field>
<field name='__borderColor' fullname='qnx.ui.listClasses:ScrollPane/private:__borderColor' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__direction' fullname='qnx.ui.listClasses:ScrollPane/private:__direction' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__firstTouchPosition' fullname='qnx.ui.listClasses:ScrollPane/private:__firstTouchPosition' type='flash.geom:Point' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__horizontalScrollMgr' fullname='qnx.ui.listClasses:ScrollPane/protected:__horizontalScrollMgr' type='qnx.ui.tween:Scroller' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__scrollDictionary' fullname='qnx.ui.listClasses:ScrollPane/private:__scrollDictionary' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__scrollX' fullname='qnx.ui.listClasses:ScrollPane/private:__scrollX' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__scrollY' fullname='qnx.ui.listClasses:ScrollPane/private:__scrollY' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__verticalScrollMgr' fullname='qnx.ui.listClasses:ScrollPane/protected:__verticalScrollMgr' type='qnx.ui.tween:Scroller' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='containerMask' fullname='qnx.ui.listClasses:ScrollPane/private:containerMask' type='flash.display:Shape' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='container' fullname='qnx.ui.listClasses:ScrollPane/protected:container' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='horizontalScrollBar' fullname='qnx.ui.listClasses:ScrollPane/protected:horizontalScrollBar' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='verticalScrollBar' fullname='qnx.ui.listClasses:ScrollPane/protected:verticalScrollBar' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='List' fullname='qnx.ui.listClasses:List' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\List.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.core:UIComponent' interfaces='qnx.ui.data:IDataViewer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	The <code>List</code> class enables you to display cells in a vertical or horizontal list.
	<p>
	Each cell has a default look and feel, however you can create a custom cell renderer by calling the <code>setSkin</code> method.
	Your custom cell renderers must implement the <i>ICellRenderer</i> interface.
	Each cell is laid out by using the <code>rowHeight</code> property for vertical lists, and <code>columnWidth</code> for horizontal lists. 
	If your custom cells are larger than the default value, you should set the <code>rowHeight</code> or the <code>columnWidth</code>property to the desired size.
	</p>
	<p>
	In the following example, a new list is instantiated, initialized, and added to the list of displayed components:
	<listing>
	var firstindex:int = 0;
    
    list = new List();
	list.width = 124;
	list.height = 600;
	list.dataProvider = dp;
	list.selectionMode = ListSelectionMode.SINGLE;
	list.allowDeselect = false;
	list.selectedIndex = firstindex;
	addChild( list );
	</listing>
	</p>
	<p>
	The list is configured such that only a single cell can be selected at any one time, and once a cell is selected it can not be unselected.
	</p>
	]]></description>
<see><![CDATA[#setSkin()
	]]></see>
<see><![CDATA[#rowHeight
	]]></see>
<see><![CDATA[#columnWidth
	]]></see>
<metadata>
	<Event owner='qnx.ui.listClasses:List' name='change' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when a change has occurred in the <code>DataProvider</code>.
	 
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:List' name='scrollEnd' type='qnx.ui.events.ScrollEvent' >
<description><![CDATA[
	 
	 
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.ScrollEvent.SCROLL_END
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:List' name='scrollMove' type='qnx.ui.events.ScrollEvent' >
<description><![CDATA[
	 
	 
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.ScrollEvent.SCROLL_MOVE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:List' name='scrollBegin' type='qnx.ui.events.ScrollEvent' >
<description><![CDATA[
	 
	 
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.ScrollEvent.SCROLL_BEGIN
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:List' name='listItemClicked' type='qnx.ui.events.ListEvent' >
<description><![CDATA[
	 	 
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.ListEvent.ITEM_CLICKED
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='List' fullname='qnx.ui.listClasses:List/List' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Instantiates a <code>List</code>.
		 ]]></description>
</method>
<method name='addCellToList' fullname='qnx.ui.listClasses:List/protected:addCellToList' isStatic='false' isFinal='false' isOverride='false'  param_names='adjacentcell;dataindex;addAbove' param_types='qnx.ui.listClasses:ICellRenderer;int;Boolean' param_defaults='undefined;undefined;true' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addCellsToEnd' fullname='qnx.ui.listClasses:List/protected:addCellsToEnd' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addCellsToStart' fullname='qnx.ui.listClasses:List/protected:addCellsToStart' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addItemAt' fullname='qnx.ui.listClasses:List/addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an item to the list at the specified index.
		
		]]></description>
<param><![CDATA[item The item to add.
		]]></param>
<param><![CDATA[index The offset value at which to add the item.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of 
		the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='addItem' fullname='qnx.ui.listClasses:List/addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Appends an item to the end of the list.
		
		]]></description>
<param><![CDATA[item The item to add.
		
		]]></param>
</method>
<method name='addItemsAt' fullname='qnx.ui.listClasses:List/addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an array item at the specified index.
		
		]]></description>
<param><![CDATA[items The array of items to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='addVisible' fullname='qnx.ui.listClasses:List/protected:addVisible' isStatic='false' isFinal='false' isOverride='false'  param_names='cell;prepend' param_types='qnx.ui.listClasses:ICellRenderer;Boolean' param_defaults='undefined;false' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='adjustScrollbar' fullname='qnx.ui.listClasses:List/private:adjustScrollbar' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='canScroll' fullname='qnx.ui.listClasses:List/private:canScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='checkEndForUnused' fullname='qnx.ui.listClasses:List/protected:checkEndForUnused' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='checkStartForUnused' fullname='qnx.ui.listClasses:List/protected:checkStartForUnused' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='cleanupListeners' fullname='qnx.ui.listClasses:List/protected:cleanupListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clearVisible' fullname='qnx.ui.listClasses:List/protected:clearVisible' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='constrain' fullname='qnx.ui.listClasses:List/protected:constrain' isStatic='false' isFinal='false' isOverride='false'  param_names='val;min;max' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeAddItem' fullname='qnx.ui.listClasses:List/protected:dataChangeAddItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeRemoveItem' fullname='qnx.ui.listClasses:List/protected:dataChangeRemoveItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeReplaceItem' fullname='qnx.ui.listClasses:List/protected:dataChangeReplaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateAll' fullname='qnx.ui.listClasses:List/protected:dataChangeUpdateAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateItem' fullname='qnx.ui.listClasses:List/protected:dataChangeUpdateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateRemoveAll' fullname='qnx.ui.listClasses:List/protected:dataChangeUpdateRemoveAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='deselectCurrentCell' fullname='qnx.ui.listClasses:List/protected:deselectCurrentCell' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='qnx.ui.listClasses:List/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		  ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatchListEvent' fullname='qnx.ui.listClasses:List/protected:dispatchListEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;cell' param_types='String;qnx.ui.listClasses:ICellRenderer' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawScroller' fullname='qnx.ui.listClasses:List/private:drawScroller' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.listClasses:List/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableCells' fullname='qnx.ui.listClasses:List/private:enableCells' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='findICellRenderer' fullname='qnx.ui.listClasses:List/private:findICellRenderer' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getCellAtIndex' fullname='qnx.ui.listClasses:List/protected:getCellAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getCell' fullname='qnx.ui.listClasses:List/protected:getCell' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getFooterViewMeasurement' fullname='qnx.ui.listClasses:List/protected:getFooterViewMeasurement' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getIsCellVisibleAtIndex' fullname='qnx.ui.listClasses:List/getIsCellVisibleAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Returns a <code>Boolean</code> indicating whether or not a cell at a given index is visible in the virtual area.
		 <p>
		 This includes cells which are not fully in the view of the list.
		 </p>
		 ]]></description>
<param><![CDATA[index The index of the cell to check against.
		 ]]></param>
<return><![CDATA[Boolean A <code>Boolean</code> indicating whether or not the cell is visible.
		 ]]></return>
</method>
<method name='getItemAt' fullname='qnx.ui.listClasses:List/getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		Returns the item in the <code>DataProvider</code> at the specified index.
		
		]]></description>
<param><![CDATA[index The index of the item to return.
		
		]]></param>
<return><![CDATA[The item at the specified index.
		
		]]></return>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the 
		<code>DataProvider</code>.
		]]></throws>
</method>
<method name='getItemPosition' fullname='qnx.ui.listClasses:List/protected:getItemPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='Number'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getItemSize' fullname='qnx.ui.listClasses:List/protected:getItemSize' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getLastVisibleItem' fullname='qnx.ui.listClasses:List/getLastVisibleItem' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[
		 Returns the last visible item in the view port area as defined by the width and height
		 ]]></description>
<see><![CDATA[qnx.ui.listClasses.ICellRenderer;
		 ]]></see>
<returns><![CDATA[ICellRenderer 
		 ]]></returns>
</method>
<method name='getMousePosition' fullname='qnx.ui.listClasses:List/private:getMousePosition' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getRowMeasurement' fullname='qnx.ui.listClasses:List/protected:getRowMeasurement' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getSize' fullname='qnx.ui.listClasses:List/protected:getSize' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalCellMeasurement' fullname='qnx.ui.listClasses:List/protected:getTotalCellMeasurement' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalMeasurement' fullname='qnx.ui.listClasses:List/protected:getTotalMeasurement' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getVisibleMeasurement' fullname='qnx.ui.listClasses:List/protected:getVisibleMeasurement' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleCellDownSelection' fullname='qnx.ui.listClasses:List/private:handleCellDownSelection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='handleMultipleSelection' fullname='qnx.ui.listClasses:List/protected:handleMultipleSelection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleSingleSelection' fullname='qnx.ui.listClasses:List/protected:handleSingleSelection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hideScrollbars' fullname='qnx.ui.listClasses:List/private:hideScrollbars' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:List/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeScroller' fullname='qnx.ui.listClasses:List/protected:initializeScroller' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isCellVisibleAtIndex' fullname='qnx.ui.listClasses:List/protected:isCellVisibleAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isVerticalScrolling' fullname='qnx.ui.listClasses:List/protected:isVerticalScrolling' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		  ]]></description>
<return><![CDATA[Returns true if the list supports vertical scrolling, otherwise false. 
		 ]]></return>
<private><![CDATA[]]></private>
</method>
<method name='layoutCells' fullname='qnx.ui.listClasses:List/protected:layoutCells' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex' param_types='int' param_defaults='-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mouseDown' fullname='qnx.ui.listClasses:List/protected:mouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mouseUp' fullname='qnx.ui.listClasses:List/protected:mouseUp' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.listClasses:List/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onDataChange' fullname='qnx.ui.listClasses:List/protected:onDataChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:DataProviderEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.ui.listClasses:List/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionScrollBar' fullname='qnx.ui.listClasses:List/protected:positionScrollBar' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeAll' fullname='qnx.ui.listClasses:List/removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Removes all the items from the list.
		]]></description>
</method>
<method name='removeAndAddCellToPool' fullname='qnx.ui.listClasses:List/protected:removeAndAddCellToPool' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeItemAt' fullname='qnx.ui.listClasses:List/removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes an item from list at the specified index.
		
		]]></description>
<param><![CDATA[index The index of the object to remove.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the 
		<code>DataProvider</code>.
		]]></throws>
</method>
<method name='removeItem' fullname='qnx.ui.listClasses:List/removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes a given item from the list.
		
		]]></description>
<param><![CDATA[item The item to remove.
		
		]]></param>
<throws><![CDATA[ArgumentError thrown if the item could not be found in the current <code>DataProvider</code>.
		]]></throws>
</method>
<method name='removeVisibleByIndex' fullname='qnx.ui.listClasses:List/protected:removeVisibleByIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='marked' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='replaceItemAt' fullname='qnx.ui.listClasses:List/replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Replaces the item in the list at the specified index with a new item.
		
		]]></description>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[index The index of the item to replace.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the 
		<code>DataProvider</code>.
		]]></throws>
</method>
<method name='replaceItem' fullname='qnx.ui.listClasses:List/replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item, given the new item object and the old item.
		 
		 ]]></description>
<param><![CDATA[item The new item object data.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='resetCellParent' fullname='qnx.ui.listClasses:List/private:resetCellParent' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='resetCellState' fullname='qnx.ui.listClasses:List/protected:resetCellState' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollBegin' fullname='qnx.ui.listClasses:List/private:scrollBegin' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollEnd' fullname='qnx.ui.listClasses:List/private:scrollEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollIndexVisible' fullname='qnx.ui.listClasses:List/scrollIndexVisible' isStatic='false' isFinal='false' isOverride='false'  param_names='index;seconds' param_types='int;Number' param_defaults='undefined;1' result_type='void'>
<description><![CDATA[
		 Scrolls a given item into view, given an index and an animation duration (in seconds).
		 
		 <p>
		This function checks to see if the cell is currently visible before scrolling it into view. 
		If the cell is not fully visible within the viewport of the list, it will scroll it into the viewport.
		If the cell is fully visible in the viewport, the list will scroll.
		</p>
		]]></description>
<param><![CDATA[index The index of the cell to animate into view.
		]]></param>
<param><![CDATA[seconds The duration of the animation in seconds. Default is 1 second.
		]]></param>
</method>
<method name='scrollToIndex' fullname='qnx.ui.listClasses:List/scrollToIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;seconds' param_types='int;Number' param_defaults='undefined;1' result_type='void'>
<description><![CDATA[
		Animates the cell at the specified index into view.
		
		]]></description>
<param><![CDATA[index The index of the cell to animate into view.
		]]></param>
<param><![CDATA[seconds The duration of the animation in seconds. Default is 1 second.
		]]></param>
</method>
<method name='scrollUpdate' fullname='qnx.ui.listClasses:List/private:scrollUpdate' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setCellSelected' fullname='qnx.ui.listClasses:List/protected:setCellSelected' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setDisabledCellState' fullname='qnx.ui.listClasses:List/protected:setDisabledCellState' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setEnabledCellState' fullname='qnx.ui.listClasses:List/protected:setEnabledCellState' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setFooterViewPosition' fullname='qnx.ui.listClasses:List/protected:setFooterViewPosition' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setFooterView' fullname='qnx.ui.listClasses:List/protected:setFooterView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setItemPosition' fullname='qnx.ui.listClasses:List/protected:setItemPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='item;pos' param_types='flash.display:DisplayObject;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[item The item to position.
		 ]]></param>
<param><![CDATA[pos The position of the item.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedIndices' fullname='qnx.ui.listClasses:List/protected:setSelectedIndices' isStatic='false' isFinal='false' isOverride='false'  param_names='indicies' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSkin' fullname='qnx.ui.listClasses:List/setSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Sets the cell renderer to use to populate the list. 
		<p>
		You can pass in a qualified class name <code>String</code>, or the actual class.
		In either instance the class that is used must implement the <i>ICellRenderer</i> interface.
		</p>
		
		<p> In the following example, the <code>setSkin</code> method is called using the class reference "MyCellRenderer".
		</p>
		<listing>
		mylist = new List();
		
		mylist.rowHeight = 43;
		mylist.selectionMode = ListSelectionMode.SINGLE;
		mylist.dataProvider = new DataProvider( dp );
		mylist.width = 320;
		mylist.height = 400;
		
		mylist.setSkin(MyCellRenderer);
		</listing>
		
		]]></description>
<default><![CDATA[AlternatingCellRenderer
		]]></default>
</method>
<method name='showScrollbars' fullname='qnx.ui.listClasses:List/private:showScrollbars' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sizeCell' fullname='qnx.ui.listClasses:List/protected:sizeCell' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stageMouseDown' fullname='qnx.ui.listClasses:List/private:stageMouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='trackMouse' fullname='qnx.ui.listClasses:List/private:trackMouse' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateItemAt' fullname='qnx.ui.listClasses:List/updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Updates the item in the list at the specified index, given the new item.
		
		]]></description>
<param><![CDATA[item The new, or updated, item.
		]]></param>
<param><![CDATA[index The index of the item to update.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the 
		<code>DataProvider</code>.
		]]></throws>
</method>
<method name='updateItem' fullname='qnx.ui.listClasses:List/updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='value;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates an item in the list, given the new item and the item to update.
		 
		 ]]></description>
<param><![CDATA[value The new, or updated item.
		 ]]></param>
<param><![CDATA[oldObject The item to update.
		 ]]></param>
</method>
<method name='updateList' fullname='qnx.ui.listClasses:List/protected:updateList' isStatic='false' isFinal='false' isOverride='false'  param_names='reset' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='allowDeselect' fullname='qnx.ui.listClasses:List/allowDeselect/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Determines if a selected cell in the list can be deselected when pressed.
		 
		 ]]></description>
<default><![CDATA[true - By default, cells can be deselected
		 ]]></default>
</method>
<method name='columnWidth' fullname='qnx.ui.listClasses:List/columnWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the width of each column in the list.
		<p>
		This value is used in order to lay out the cells in a horizontally list.
		This value is passed to each renderer, to ensure that a renderer does not draw beyond this value.
		</p>
		]]></description>
<default><![CDATA[0
		]]></default>
</method>
<method name='dataProvider' fullname='qnx.ui.listClasses:List/dataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		
		Gets or sets the <code>DataProvider</code> instance for the list.
		<p>
		When the data is updated, an <code>Event.CHANGE</code> is dispatched from the list.
		If set to null, the list creates an empty <code>DataProvider</code> instance and all current items are removed.
		You can also use the DataProvider API in order to modify the data in the list.
		</p>
		]]></description>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<see><![CDATA[#removeItem()
		]]></see>
<see><![CDATA[#removeItemAt()
		]]></see>
<see><![CDATA[#getItemAt()
		]]></see>
<see><![CDATA[#replaceItemAt()
		]]></see>
<see><![CDATA[qnx.ui.data.DataProvider
		]]></see>
</method>
<method name='firstVisibleIndex' fullname='qnx.ui.listClasses:List/protected:firstVisibleIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='firstVisibleItem' fullname='qnx.ui.listClasses:List/firstVisibleItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[
		 Returns the first visible item in the view port area as defined by the width and height
		 ]]></description>
<see><![CDATA[qnx.ui.listClasses.ICellRenderer;
		 ]]></see>
<returns><![CDATA[ICellRenderer 
		 ]]></returns>
</method>
<method name='firstVisible' fullname='qnx.ui.listClasses:List/protected:firstVisible/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='footerView' fullname='qnx.ui.listClasses:List/footerView/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		Gets or sets the footer view.
		<p>
		A footer view is any display object that can be anchored to the last item in the list.
		You can add a footer view to add items to a list, such as a "Load More" button at the end of a list.
		The footer view has an x position value set to 0, can be any <code>DisplayObject</code>, and does not have to implement the 
		<i>ICellRenderer</i> interface.Because the footer view can be any <code>DisplayObject</code>, the list does not 
		resize it to match the dimensions of the list.
		</p>
		<p>
		To remove the current footer view from the list, set the <code>footerView</code> property to null.
		</p>
		]]></description>
</method>
<method name='lastVisible' fullname='qnx.ui.listClasses:List/protected:lastVisible/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rowHeight' fullname='qnx.ui.listClasses:List/rowHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the height of each row in the list.
		<p>
		This value is used in order to lay out the cells in a vertical list.
		This value is passed to each renderer, to ensure that a renderer does not draw beyond this value.
		</p>
		]]></description>
<default><![CDATA[48
		]]></default>
</method>
<method name='scrollBarAlpha' fullname='qnx.ui.listClasses:List/scrollBarAlpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		  Gets or sets the opacity value for the scroll bar on the list. 
		  <p> 
		  When the list is pressed it reveals the scroll bar. The scroll bar alpha 
		  determines the opacity of the scroll bar when it is revealed.
		  </p>
		  ]]></description>
<default><![CDATA[1 
		 ]]></default>
</method>
<method name='scrollBarColor' fullname='qnx.ui.listClasses:List/scrollBarColor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		  Gets or sets the color of the scroll bar.
		 
		 
		  ]]></description>
<default><![CDATA[0x888899 (gray)
		  ]]></default>
<see><![CDATA[#scrollBarAlpha
		 ]]></see>
</method>
<method name='scrollBarOffset' fullname='qnx.ui.listClasses:List/scrollBarOffset/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets the x or y postion of the scrollbar. 
		 <p>
		 The offset value is relative to the <code>scrollDirection</code> property.
		 </p>
		  ]]></description>
<default><![CDATA[10
		  ]]></default>
<see><![CDATA[#scrollDirection
		 
		 ]]></see>
</method>
<method name='scrollDirection' fullname='qnx.ui.listClasses:List/scrollDirection/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets and sets the scroll direction of the list.
		 <p>
		  There are two directions a list can be scrolled. These are defined in <code>ScrollDirection</code> class:
		 <ul>
		 <li><code>ScrollDirection.HORIZONTAL</code> - indicates horizontal scrolling</li>
		 <li><code>ScrollDirection.VERTICAL</code> - indicates vertical scrolling</li>
		 </ul>
		 </p>
		  ]]></description>
<default><![CDATA[ScrollDirection.VERTICAL 
		 
		 ]]></default>
<see><![CDATA[qnx.ui.listClasses.ScrollDirection
		  ]]></see>
</method>
<method name='scrollable' fullname='qnx.ui.listClasses:List/scrollable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets a value that determines whether a list can be scrolled.
		<p>
		When set to <i>true</i> the list can be scrolled. When set to <i>false</i> the list will not scroll, 
		however cells can still be selected.
		</p>
		]]></description>
</method>
<method name='selectedIndex' fullname='qnx.ui.listClasses:List/selectedIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the index of the currently selected item in a single-selection list.
		<p>
		In a single-selection list, only one item can be selected at a time.
		A value of -1 indicates that no item is selected. If multiple selections are made, this value is equal 
		to the index of the item that was selected last in the 
		group of selected items.
		</p>
		<p>
		When the selection is changed programmatically, the item at the specified index replaces the current selection. A change event object is not dispatched. 
		</p>
		]]></description>
</method>
<method name='selectedIndices' fullname='qnx.ui.listClasses:List/selectedIndices/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		Gets or sets the selected cells at the specified indices in a multi-selectable list.
		]]></description>
</method>
<method name='selectedItem' fullname='qnx.ui.listClasses:List/selectedItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		Gets or sets the currently selected item in a single-selectable list.
		
		]]></description>
<see><![CDATA[#selectedIndex
		]]></see>
<throws><![CDATA[ArgumentError thrown if the specified item is not currently in the <code>dataProvider</code> of the list.
		]]></throws>
</method>
<method name='selectedItems' fullname='qnx.ui.listClasses:List/selectedItems/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		Gets or sets the group of selected items (<code>selectedItems</code>) in a multi-selectable list.
			
		]]></description>
<throws><![CDATA[ArgumentError thrown if one of the specified item is not currently in the <code>dataProvider</code> of the list.
		]]></throws>
</method>
<method name='selectionMode' fullname='qnx.ui.listClasses:List/selectionMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets a value that determines whether or not selection mode is enabled.
		 <p>
		 Selection mode determines how a user interacts with a list by controlling how items are selected
		 and unselected when clicked. For example, depending on the selection mode a user can select multiple items or
		 only a single item at any one time.  
		 </p>
		 <p>
		  Valid values are:
		 <ul>
		 <li><code>ListSelectionMode.NONE</code> - indicates that cells are not selected when pressed</li>
		 <li><code>ListSelectionMode.SINGLE</code> - indicates that only a single cell can be selected at a given time</li>
		 <li><code>ListSelectionMode.MULTIPLE</code> - indicates that multiple cells can be selected at any given time</li>
		 </ul>
		 </p>
		 <p>
		  If the <code>selectionMode</code> property is changed at runtime, the current list selection will be cleared.
		 </p>
		  ]]></description>
<default><![CDATA[<code>ListSelectionMode.NONE</code>. Default is no selection
		 ]]></default>
<see><![CDATA[qnx.ui.listClasses.ListSelectionMode
		  ]]></see>
</method>
<method name='allowDeselect' fullname='qnx.ui.listClasses:List/allowDeselect/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='columnWidth' fullname='qnx.ui.listClasses:List/columnWidth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='columnWidth' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='dataProvider' fullname='qnx.ui.listClasses:List/dataProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='dp' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
</method>
<method name='enabled' fullname='qnx.ui.listClasses:List/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='footerView' fullname='qnx.ui.listClasses:List/footerView/set' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
</method>
<method name='rowHeight' fullname='qnx.ui.listClasses:List/rowHeight/set' isStatic='false' isFinal='false' isOverride='false'  param_names='rowHeight' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollBarAlpha' fullname='qnx.ui.listClasses:List/scrollBarAlpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='alpha' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollBarColor' fullname='qnx.ui.listClasses:List/scrollBarColor/set' isStatic='false' isFinal='false' isOverride='false'  param_names='color' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollBarOffset' fullname='qnx.ui.listClasses:List/scrollBarOffset/set' isStatic='false' isFinal='false' isOverride='false'  param_names='offset' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollDirection' fullname='qnx.ui.listClasses:List/scrollDirection/set' isStatic='false' isFinal='false' isOverride='false'  param_names='direction' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		  Scroll direction determines if the list can be scrolled horizontally or vertically. 
		  <p>
		  There are two directions a list can be scrolled and these are defined in ScrollDirection class:
		  <code>ScrollDirection.HORIZONTAL</code> - horizontally scrolling or <code>ScrollDirection.VERTICAL</code> - vertically scrolling.
		  </p>
		  ]]></description>
<default><![CDATA[ScrollDirection.VERTICAL 
		 ]]></default>
<see><![CDATA[qnx.ui.listClasses.ScrollDirection
		  ]]></see>
</method>
<method name='scrollable' fullname='qnx.ui.listClasses:List/scrollable/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='selectedIndex' fullname='qnx.ui.listClasses:List/selectedIndex/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selectedIndices' fullname='qnx.ui.listClasses:List/selectedIndices/set' isStatic='false' isFinal='false' isOverride='false'  param_names='indicies' param_types='Array' param_defaults='undefined' result_type='void'>
</method>
<method name='selectedItem' fullname='qnx.ui.listClasses:List/selectedItem/set' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='selectedItems' fullname='qnx.ui.listClasses:List/selectedItems/set' isStatic='false' isFinal='false' isOverride='false'  param_names='items' param_types='Array' param_defaults='undefined' result_type='void'>
</method>
<method name='selectionMode' fullname='qnx.ui.listClasses:List/selectionMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='mode' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<field name='__allowDeselect' fullname='qnx.ui.listClasses:List/protected:__allowDeselect' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__dataProvider' fullname='qnx.ui.listClasses:List/protected:__dataProvider' type='qnx.ui.data:IDataProvider' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultSkin' fullname='qnx.ui.listClasses:List/protected:__defaultSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__drawnItems' fullname='qnx.ui.listClasses:List/protected:__drawnItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__firstTouchPosition' fullname='qnx.ui.listClasses:List/private:__firstTouchPosition' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__footerView' fullname='qnx.ui.listClasses:List/protected:__footerView' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__lastTouch' fullname='qnx.ui.listClasses:List/private:__lastTouch' type='int' isStatic='false' isConst='false' >
</field>
<field name='__pool' fullname='qnx.ui.listClasses:List/protected:__pool' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__scrollMgr' fullname='qnx.ui.listClasses:List/protected:__scrollMgr' type='qnx.ui.tween:IScroller' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__scrollable' fullname='qnx.ui.listClasses:List/protected:__scrollable' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedIndices' fullname='qnx.ui.listClasses:List/protected:__selectedIndices' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedItems' fullname='qnx.ui.listClasses:List/protected:__selectedItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectionMode' fullname='qnx.ui.listClasses:List/protected:__selectionMode' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_columnWidth' fullname='qnx.ui.listClasses:List/protected:_columnWidth' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_direction' fullname='qnx.ui.listClasses:List/protected:_direction' type='String' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_rowHeight' fullname='qnx.ui.listClasses:List/protected:_rowHeight' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_scrollBarAlpha' fullname='qnx.ui.listClasses:List/protected:_scrollBarAlpha' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_scrollBarColor' fullname='qnx.ui.listClasses:List/protected:_scrollBarColor' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_scrollBarOffset' fullname='qnx.ui.listClasses:List/protected:_scrollBarOffset' type='int' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='cellDownCounter' fullname='qnx.ui.listClasses:List/private:cellDownCounter' type='int' isStatic='false' isConst='false' >
</field>
<field name='cellDown' fullname='qnx.ui.listClasses:List/protected:cellDown' type='qnx.ui.listClasses:ICellRenderer' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='cellParent' fullname='qnx.ui.listClasses:List/cellParent' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='containerMask' fullname='qnx.ui.listClasses:List/protected:containerMask' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='scrollBar' fullname='qnx.ui.listClasses:List/protected:scrollBar' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='DropDown' fullname='qnx.ui.listClasses:DropDown' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\DropDown.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.core:UIComponent' interfaces='qnx.ui.data:IDataViewer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  
	 The <code>DropDown</code> class provides drop down list functionality. When the user clicks on the down arrow, the list
	 expands to provide options that a user can select from.
	 
	 <p>
	 The following example shows a <code>DropDown</code> being instantiantated and initialized:
	 </p>
	 <listing>
	 var dp:DropDown= new DropDown();
	 dp.rowHeight = 45;
	 dp.rowCount=3;
	 addChild(dp);
	 dp.width = 250;
	 	
	 var dpp:Array=[];
	 for(var i:int = 0;i&lt;10;i++)
	 {
	   dpp.push({label:"test label"+i.toString()});
	 }
	 dp.dataProvider = new DataProvider(dpp); 
	 </listing>
	 <p>
	 An array of labels is created and set as the <code>DataProvider</code> for the <code>DropDown</code>.
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.DropDownCellRenderer
	 
	 ]]></see>
<metadata>
	<Event owner='qnx.ui.listClasses:DropDown' name='open' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the drop down list is opened.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.OPEN
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:DropDown' name='close' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the drop down list is closed.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CLOSE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:DropDown' name='select' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when an item in the drop down list is fired.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.SELECT
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='DropDown' fullname='qnx.ui.listClasses:DropDown/DropDown' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>DropDown</code> instance.
		 ]]></description>
</method>
<method name='addItemAt' fullname='qnx.ui.listClasses:DropDown/addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an item to the list at the specified index.
		
		]]></description>
<param><![CDATA[item The item to add.
		]]></param>
<param><![CDATA[index The index, or offset at which to add the item.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='addItem' fullname='qnx.ui.listClasses:DropDown/addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Adds an item to the list.
		
		]]></description>
<param><![CDATA[item The item to add.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='addItemsAt' fullname='qnx.ui.listClasses:DropDown/addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an array item at the specified index.
		
		]]></description>
<param><![CDATA[items The array of items to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='addListeners' fullname='qnx.ui.listClasses:DropDown/private:addListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='constrain' fullname='qnx.ui.listClasses:DropDown/protected:constrain' isStatic='false' isFinal='false' isOverride='false'  param_names='val;min;max' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='qnx.ui.listClasses:DropDown/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.listClasses:DropDown/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getItemAt' fullname='qnx.ui.listClasses:DropDown/getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		Returns the item in the <code>DataProvider</code> at the specified index.
		
		]]></description>
<param><![CDATA[index The index of the item to return.
		
		]]></param>
<return><![CDATA[The item at the specified index.
		
		]]></return>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='handleButtonClicked' fullname='qnx.ui.listClasses:DropDown/private:handleButtonClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleListItemClicked' fullname='qnx.ui.listClasses:DropDown/private:handleListItemClicked' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.events:ListEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleStageClick' fullname='qnx.ui.listClasses:DropDown/private:handleStageClick' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:DropDown/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.listClasses:DropDown/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onDataChange' fullname='qnx.ui.listClasses:DropDown/protected:onDataChange' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.events:DataProviderEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionDropDown' fullname='qnx.ui.listClasses:DropDown/private:positionDropDown' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeAll' fullname='qnx.ui.listClasses:DropDown/removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Removes all the items from the list.
		]]></description>
</method>
<method name='removeItemAt' fullname='qnx.ui.listClasses:DropDown/removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes an item from list at the specified index.
		
		]]></description>
<param><![CDATA[index The index of the object to remove.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='removeItem' fullname='qnx.ui.listClasses:DropDown/removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes the item from the list.
		
		]]></description>
<param><![CDATA[item The item to remove.
		
		]]></param>
<throws><![CDATA[ArgumentError thrown if the item could not be found in the current <code>DataProvider</code>.
		]]></throws>
</method>
<method name='removeListeners' fullname='qnx.ui.listClasses:DropDown/private:removeListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='replaceItemAt' fullname='qnx.ui.listClasses:DropDown/replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Replaces the item in the list at the specified index, given the new item.
		
		]]></description>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[index The index of the item to replace.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='replaceItem' fullname='qnx.ui.listClasses:DropDown/replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item, given the new item object and the old item.
		 
		 ]]></description>
<param><![CDATA[item The new item object data.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='setBackgroundSkin' fullname='qnx.ui.listClasses:DropDown/setBackgroundSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the skin for the list background.
		 
		 ]]></description>
<param><![CDATA[skin The list background skin.
		 ]]></param>
</method>
<method name='setButtonDefaults' fullname='qnx.ui.listClasses:DropDown/protected:setButtonDefaults' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setButtonPrompt' fullname='qnx.ui.listClasses:DropDown/protected:setButtonPrompt' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setButtonSkin' fullname='qnx.ui.listClasses:DropDown/setButtonSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the skin for the drop down button.
		 
		 ]]></description>
<param><![CDATA[skin The button skin.
		 ]]></param>
</method>
<method name='setListDefaults' fullname='qnx.ui.listClasses:DropDown/protected:setListDefaults' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setListSkin' fullname='qnx.ui.listClasses:DropDown/setListSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the Cell Renderer for the List 
		 
		 ]]></description>
<param><![CDATA[skin The cell renderer
		 ]]></param>
</method>
<method name='setSelectedIndex' fullname='qnx.ui.listClasses:DropDown/protected:setSelectedIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[index The index of the item to select.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedItem' fullname='qnx.ui.listClasses:DropDown/protected:setSelectedItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showList' fullname='qnx.ui.listClasses:DropDown/protected:showList' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateDropDown' fullname='qnx.ui.listClasses:DropDown/private:updateDropDown' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateItemAt' fullname='qnx.ui.listClasses:DropDown/updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Updates the item in the list at the specified index.
		
		]]></description>
<param><![CDATA[item The updated item.
		]]></param>
<param><![CDATA[index The index of the item to update.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the <code>DataProvider</code>.
		]]></throws>
</method>
<method name='updateItem' fullname='qnx.ui.listClasses:DropDown/updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='value;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the item in the list.
		 
		 ]]></description>
<param><![CDATA[value The item to update.
		 ]]></param>
<param><![CDATA[The old item, or the item to update.
		 ]]></param>
</method>
<method name='updateList' fullname='qnx.ui.listClasses:DropDown/protected:updateList' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataProvider' fullname='qnx.ui.listClasses:DropDown/dataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		 Gets and sets the <code>dataProvider</code> for the list.
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider
		 ]]></see>
</method>
<method name='dropDownParent' fullname='qnx.ui.listClasses:DropDown/dropDownParent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 Gets the property that determines the parent for the drop down list
		 ]]></description>
<return><![CDATA[DisplayObjectContainer
		 ]]></return>
</method>
<method name='height' fullname='qnx.ui.listClasses:DropDown/height/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='prompt' fullname='qnx.ui.listClasses:DropDown/prompt/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rowCount' fullname='qnx.ui.listClasses:DropDown/rowCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets the number of visible rows in the drop down list.
		 
		 ]]></description>
<param><![CDATA[int The number of rows to show in the list. 
		 ]]></param>
<return><![CDATA[A <code>int</code> representing the number of rows to show in the list.
 		 ]]></return>
</method>
<method name='rowHeight' fullname='qnx.ui.listClasses:DropDown/rowHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selectedIndex' fullname='qnx.ui.listClasses:DropDown/selectedIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets the index of the currently selected item in the drop down.
		  
		 ]]></description>
</method>
<method name='selectedItem' fullname='qnx.ui.listClasses:DropDown/selectedItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Gets or sets the currently selected item. 
		  
		 ]]></description>
</method>
<method name='showListAbove' fullname='qnx.ui.listClasses:DropDown/showListAbove/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Gets the property that determines if the drop down list should show above or below the button
		 ]]></description>
<return><![CDATA[Boolean
		 
		 ]]></return>
</method>
<method name='dataProvider' fullname='qnx.ui.listClasses:DropDown/dataProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='dp' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dropDownParent' fullname='qnx.ui.listClasses:DropDown/dropDownParent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_parent' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets the property that determines the parent for the drop down list
		 ]]></description>
<default><![CDATA[The drop down component itself
		 ]]></default>
<param><![CDATA[DisplayObjectContainer
		 ]]></param>
</method>
<method name='enabled' fullname='qnx.ui.listClasses:DropDown/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='prompt' fullname='qnx.ui.listClasses:DropDown/prompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets or sets the prompt for the combox box.
		 <p>
		 The prompt is shown as the default message in the combo box when the 
		 <code>selectedIndex</code> value is set to <code>-1</code>. For example, the <code>String</code> "Select an item" prompts the user to select an item from the
		 drop down list. If no prompt is set, the <code>selectedIndex</code> value is set to 0 and the first item in the <code>DataProvider</code> is displayed in the 
		 drop down.
		 </p>
		 ]]></description>
<param><![CDATA[str A <code>String</code> containing a prompt message.
		 ]]></param>
<return><![CDATA[A <code>String</code> representing the prompt message.
 		 ]]></return>
</method>
<method name='rowCount' fullname='qnx.ui.listClasses:DropDown/rowCount/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_rowCount' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rowHeight' fullname='qnx.ui.listClasses:DropDown/rowHeight/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets and sets the row height for the drop down list.
		 
		 <p>
		 The row height represents ths height of each item in the list in pixels.
		 </p>
		 ]]></description>
</method>
<method name='selectedIndex' fullname='qnx.ui.listClasses:DropDown/selectedIndex/set' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selectedItem' fullname='qnx.ui.listClasses:DropDown/selectedItem/set' isStatic='false' isFinal='false' isOverride='false'  param_names='selectedItem_' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='showListAbove' fullname='qnx.ui.listClasses:DropDown/showListAbove/set' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the property that determines if the drop down list should show above or below the button
		 ]]></description>
<default><![CDATA[false
		 ]]></default>
<param><![CDATA[bool 
		 ]]></param>
</method>
<field name='BG_DEPTH' fullname='qnx.ui.listClasses:DropDown/private:BG_DEPTH' type='Number' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__buttonHeight' fullname='qnx.ui.listClasses:DropDown/private:__buttonHeight' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__buttonSkin' fullname='qnx.ui.listClasses:DropDown/private:__buttonSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__button' fullname='qnx.ui.listClasses:DropDown/protected:__button' type='qnx.ui.buttons:DropDownButton' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__dataProvider' fullname='qnx.ui.listClasses:DropDown/private:__dataProvider' type='qnx.ui.data:IDataProvider' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__dropDownParent' fullname='qnx.ui.listClasses:DropDown/private:__dropDownParent' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__isShowing' fullname='qnx.ui.listClasses:DropDown/private:__isShowing' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__listBackgroundSkin' fullname='qnx.ui.listClasses:DropDown/private:__listBackgroundSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__listBackground' fullname='qnx.ui.listClasses:DropDown/private:__listBackground' type='qnx.ui.skins:ISkin' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__listSkin' fullname='qnx.ui.listClasses:DropDown/private:__listSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__list' fullname='qnx.ui.listClasses:DropDown/private:__list' type='qnx.ui.listClasses:List' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__prompt' fullname='qnx.ui.listClasses:DropDown/private:__prompt' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__rowCount' fullname='qnx.ui.listClasses:DropDown/private:__rowCount' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__rowHeight' fullname='qnx.ui.listClasses:DropDown/private:__rowHeight' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedIndex' fullname='qnx.ui.listClasses:DropDown/private:__selectedIndex' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedItem' fullname='qnx.ui.listClasses:DropDown/private:__selectedItem' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__showAbove' fullname='qnx.ui.listClasses:DropDown/private:__showAbove' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='RoundList' fullname='qnx.ui.listClasses:RoundList' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\RoundList.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:List' interfaces='qnx.ui.data:IDataViewer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	The <code>RoundList</code> class allows you to display cells in a scrolling vertical list. The round list has no scroll bar, and continues to 
	scroll from the beginning once the final cell has been reached. 
	<p>
	In the following example, a <code>RoundList</code> class is instantiated and initialized:
	</p>
	<listing>
	for( var i:int = 0; i&lt;50; i++ )
	{
	   var obj:Object = {};
	   obj.label = "category " + i;
	   dp.push( obj );
	  }
		
	singleList = new RoundList();
	singleList.rowHeight = 43;
	singleList.selectionMode = ListSelectionMode.SINGLE;
	singleList.dataProvider = new DataProvider( dp );
	singleList.width = 320;
	singleList.height = 400;
	singleList.x = 5;
	singleList.y = 100;
	singleList.addEventListener( ListEvent.ITEM_CLICKED, itemClicked );
	addChild( singleList );
	</listing>
	
	<p>The round list takes an array of numbered categories, and an event listener is added to listen
	for item clicks.  
	</p>
	
	]]></description>
<metadata>
	<Event owner='qnx.ui.listClasses:RoundList' name='change' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the <code>DataProvider</code> has changed.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.listClasses:RoundList' name='listItemClicked' type='qnx.ui.events.ListEvent' >
<description><![CDATA[
	 Dispatched when a list item is clicked.
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.ListEvent.ITEM_CLICKED
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='RoundList' fullname='qnx.ui.listClasses:RoundList/RoundList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
	 Creates a <code>RoundList</code> instance.
	 ]]></description>
</method>
<method name='addCellToList' fullname='qnx.ui.listClasses:RoundList/protected:addCellToList' isStatic='false' isFinal='false' isOverride='true'  param_names='adjacentcell;dataindex;addAbove' param_types='qnx.ui.listClasses:ICellRenderer;int;Boolean' param_defaults='undefined;undefined;true' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[adjacentcell The ICellRender class representing the adjacent cell.
		 ]]></param>
<param><![CDATA[dataindex An integer representing the index within the list. 
		 ]]></param>
<return><![CDATA[The cell that was added to the list.
		 ]]></return>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='qnx.ui.listClasses:RoundList/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.listClasses:RoundList/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableCells' fullname='qnx.ui.listClasses:RoundList/protected:enableCells' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[bool true to set cells to enabled, false to disable cells.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='getCellIndex' fullname='qnx.ui.listClasses:RoundList/protected:getCellIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='selectedItem' param_types='Object' param_defaults='undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getSectionDP' fullname='qnx.ui.listClasses:RoundList/private:getSectionDP' isStatic='false' isFinal='false' isOverride='false'  param_names='startIndex;endIndex' param_types='int;int' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleSingleSelection' fullname='qnx.ui.listClasses:RoundList/protected:handleSingleSelection' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:RoundList/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeScroller' fullname='qnx.ui.listClasses:RoundList/protected:initializeScroller' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutCells' fullname='qnx.ui.listClasses:RoundList/protected:layoutCells' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex' param_types='int' param_defaults='-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mouseDown' fullname='qnx.ui.listClasses:RoundList/protected:mouseDown' isStatic='false' isFinal='false' isOverride='true'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onScrollComplete' fullname='qnx.ui.listClasses:RoundList/protected:onScrollComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='resetData' fullname='qnx.ui.listClasses:RoundList/private:resetData' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='reshuffleArray' fullname='qnx.ui.listClasses:RoundList/private:reshuffleArray' isStatic='false' isFinal='false' isOverride='false'  param_names='fromIndex' param_types='int' param_defaults='-1' result_type='void'>
</method>
<method name='scrollEnd' fullname='qnx.ui.listClasses:RoundList/private:scrollEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollToIndex' fullname='qnx.ui.listClasses:RoundList/scrollToIndex' isStatic='false' isFinal='false' isOverride='true'  param_names='index;seconds' param_types='int;Number' param_defaults='undefined;1' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[index The index, or offset to scroll to.
		 ]]></param>
<param><![CDATA[seconds The length of the scroll animation, in seconds. Default value is 1 second.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='scrollUpdate' fullname='qnx.ui.listClasses:RoundList/private:scrollUpdate' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:ScrollEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setCellSelected' fullname='qnx.ui.listClasses:RoundList/protected:setCellSelected' isStatic='false' isFinal='false' isOverride='true'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedIndex' fullname='qnx.ui.listClasses:RoundList/private:setSelectedIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedIndices' fullname='qnx.ui.listClasses:RoundList/protected:setSelectedIndices' isStatic='false' isFinal='false' isOverride='true'  param_names='indicies' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='trackMouse' fullname='qnx.ui.listClasses:RoundList/private:trackMouse' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateList' fullname='qnx.ui.listClasses:RoundList/protected:updateList' isStatic='false' isFinal='false' isOverride='true'  param_names='reset' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enabled' fullname='qnx.ui.listClasses:RoundList/enabled/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 	]]></description>
<private><![CDATA[]]></private>
</method>
<method name='topOffSet' fullname='qnx.ui.listClasses:RoundList/topOffSet/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets the offset number, relative to the top of the viewport.
		 
		 <p>
		 A basic list has no offset. Because a round list often focuses on the cell in the center of the view, 
		 an offset is required to position the cell properly. This offset is relative to the top of the viewport.
		 </p>
		 ]]></description>
</method>
<method name='topOffSet' fullname='qnx.ui.listClasses:RoundList/topOffSet/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<field name='__firstTouchY' fullname='qnx.ui.listClasses:RoundList/private:__firstTouchY' type='int' isStatic='false' isConst='false' >
</field>
<field name='__forceRedraw' fullname='qnx.ui.listClasses:RoundList/private:__forceRedraw' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__maskRect' fullname='qnx.ui.listClasses:RoundList/private:__maskRect' type='flash.geom:Rectangle' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__middleSelectionRect' fullname='qnx.ui.listClasses:RoundList/private:__middleSelectionRect' type='flash.geom:Rectangle' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedItem' fullname='qnx.ui.listClasses:RoundList/private:__selectedItem' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__shuffledArray' fullname='qnx.ui.listClasses:RoundList/protected:__shuffledArray' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__startIndex' fullname='qnx.ui.listClasses:RoundList/private:__startIndex' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__topOffSet' fullname='qnx.ui.listClasses:RoundList/private:__topOffSet' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CellRenderer' fullname='qnx.ui.listClasses:CellRenderer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\CellRenderer.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.core:SkinnableComponent' interfaces='qnx.ui.listClasses:ICellRenderer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>CellRenderer</code> class provides the base functionality for cell renderers in any of the list classes, such as <code>List</code>, 
	 <code>TileList</code>, <code>SectionList</code>, and <code>SectionTileList</code>.
	 <p>
	 The CellRenderer class consists of a skin and a label.
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.AlternatingCellRenderer
	 ]]></see>
</classRec>
<method name='CellRenderer' fullname='qnx.ui.listClasses:CellRenderer/CellRenderer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>CellRenderer</code> instance.
		 ]]></description>
</method>
<method name='drawLabel' fullname='qnx.ui.listClasses:CellRenderer/protected:drawLabel' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.listClasses:CellRenderer/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTextFormatForState' fullname='qnx.ui.listClasses:CellRenderer/getTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='flash.text:TextFormat'>
<description><![CDATA[
		Returns the <code>TextFormat</code> object for a specified state.
		
		]]></description>
<param><![CDATA[state The state (as a String) for the <code>TextFormat</code> object to return.
		
		]]></param>
<return><![CDATA[The <code>TextFormat</code> object for the specified state.
		
		]]></return>
<see><![CDATA[#setTextFormatForState()
		]]></see>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
</method>
<method name='init' fullname='qnx.ui.listClasses:CellRenderer/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeTextFormatForState' fullname='qnx.ui.listClasses:CellRenderer/protected:initializeTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
<see><![CDATA[#setTextFormatForState()
		]]></see>
<private><![CDATA[]]></private>
</method>
<method name='setLabelState' fullname='qnx.ui.listClasses:CellRenderer/protected:setLabelState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setLabel' fullname='qnx.ui.listClasses:CellRenderer/protected:setLabel' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSkin' fullname='qnx.ui.listClasses:CellRenderer/setSkin' isStatic='false' isFinal='false' isOverride='true'  param_names='cellSkin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<param><![CDATA[cellSkin The skin to set.
		]]></param>
<see><![CDATA[qnx.ui.skins.ISkin
		]]></see>
<see><![CDATA[qnx.ui.skins.CellRendererSkin
		]]></see>
<private><![CDATA[]]></private>
</method>
<method name='setState' fullname='qnx.ui.listClasses:CellRenderer/protected:setState' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setTextFormatForState' fullname='qnx.ui.listClasses:CellRenderer/setTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='format;state' param_types='flash.text:TextFormat;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Sets the <code>TextFormat</code> object for the label of a given state.
		
		<p>Valid states are <code>SkinStates.UP</code>, <code>SkinStates.DOWN</code>, 
		<code>SkinStates.SELECTED</code>, <code>SkinStates.DISABLED</code>.
		</p>
		]]></description>
<param><![CDATA[format The <code>TextFormat</code> to set.
		]]></param>
<param><![CDATA[state The state for which to change the <code>TextFormat</code>.
		]]></param>
<see><![CDATA[#getTextFormatForState()
		]]></see>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
</method>
<method name='column' fullname='qnx.ui.listClasses:CellRenderer/column/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		
		Gets or sets the column of the cell.
		]]></description>
</method>
<method name='data' fullname='qnx.ui.listClasses:CellRenderer/data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Gets or sets the data object for the cell renderer. 
		 <p>
		 The <code>set</code> method expects the data object to contain a non-null <code>label</code> property. This property is
		 used to set an internal <code>label</code> textfield.
		 </p>
		 ]]></description>
</method>
<method name='index' fullname='qnx.ui.listClasses:CellRenderer/index/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		
		Gets or sets the index of the cell.
		]]></description>
</method>
<method name='isHeader' fullname='qnx.ui.listClasses:CellRenderer/isHeader/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Returns a Boolean indicating whether or not the cell is a header.
		 
		 ]]></description>
<return><![CDATA[<i>True</i> if the cell is a header, otherwise <i>false</i>.
		 ]]></return>
</method>
<method name='row' fullname='qnx.ui.listClasses:CellRenderer/row/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		
		Gets or sets the row of the cell.
		]]></description>
</method>
<method name='section' fullname='qnx.ui.listClasses:CellRenderer/section/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		
		Gets or sets the section of the cell.
		]]></description>
</method>
<method name='state' fullname='qnx.ui.listClasses:CellRenderer/state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		
		Gets or sets the state of the cell.
		]]></description>
</method>
<method name='column' fullname='qnx.ui.listClasses:CellRenderer/column/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='data' fullname='qnx.ui.listClasses:CellRenderer/data/set' isStatic='false' isFinal='false' isOverride='false'  param_names='data' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='index' fullname='qnx.ui.listClasses:CellRenderer/index/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='row' fullname='qnx.ui.listClasses:CellRenderer/row/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='section' fullname='qnx.ui.listClasses:CellRenderer/section/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='state' fullname='qnx.ui.listClasses:CellRenderer/state/set' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='__column' fullname='qnx.ui.listClasses:CellRenderer/private:__column' type='int' isStatic='false' isConst='false' >
</field>
<field name='__index' fullname='qnx.ui.listClasses:CellRenderer/private:__index' type='int' isStatic='false' isConst='false' >
</field>
<field name='__isHeader' fullname='qnx.ui.listClasses:CellRenderer/protected:__isHeader' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__row' fullname='qnx.ui.listClasses:CellRenderer/private:__row' type='int' isStatic='false' isConst='false' >
</field>
<field name='__section' fullname='qnx.ui.listClasses:CellRenderer/private:__section' type='int' isStatic='false' isConst='false' >
</field>
<field name='__textFormats' fullname='qnx.ui.listClasses:CellRenderer/protected:__textFormats' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_data' fullname='qnx.ui.listClasses:CellRenderer/private:_data' type='Object' isStatic='false' isConst='false' >
</field>
<field name='label' fullname='qnx.ui.listClasses:CellRenderer/label' type='qnx.ui.text:Label' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='TileList' fullname='qnx.ui.listClasses:TileList' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\TileList.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:List' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>TileList</code> class can be used to display a list of cells in a grid format.

	 <p>

	When the list is set to scroll vertically, the <code>columnCount</code> property is used to layout the grid. 

	You can use the <code>rowHeight</code> and <code>columnWidth</code> height properties to set the dimensions of each cell.

	You can use the <code>cellPadding</code> property to set the padding between each cell.

	</p>

	]]></description>
</classRec>
<method name='TileList' fullname='qnx.ui.listClasses:TileList/TileList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates a new <code>TileList</code> instance.

		 ]]></description>
</method>
<method name='addCellsToEnd' fullname='qnx.ui.listClasses:TileList/protected:addCellsToEnd' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addCellsToStart' fullname='qnx.ui.listClasses:TileList/protected:addCellsToStart' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addRowToEnd' fullname='qnx.ui.listClasses:TileList/private:addRowToEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='lastcell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addRowToStart' fullname='qnx.ui.listClasses:TileList/private:addRowToStart' isStatic='false' isFinal='false' isOverride='false'  param_names='firstcell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeAddItem' fullname='qnx.ui.listClasses:TileList/protected:dataChangeAddItem' isStatic='false' isFinal='false' isOverride='true'  param_names='startindex' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getFooterViewMeasurement' fullname='qnx.ui.listClasses:TileList/protected:getFooterViewMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getSegmentCount' fullname='qnx.ui.listClasses:TileList/protected:getSegmentCount' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalCellMeasurement' fullname='qnx.ui.listClasses:TileList/protected:getTotalCellMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalMeasurement' fullname='qnx.ui.listClasses:TileList/protected:getTotalMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ 

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getVisibleMeasurement' fullname='qnx.ui.listClasses:TileList/protected:getVisibleMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:TileList/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutCells' fullname='qnx.ui.listClasses:TileList/protected:layoutCells' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex' param_types='int' param_defaults='-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollToIndex' fullname='qnx.ui.listClasses:TileList/scrollToIndex' isStatic='false' isFinal='false' isOverride='true'  param_names='index;seconds' param_types='int;Number' param_defaults='undefined;1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setFooterViewPosition' fullname='qnx.ui.listClasses:TileList/protected:setFooterViewPosition' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sizeCell' fullname='qnx.ui.listClasses:TileList/protected:sizeCell' isStatic='false' isFinal='false' isOverride='true'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='cellPadding' fullname='qnx.ui.listClasses:TileList/cellPadding/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		Gets or sets the amount of padding between cells (in pixels) in the grid.

		

		]]></description>
<default><![CDATA[10

		]]></default>
</method>
<method name='columnCount' fullname='qnx.ui.listClasses:TileList/columnCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		Gets or sets the number of columns in the grid.

		

		]]></description>
<default><![CDATA[1

		]]></default>
</method>
<method name='rowCount' fullname='qnx.ui.listClasses:TileList/rowCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[

		 Gets or sets the number of rows in the list.

		 ]]></description>
</method>
<method name='cellPadding' fullname='qnx.ui.listClasses:TileList/cellPadding/set' isStatic='false' isFinal='false' isOverride='false'  param_names='cellPadding' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='columnCount' fullname='qnx.ui.listClasses:TileList/columnCount/set' isStatic='false' isFinal='false' isOverride='false'  param_names='columnCount' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rowCount' fullname='qnx.ui.listClasses:TileList/rowCount/set' isStatic='false' isFinal='false' isOverride='false'  param_names='columnCount' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_cellPadding' fullname='qnx.ui.listClasses:TileList/private:_cellPadding' type='int' isStatic='false' isConst='false' >
</field>
<field name='_columnCount' fullname='qnx.ui.listClasses:TileList/private:_columnCount' type='int' isStatic='false' isConst='false' >
</field>
<field name='_rowCount' fullname='qnx.ui.listClasses:TileList/private:_rowCount' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='SectionList' fullname='qnx.ui.listClasses:SectionList' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\SectionList.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:List' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>SectionList</code> class allows you to group sections of data in a list. 
	 <p>
	 For example, you can group a list of contacts based on the letters in the alphabet.
	 You can provide custom headers for your list by calling the <code>setHeader</code> method. Your header must set the <i>ICellRenderer.isHeader</i> to <code>true</code>.
	 </p>
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.SectionTileList
	 ]]></see>
</classRec>
<method name='SectionList' fullname='qnx.ui.listClasses:SectionList/SectionList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		Creates a new <code>SectionList</code> instance. 
		]]></description>
</method>
<method name='addCellToList' fullname='qnx.ui.listClasses:SectionList/protected:addCellToList' isStatic='false' isFinal='false' isOverride='true'  param_names='adjacentcell;dataindex;addAbove' param_types='qnx.ui.listClasses:ICellRenderer;int;Boolean' param_defaults='undefined;undefined;true' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addCell' fullname='qnx.ui.listClasses:SectionList/protected:addCell' isStatic='false' isFinal='false' isOverride='false'  param_names='section;index;addAbove' param_types='int;int;Boolean' param_defaults='undefined;undefined;undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addChildToIndexAt' fullname='qnx.ui.listClasses:SectionList/addChildToIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index;childindex' param_types='Object;int;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an item to a section at a specified index.
		
		]]></description>
<param><![CDATA[item The item to add.
		]]></param>
<param><![CDATA[index The index of the section for which to add the item.
		]]></param>
<param><![CDATA[childindex The index of the item in the section.
		
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the data provider.
		]]></throws>
<throws><![CDATA[RangeError thrown if the specified childindex is less than 0 or greater than or equal to the length of the section.
		]]></throws>
</method>
<method name='addChildToIndex' fullname='qnx.ui.listClasses:SectionList/addChildToIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Appends an item to a section in the list, given the index of the section.
		
		]]></description>
<param><![CDATA[item The item to add to the list.
		]]></param>
<param><![CDATA[index The index of the section for which to add the item.
		]]></param>
</method>
<method name='addHeader' fullname='qnx.ui.listClasses:SectionList/protected:addHeader' isStatic='false' isFinal='false' isOverride='false'  param_names='section;addAbove' param_types='int;Boolean' param_defaults='undefined;undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childIsVisible' fullname='qnx.ui.listClasses:SectionList/protected:childIsVisible' isStatic='false' isFinal='false' isOverride='false'  param_names='section;child' param_types='int;int' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clearVisible' fullname='qnx.ui.listClasses:SectionList/protected:clearVisible' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeAddItem' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeAddItem' isStatic='false' isFinal='false' isOverride='true'  param_names='startindex' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeRemoveItem' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeRemoveItem' isStatic='false' isFinal='false' isOverride='true'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeReplaceItem' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeReplaceItem' isStatic='false' isFinal='false' isOverride='true'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateAddChild' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateAddChild' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;childindex' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateChildren' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateChildren' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateItem' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateItem' isStatic='false' isFinal='false' isOverride='true'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateRemoveAll' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateRemoveAll' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateRemoveChild' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateRemoveChild' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;childindex;items' param_types='int;int;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateRemoveChildren' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateRemoveChildren' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;startIndex;endIndex;items' param_types='int;int;int;Array' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateReplaceChild' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateReplaceChild' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;childindex;items' param_types='int;int;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateUpdateChild' fullname='qnx.ui.listClasses:SectionList/protected:dataChangeUpdateUpdateChild' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;childindex;items' param_types='int;int;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='deselectCurrentCell' fullname='qnx.ui.listClasses:SectionList/protected:deselectCurrentCell' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getCellPosition' fullname='qnx.ui.listClasses:SectionList/protected:getCellPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='section;index' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getChildCountInSection' fullname='qnx.ui.listClasses:SectionList/private:getChildCountInSection' isStatic='false' isFinal='false' isOverride='false'  param_names='section' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getChildData' fullname='qnx.ui.listClasses:SectionList/protected:getChildData' isStatic='false' isFinal='false' isOverride='false'  param_names='section;index' param_types='int;int' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getHeaderMeasurement' fullname='qnx.ui.listClasses:SectionList/protected:getHeaderMeasurement' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getHeaderPosition' fullname='qnx.ui.listClasses:SectionList/protected:getHeaderPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='section' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getHeader' fullname='qnx.ui.listClasses:SectionList/protected:getHeader' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalCellMeasurement' fullname='qnx.ui.listClasses:SectionList/protected:getTotalCellMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalMeasurement' fullname='qnx.ui.listClasses:SectionList/protected:getTotalMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getVisibleMeasurement' fullname='qnx.ui.listClasses:SectionList/protected:getVisibleMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleMultipleSelection' fullname='qnx.ui.listClasses:SectionList/protected:handleMultipleSelection' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleSingleSelection' fullname='qnx.ui.listClasses:SectionList/protected:handleSingleSelection' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:SectionList/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutCells' fullname='qnx.ui.listClasses:SectionList/protected:layoutCells' isStatic='false' isFinal='false' isOverride='true'  param_names='fromIndex' param_types='int' param_defaults='-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutSectionCells' fullname='qnx.ui.listClasses:SectionList/protected:layoutSectionCells' isStatic='false' isFinal='false' isOverride='false'  param_names='fromSection;fromIndex' param_types='int;int' param_defaults='-1;-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onDataChange' fullname='qnx.ui.listClasses:SectionList/protected:onDataChange' isStatic='false' isFinal='false' isOverride='true'  param_names='event' param_types='qnx.ui.events:DataProviderEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionCell' fullname='qnx.ui.listClasses:SectionList/protected:positionCell' isStatic='false' isFinal='false' isOverride='false'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionHeader' fullname='qnx.ui.listClasses:SectionList/protected:positionHeader' isStatic='false' isFinal='false' isOverride='false'  param_names='header' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='redrawCellsFromFirstVisible' fullname='qnx.ui.listClasses:SectionList/private:redrawCellsFromFirstVisible' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeAllChildrenFromIndex' fullname='qnx.ui.listClasses:SectionList/removeAllChildrenFromIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes all items from a section at the specified index.
		
		]]></description>
<param><![CDATA[index The index of the section.
		]]></param>
</method>
<method name='removeAndAddCellToPool' fullname='qnx.ui.listClasses:SectionList/protected:removeAndAddCellToPool' isStatic='false' isFinal='false' isOverride='true'  param_names='cell' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeChildFromIndexAt' fullname='qnx.ui.listClasses:SectionList/removeChildFromIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;childindex' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Removes an item from a section at a specified index.
		
		]]></description>
<param><![CDATA[index The index of the section.
		]]></param>
<param><![CDATA[childindex The index of the child in the section.
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the data provider.
		]]></throws>
<throws><![CDATA[RangeError thrown if the specified childindex is less than 0 or greater than or equal to the length of the section.
		]]></throws>
</method>
<method name='removeSelectedItems' fullname='qnx.ui.listClasses:SectionList/private:removeSelectedItems' isStatic='false' isFinal='false' isOverride='false'  param_names='items' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeVisibleByIndex' fullname='qnx.ui.listClasses:SectionList/protected:removeVisibleByIndex' isStatic='false' isFinal='false' isOverride='true'  param_names='marked' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='replaceChildInIndexAt' fullname='qnx.ui.listClasses:SectionList/replaceChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;childindex' param_types='int;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		Replaces an item in a section at a specified index.
		
		]]></description>
<param><![CDATA[index The index of the section.
		]]></param>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[childindex The index of the item in the section.
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the data provider.
		]]></throws>
<throws><![CDATA[RangeError thrown if the specified childindex is less than 0 or greater than or equal to the length of the section.
		]]></throws>
</method>
<method name='scrollIndexVisible' fullname='qnx.ui.listClasses:SectionList/scrollIndexVisible' isStatic='false' isFinal='false' isOverride='true'  param_names='index;seconds' param_types='int;Number' param_defaults='undefined;1' result_type='void'>
<description><![CDATA[ 
		 Scrolls a given item into view, given an index and an animation duration (in seconds).
		 
		 <p>
		This function checks to see if the cell is currently visible before scrolling it into view. 
		If the cell is not fully visible within the viewport of the list, it will scroll it into the viewport.
		If the cell is fully visible in the viewport, the list will scroll.
		</p>
		]]></description>
<param><![CDATA[index The index of the cell to animate into view.
		]]></param>
<param><![CDATA[seconds The duration of the animation in seconds. Default is 1 second.
		]]></param>
</method>
<method name='scrollToIndexInSection' fullname='qnx.ui.listClasses:SectionList/scrollToIndexInSection' isStatic='false' isFinal='false' isOverride='false'  param_names='section;index;seconds' param_types='int;int;int' param_defaults='undefined;undefined;1' result_type='void'>
<description><![CDATA[
		Animates the child of a section into view.
		
		]]></description>
<param><![CDATA[section The section that contains the child.
		]]></param>
<param><![CDATA[index The index of the child for which to animate to.
		]]></param>
<param><![CDATA[seconds The duration of the animation in seconds. Default is 1 second.
		]]></param>
</method>
<method name='scrollToIndex' fullname='qnx.ui.listClasses:SectionList/scrollToIndex' isStatic='false' isFinal='false' isOverride='true'  param_names='index;seconds' param_types='int;Number' param_defaults='undefined;1' result_type='void'>
<description><![CDATA[
		Animates the section into view so that the header is at the top of the list.
		
		]]></description>
<param><![CDATA[index The index of the section for which to animate.
		]]></param>
<param><![CDATA[seconds The duration of the animation in seconds. Default is 1 second.
		]]></param>
</method>
<method name='sectionIsVisible' fullname='qnx.ui.listClasses:SectionList/protected:sectionIsVisible' isStatic='false' isFinal='false' isOverride='false'  param_names='section' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setCellSelected' fullname='qnx.ui.listClasses:SectionList/protected:setCellSelected' isStatic='false' isFinal='false' isOverride='true'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setHeaderSkin' fullname='qnx.ui.listClasses:SectionList/setHeaderSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Sets the header renderer to be used in order to group sections in the list.
		<p>
		You can pass in a qualified class name <code>String</code>, as well as the actual class.
		In either instance the class that is used must implement the <i>ICellRenderer</i> interface.
		</p>
		]]></description>
<default><![CDATA[DefaultHeaderRenderer
		]]></default>
</method>
<method name='sizeHeader' fullname='qnx.ui.listClasses:SectionList/protected:sizeHeader' isStatic='false' isFinal='false' isOverride='false'  param_names='header' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateChildInIndexAt' fullname='qnx.ui.listClasses:SectionList/updateChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;childindex' param_types='int;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		Updates an item in a section at a specified index.
		
		]]></description>
<param><![CDATA[index The index of the section.
		]]></param>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[childindex The index of the item in the section.
		]]></param>
<throws><![CDATA[RangeError thrown if the specified index is less than 0 or greater than or equal to the length of the data provider.
		]]></throws>
<throws><![CDATA[RangeError thrown if the specified childindex is less than 0 or greater than or equal to the length of the section.
		]]></throws>
</method>
<method name='firstVisibleIndex' fullname='qnx.ui.listClasses:SectionList/protected:firstVisibleIndex/get' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='groupDataProvider' fullname='qnx.ui.listClasses:SectionList/protected:groupDataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:SectionDataProvider'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='headerHeight' fullname='qnx.ui.listClasses:SectionList/headerHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the height of the header (in pixels).
		
		]]></description>
<default><![CDATA[24
		]]></default>
</method>
<method name='headerWidth' fullname='qnx.ui.listClasses:SectionList/headerWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the width of the header (in pixels).
		
		]]></description>
<default><![CDATA[100
		]]></default>
</method>
<method name='selectedItem' fullname='qnx.ui.listClasses:SectionList/selectedItem/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Object'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataProvider' fullname='qnx.ui.listClasses:SectionList/dataProvider/set' isStatic='false' isFinal='false' isOverride='true'  param_names='dp' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Gets or sets the <code>DataProvider</code> for the list.
		<p>
		Unlike the <code>List</code> class, the <code>dataProvider</code> property for the <code>SectionList</code> class 
		must be of type <code>ISectionDataProvider</code> class.
		</p>
		]]></description>
</method>
<method name='headerHeight' fullname='qnx.ui.listClasses:SectionList/headerHeight/set' isStatic='false' isFinal='false' isOverride='false'  param_names='headerHeight' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='headerWidth' fullname='qnx.ui.listClasses:SectionList/headerWidth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='headerWidth' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selectedIndex' fullname='qnx.ui.listClasses:SectionList/selectedIndex/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Setting the <code>selectedIndex</code> property will have no effect on the list and will cause an error to be thrown.
		Use <code>selectedItem</code> instead.
		]]></description>
<throws><![CDATA[Error An error stating the selectedIndices cannot be set.
		]]></throws>
</method>
<method name='selectedIndices' fullname='qnx.ui.listClasses:SectionList/selectedIndices/set' isStatic='false' isFinal='false' isOverride='true'  param_names='indicies' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Setting the <code>selectedIndices</code> property will have no effect on the list and will cause an error to be thrown.
		Use <code>selectedItems</code> instead.
		]]></description>
<throws><![CDATA[Error An error stating the selectedIndices cannot be set.
		]]></throws>
</method>
<method name='selectedItem' fullname='qnx.ui.listClasses:SectionList/selectedItem/set' isStatic='false' isFinal='false' isOverride='true'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selectedItems' fullname='qnx.ui.listClasses:SectionList/selectedItems/set' isStatic='false' isFinal='false' isOverride='true'  param_names='items' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__headerHeight' fullname='qnx.ui.listClasses:SectionList/protected:__headerHeight' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__headerPool' fullname='qnx.ui.listClasses:SectionList/protected:__headerPool' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__headerSkin' fullname='qnx.ui.listClasses:SectionList/protected:__headerSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__headerWidth' fullname='qnx.ui.listClasses:SectionList/protected:__headerWidth' type='int' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SectionTileList' fullname='qnx.ui.listClasses:SectionTileList' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\SectionTileList.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:SectionList' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>SectionTileList</code> class allows you to group sections of data in a grid.
	 <p>
	When the list is set to scroll vertically, the <code>columnCount</code> property is used to layout the grid. 
	You can use the <code>rowHeight</code> and <code>columnWidth</code> height properties to set the dimensions of each cell.
	You can use the <code>cellPadding</code> property to set the padding between each cell.
	</p>
	]]></description>
</classRec>
<method name='SectionTileList' fullname='qnx.ui.listClasses:SectionTileList/SectionTileList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>SectionTileList</code> instance.
		 ]]></description>
</method>
<method name='addCell' fullname='qnx.ui.listClasses:SectionTileList/protected:addCell' isStatic='false' isFinal='false' isOverride='true'  param_names='section;index;addAbove' param_types='int;int;Boolean' param_defaults='undefined;undefined;undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addRowToBottom' fullname='qnx.ui.listClasses:SectionTileList/private:addRowToBottom' isStatic='false' isFinal='false' isOverride='false'  param_names='section;index' param_types='int;int' param_defaults='undefined;undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addRowToTop' fullname='qnx.ui.listClasses:SectionTileList/private:addRowToTop' isStatic='false' isFinal='false' isOverride='false'  param_names='section;index' param_types='int;int' param_defaults='undefined;undefined' result_type='qnx.ui.listClasses:ICellRenderer'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getCellPosition' fullname='qnx.ui.listClasses:SectionTileList/protected:getCellPosition' isStatic='false' isFinal='false' isOverride='true'  param_names='section;index' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getChildrenHeight' fullname='qnx.ui.listClasses:SectionTileList/protected:getChildrenHeight' isStatic='false' isFinal='false' isOverride='false'  param_names='section' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getHeaderPosition' fullname='qnx.ui.listClasses:SectionTileList/protected:getHeaderPosition' isStatic='false' isFinal='false' isOverride='true'  param_names='section' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTotalCellMeasurement' fullname='qnx.ui.listClasses:SectionTileList/protected:getTotalCellMeasurement' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.listClasses:SectionTileList/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutSectionCells' fullname='qnx.ui.listClasses:SectionTileList/protected:layoutSectionCells' isStatic='false' isFinal='false' isOverride='true'  param_names='fromSection;fromIndex' param_types='int;int' param_defaults='-1;-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionCell' fullname='qnx.ui.listClasses:SectionTileList/protected:positionCell' isStatic='false' isFinal='false' isOverride='true'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setFooterViewPosition' fullname='qnx.ui.listClasses:SectionTileList/protected:setFooterViewPosition' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sizeCell' fullname='qnx.ui.listClasses:SectionTileList/protected:sizeCell' isStatic='false' isFinal='false' isOverride='true'  param_names='cell' param_types='qnx.ui.listClasses:ICellRenderer' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='cellPadding' fullname='qnx.ui.listClasses:SectionTileList/cellPadding/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the amount of padding used between each cell in the grid.
		]]></description>
<default><![CDATA[10
		]]></default>
</method>
<method name='columnCount' fullname='qnx.ui.listClasses:SectionTileList/columnCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets the number of columns in the grid.
		]]></description>
<default><![CDATA[1
		]]></default>
</method>
<method name='scrollDirection' fullname='qnx.ui.listClasses:SectionTileList/scrollDirection/get' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
		 A section tile list can only be scrolled vertically and will return
		 a scroll direction of <code>VERTICAL</code>.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.listClasses.ScrollDirection
		 ]]></see>
</method>
<method name='cellPadding' fullname='qnx.ui.listClasses:SectionTileList/cellPadding/set' isStatic='false' isFinal='false' isOverride='false'  param_names='cellPadding' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='columnCount' fullname='qnx.ui.listClasses:SectionTileList/columnCount/set' isStatic='false' isFinal='false' isOverride='false'  param_names='columnCount' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_cellPadding' fullname='qnx.ui.listClasses:SectionTileList/private:_cellPadding' type='int' isStatic='false' isConst='false' >
</field>
<field name='_columnCount' fullname='qnx.ui.listClasses:SectionTileList/private:_columnCount' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='AlternatingCellRenderer' fullname='qnx.ui.listClasses:AlternatingCellRenderer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\AlternatingCellRenderer.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:CellRenderer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>AlternatingCellRenderer</code> class is the default cell renderer for the <code>List</code> class.
	 <p>
	 As the name suggests, <code>AlternatingCellRenderer</code> renders the cells in the list using alternating row colors, such that
	 each adjacent row uses a different color.
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.CellRenderer
	 ]]></see>
</classRec>
<method name='AlternatingCellRenderer' fullname='qnx.ui.listClasses:AlternatingCellRenderer/AlternatingCellRenderer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>AlternatingCellRenderer</code> instance.
		 ]]></description>
</method>
<method name='setState' fullname='qnx.ui.listClasses:AlternatingCellRenderer/protected:setState' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='index' fullname='qnx.ui.listClasses:AlternatingCellRenderer/index/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='DropDownCellRenderer' fullname='qnx.ui.listClasses:DropDownCellRenderer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\DropDownCellRenderer.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:CellRenderer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>DropDownCellRenderer</code> class is the cell renderer that is used
	 for the drop down list.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.DropDown
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.CellRenderer
	 ]]></see>
</classRec>
<method name='DropDownCellRenderer' fullname='qnx.ui.listClasses:DropDownCellRenderer/DropDownCellRenderer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>DropDownCellRenderer</code> instance.
		 ]]></description>
</method>
<method name='init' fullname='qnx.ui.listClasses:DropDownCellRenderer/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		  ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='SectionHeaderRenderer' fullname='qnx.ui.listClasses:SectionHeaderRenderer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\listClasses\SectionHeaderRenderer.as' namespace='qnx.ui.listClasses' access='public' baseclass='qnx.ui.listClasses:CellRenderer' interfaces='qnx.ui.listClasses:ICellRenderer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>SectionHeaderRenderer</code> class is the default header skin for the <code>SectionList</code> and <code>SectionTileList</code> classes.
	 <p>
	 You can create your own headers, but you must set the <i>ICellRenderer.isHeader</i> to <code>true</code>.
	 To set your own custom header, call the <code>setHeaderSkin</code> method in the <code>SectionList</code> and <code>SectionTileList</code> classes.
	 </p>
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.SectionList
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.SectionTileList
	 ]]></see>
</classRec>
<method name='SectionHeaderRenderer' fullname='qnx.ui.listClasses:SectionHeaderRenderer/SectionHeaderRenderer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>SectionHeaderRenderer</code> instance.
		 
		 ]]></description>
</method>
<method name='init' fullname='qnx.ui.listClasses:SectionHeaderRenderer/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='ContainerFlow' fullname='qnx.ui.core:ContainerFlow' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\ContainerFlow.as' namespace='qnx.ui.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>ContainerFlow</code> class defines the flow options for children within a Container.

	 

	 ]]></description>
<see><![CDATA[qnx.ui.core.Container#flow

	 ]]></see>
</classRec>
<field name='HORIZONTAL' fullname='qnx.ui.core:ContainerFlow/HORIZONTAL' type='String' isStatic='true' isConst='true' defaultValue='horizontal' >
<description><![CDATA[

		 A constant representing horizontal flow within the container.

		 

		 ]]></description>
</field>
<field name='VERTICAL' fullname='qnx.ui.core:ContainerFlow/VERTICAL' type='String' isStatic='true' isConst='true' defaultValue='vertical' >
<description><![CDATA[

		 A constant representing vertical flow within the container.

		 

		 ]]></description>
</field>
<classRec name='SizeMode' fullname='qnx.ui.core:SizeMode' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\SizeMode.as' namespace='qnx.ui.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>SizeMode</code> class contains the constant values that define the component sizing mode 
	 when being laid out in a container.
	 
	 ]]></description>
<see><![CDATA[Container
	 ]]></see>
<see><![CDATA[Containment
	 ]]></see>
</classRec>
<field name='BOTH' fullname='qnx.ui.core:SizeMode/BOTH' type='String' isStatic='true' isConst='true' defaultValue='both' >
<description><![CDATA[
		 A constant representing component sizing of the component in both the flow and opposite flow directions.
		 ]]></description>
</field>
<field name='FLOW' fullname='qnx.ui.core:SizeMode/FLOW' type='String' isStatic='true' isConst='true' defaultValue='flow' >
<description><![CDATA[
		 A constant representing component sizing only in the direction of the container's flow.
		 ]]></description>
</field>
<classRec name='ContainerAlign' fullname='qnx.ui.core:ContainerAlign' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\ContainerAlign.as' namespace='qnx.ui.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>ContainerAlign</code> class defines the align options for children within a <code>Container</code>.

	 Container align options are relative to the origin (upper left) and flow container

	 of the container.

	 

	 ]]></description>
<see><![CDATA[qnx.ui.core.Container#align

	 ]]></see>
</classRec>
<field name='FAR' fullname='qnx.ui.core:ContainerAlign/FAR' type='String' isStatic='true' isConst='true' defaultValue='far' >
<description><![CDATA[

		 A constant used to align the child component to the far side of the container area.

		 ]]></description>
</field>
<field name='MID' fullname='qnx.ui.core:ContainerAlign/MID' type='String' isStatic='true' isConst='true' defaultValue='mid' >
<description><![CDATA[

		 A constant used to align the child component to the center of the container area.

		 ]]></description>
</field>
<field name='NEAR' fullname='qnx.ui.core:ContainerAlign/NEAR' type='String' isStatic='true' isConst='true' defaultValue='near' >
<description><![CDATA[

		 A constant used to align the child component to the near side of the container area.

		 ]]></description>
</field>
<packageRec name='qnx.ui.core.null' fullname='qnx.ui.core.null'>
<description><![CDATA[
 
 ]]></description>
<date><![CDATA[July 18, 2010	
 ]]></date>
</packageRec>
<classRec name='Containment' fullname='qnx.ui.core:Containment' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\Containment.as' namespace='qnx.ui.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  The <code>Containment</code> class contains values that are used to define layout options within a container.
	 ]]></description>
<see><![CDATA[Container
	 ]]></see>
<see><![CDATA[IContainable
	 ]]></see>
</classRec>
<field name='BACKGROUND' fullname='qnx.ui.core:Containment/BACKGROUND' type='String' isStatic='true' isConst='true' defaultValue='background' >
<description><![CDATA[
		 A constant indicating that this object will be sized to fill the entire region of the container.
		 ]]></description>
</field>
<field name='CONTAINED' fullname='qnx.ui.core:Containment/CONTAINED' type='String' isStatic='true' isConst='true' defaultValue='contained' >
<description><![CDATA[
		 A constant indicating that this object will be contained in the free area of the container.
		 ]]></description>
</field>
<field name='DOCK_BOTTOM' fullname='qnx.ui.core:Containment/DOCK_BOTTOM' type='String' isStatic='true' isConst='true' defaultValue='bottom' >
<description><![CDATA[
		 A constant indicating that this object will be docked to the bottom side of the container.
		 ]]></description>
</field>
<field name='DOCK_LEFT' fullname='qnx.ui.core:Containment/DOCK_LEFT' type='String' isStatic='true' isConst='true' defaultValue='left' >
<description><![CDATA[
		 A constant indicating that this object will be docked to the left side of the container.
		 ]]></description>
</field>
<field name='DOCK_RIGHT' fullname='qnx.ui.core:Containment/DOCK_RIGHT' type='String' isStatic='true' isConst='true' defaultValue='right' >
<description><![CDATA[
		 A constant indicating that this object will be docked to the right side of the container.
		 ]]></description>
</field>
<field name='DOCK_TOP' fullname='qnx.ui.core:Containment/DOCK_TOP' type='String' isStatic='true' isConst='true' defaultValue='top' >
<description><![CDATA[
		 A constant indicating that this object will be docked to the top side of the container.
		 ]]></description>
</field>
<field name='UNCONTAINED' fullname='qnx.ui.core:Containment/UNCONTAINED' type='String' isStatic='true' isConst='true' defaultValue='uncontained' >
<description><![CDATA[
		 A constant indicating that this object will be ignored (not positioned during layout) by the container.
		 ]]></description>
</field>
<classRec name='SizeUnit' fullname='qnx.ui.core:SizeUnit' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\SizeUnit.as' namespace='qnx.ui.core' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>SizeUnit</code> class contains the constant values that define the unit of measure
	 for container sizing.
	 
	 ]]></description>
<see><![CDATA[Container
	 ]]></see>
<see><![CDATA[Containment
	 
	 
	 ]]></see>
</classRec>
<field name='PERCENT' fullname='qnx.ui.core:SizeUnit/PERCENT' type='String' isStatic='true' isConst='true' defaultValue='percent' >
<description><![CDATA[
		 A constant representing the unit of measure as a percentage.
		 ]]></description>
</field>
<field name='PIXELS' fullname='qnx.ui.core:SizeUnit/PIXELS' type='String' isStatic='true' isConst='true' defaultValue='pixels' >
<description><![CDATA[
		 A constant representing the pixel as the unit of measure.
		 ]]></description>
</field>
<packageRec name='qnx.ui.core.null' fullname='qnx.ui.core.null'>
<description><![CDATA[
 
 The interface for the <code>qnx.ui.core</code> package.
 
 <p>
 The <i>IContainable</i> interface provides container sizing and placement functionality.
 </p>
 
 ]]></description>
<see><![CDATA[Container
 ]]></see>
<see><![CDATA[Containment
 ]]></see>
</packageRec>
<interfaceRec name='IContainable' fullname='qnx.ui.core:IContainable' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\IContainable.as' namespace='qnx.ui.core' access='public' baseClasses='qnx.ui.display:ISizeable' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <i>IContainable</i> interface provides the methods and properties that enable definitions for container layout.
	 
	 ]]></description>
<see><![CDATA[Container
	 ]]></see>
<see><![CDATA[Containment
	 ]]></see>
</interfaceRec>
<method name='setPosition' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:setPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Called by the container to set the position of the component
		 relative to the position of the container.
		 
		 ]]></description>
<param><![CDATA[x The x position in pixels for the component.
		 ]]></param>
<param><![CDATA[y The y position in pixels for the component.
		 ]]></param>
</method>
<method name='containment' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:containment/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Specifies how a component is to be contained within a parent container.
		 Possible values are:
		 <ul>
		 <li><code>Containment.BACKGROUND</code></li>
		 <li><code>Containment.UNCONTAINED</code></li>
		 <li><code>Containment.CONTAINED</code></li>
		 <li><code>Containment.DOCK_LEFT</code></li>
		 <li><code>Containment.DOCK_TOP</code></li>
		 <li><code>Containment.DOCK_RIGHT</code></li>
		 <li><code>Containment.DOCK_BOTTOM</code></li>
		 </ul>
		 
		 ]]></description>
<see><![CDATA[qnx.ui.core.Containment
		 ]]></see>
</method>
<method name='sizeMode' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:sizeMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the size mode for this component. This property is used
		 by containers when laying out the component.
		 Possible values are:
		 <ul>
		 <li><code>SizeMode.FLOW</code></li>
		 <li><code>SizeMode.BOTH</code></li>
		 </ul>
		 <p>
		 Note that this property is ignored when size is 0.
		 </p>
		 ]]></description>
<see><![CDATA[qnx.ui.core.SizeMode
		 ]]></see>
</method>
<method name='sizeUnit' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:sizeUnit/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the unit of measurement for the size property.
		 Possible values are:
		 <ul>
		 <li><code>SizeUnit.PERCENT</code></li>
		 <li><code>SizeUnit.PIXELS</code></li>
		 </ul>
		 
		 ]]></description>
<see><![CDATA[qnx.ui.core.SizeUnit
		 ]]></see>
</method>
<method name='size' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets or sets the size for this component (as a percentage of the
		 container's size, or in pixels). This property is used by
		 containers to layout this component in the appropriate direction.
		 <p>
		 If size is 0, the component is not resized during container layout
		 (it is positioned like any other <code>MovieClip</code>, <code>Sprite</code> or <code>DisplayObject</code>).
		 </p>
		 ]]></description>
<see><![CDATA[#sizeUnit
		 ]]></see>
<see><![CDATA[Container#layout()
		 ]]></see>
</method>
<method name='containment' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:containment/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='sizeMode' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:sizeMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='m' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='sizeUnit' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:sizeUnit/set' isStatic='false' isFinal='false' isOverride='false'  param_names='u' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='size' fullname='qnx.ui.core:IContainable/qnx.ui.core:IContainable:size/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<classRec name='Spacer' fullname='qnx.ui.core:Spacer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\Spacer.as' namespace='qnx.ui.core' access='public' baseclass='flash.display:Sprite' interfaces='qnx.ui.core:IContainable' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>Spacer</code> class is used to provider space in items within containers.

	 ]]></description>
</classRec>
<method name='Spacer' fullname='qnx.ui.core:Spacer/Spacer' isStatic='false' isFinal='false' isOverride='false'  param_names='s;su' param_types='Number;String' param_defaults='100;percent' result_type='*'>
<description><![CDATA[

		 Creates a <code>Spacer</code> instance, given a size and unit of measure.

		 

		 ]]></description>
<param><![CDATA[s A <code>Number</code> representing the size of the spacer. The default value is 100 (the default unit is percent).

		 ]]></param>
<param><![CDATA[su A <code>String</code> representing the unit. Can be one of <code>SizeUnit.PERCENT</code> or <code>SizeUnit.PIXELS</code>. 

		 The default value is <code>SizeUnit.PERCENT</code>.

		 ]]></param>
<see><![CDATA[qnx.ui.core.SizeUnit

		 ]]></see>
</method>
<method name='setPosition' fullname='qnx.ui.core:Spacer/setPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Gets or sets the position of the spacer, given the x and y coordinates.

		 

		 ]]></description>
<param><![CDATA[x The x coordinate of the spacer.

		 ]]></param>
<param><![CDATA[y The y coordinate of the spacer.

		 ]]></param>
</method>
<method name='setSize' fullname='qnx.ui.core:Spacer/setSize' isStatic='false' isFinal='false' isOverride='false'  param_names='width;height' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Sets the size of the spacer, given the width and height.

		 

		 ]]></description>
<param><![CDATA[width The width of the spacer.

		 ]]></param>
<param><![CDATA[height The height of the spacer.

		 ]]></param>
</method>
<method name='containment' fullname='qnx.ui.core:Spacer/containment/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets a <code>String</code> which specifies how a component is to be contained within a parent container.

		 Possible values are:

		 <ul>

		 <li><code>Containment.BACKGROUND</code></li>

		 <li><code>Containment.UNCONTAINED</code></li>

		 <li><code>Containment.CONTAINED</code></li>

		 <li><code>Containment.DOCK_LEFT</code></li>

		 <li><code>Containment.DOCK_TOP</code></li>

		 <li><code>Containment.DOCK_RIGHT</code></li>

		 <li><code>Containment.DOCK_BOTTOM</code></li>

		 </ul>

		 ]]></description>
<see><![CDATA[qnx.ui.core.Containment

		 ]]></see>
</method>
<method name='sizeMode' fullname='qnx.ui.core:Spacer/sizeMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets the size mode for this component. This property is used

		 by containers when laying out the component.

		 Possible values are:

		 <ul>

		 <li><code>SizeMode.FLOW</code></li>

		 <li><code>SizeMode.BOTH</code></li>

		 </ul>

		 <p>

		 Note this property is ignored when size is 0.

		 </p>

		 ]]></description>
<see><![CDATA[qnx.ui.core.SizeMode

		 ]]></see>
</method>
<method name='sizeUnit' fullname='qnx.ui.core:Spacer/sizeUnit/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets or sets the unit of measure for the spacer.

		 

		 ]]></description>
<return><![CDATA[A <code>String</code> representing the unit, can be one of <code>SizeUnit.PERCENT</code> or <code>SizeUnit.PIXELS</code>.

		 ]]></return>
<see><![CDATA[#size

		 ]]></see>
<see><![CDATA[qnx.ui.core.SizeUnit

		 ]]></see>
</method>
<method name='size' fullname='qnx.ui.core:Spacer/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[

		 Gets or sets the size of the spacer.

		 

		 ]]></description>
<see><![CDATA[#sizeUnit

		 ]]></see>
</method>
<method name='containment' fullname='qnx.ui.core:Spacer/containment/set' isStatic='false' isFinal='false' isOverride='false'  param_names='c' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='sizeMode' fullname='qnx.ui.core:Spacer/sizeMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='m' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='sizeUnit' fullname='qnx.ui.core:Spacer/sizeUnit/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='size' fullname='qnx.ui.core:Spacer/size/set' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='_containment' fullname='qnx.ui.core:Spacer/private:_containment' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_sizeMode' fullname='qnx.ui.core:Spacer/private:_sizeMode' type='String' isStatic='false' isConst='false' >
</field>
<field name='_sizeUnit' fullname='qnx.ui.core:Spacer/private:_sizeUnit' type='String' isStatic='false' isConst='false' >
</field>
<field name='_size' fullname='qnx.ui.core:Spacer/private:_size' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='UIComponent' fullname='qnx.ui.core:UIComponent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\UIComponent.as' namespace='qnx.ui.core' access='public' baseclass='flash.display:MovieClip' interfaces='qnx.ui.core:IContainable' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>UIComponent</code> class is the base class for all components.
	 ]]></description>
</classRec>
<method name='UIComponent' fullname='qnx.ui.core:UIComponent/UIComponent' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>UIComponent</code> instance.
		 ]]></description>
</method>
<method name='addedEvent' fullname='qnx.ui.core:UIComponent/private:addedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='null' result_type='void'>
</method>
<method name='createInstance' fullname='qnx.ui.core:UIComponent/protected:createInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='linkage' param_types='Object' param_defaults='undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[
		Calling this method will attempt to create a <code>DisplayObject</code> instance based on the value of the <code>linkage</code> parameter. 
		<p>
		The <code>linkage</code> parameter can be one of three different types: Class, String, or <code>DisplayObject</code> instance.
		<ul>
		<li>If you pass in a <code>Class</code>, a new instance of that class is created and returned.</li>
		<li>If you pass in a <code>String</code>, the <code>flash.utils.getDefinitionByName</code> will attempt to create a new method.</li>
		<li>If you pass in a <code>DisplayObject</code> instance, the <code>x</code> and <code>y</code> values of the instance are set to 0 and returned.</li>
		</ul>
		</p>
		]]></description>
<param><![CDATA[linkage The instance to create.
		]]></param>
<return><![CDATA[A <code>DisplayObject</code> instance of the specified object.
		]]></return>
</method>
<method name='destroy' fullname='qnx.ui.core:UIComponent/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Call this method when you want to have your object collected by the garbage collector.
		<p>
		<b>NOTE:</b> This method does not remove the object from memory. Instead, it enables your instance to clean up after
		itself internally so that it can be garbage-collected.
		</p>
		
		]]></description>
</method>
<method name='draw' fullname='qnx.ui.core:UIComponent/protected:draw' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Called every time you set the width and height of the component.
		<p>
		Subclassing this method allows you to redraw and set the layout for the children of the component in order to accomodate the new dimensions.
		If you decide to implement your own <code>draw</code> method, you should avoid calling <code>super.draw</code>, as this will cause the 
		physical dimensions of your component to be resized.
		</p>
				]]></description>
</method>
<method name='init' fullname='qnx.ui.core:UIComponent/protected:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.core:UIComponent/protected:onAdded' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Called when the instance is added to the stage. 
		
		<p>This method can be overwritten in your subclasses.
		This method is called when the <code>Event.ADDED_TO_STAGE</code> is fired.</p>
		]]></description>
</method>
<method name='onRemoved' fullname='qnx.ui.core:UIComponent/protected:onRemoved' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Called when the instance is removed from the stage.
		
		
		<p>
		This method can be overwritten in your subclasses.
		This method is called when the <code>Event.REMOVED_FROM_STAGE</code> is fired.
		</p>
		]]></description>
</method>
<method name='removedEvent' fullname='qnx.ui.core:UIComponent/private:removedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='setEnabled' fullname='qnx.ui.core:UIComponent/protected:setEnabled' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Called when the <code>enabled</code> property changes.
		
		<p> You can override this method in order to customize how your component sets the <code>enabled</code> property.
		</p>
		
		]]></description>
<param><![CDATA[val A Boolean indicating the state of the enabled property.
		]]></param>
<see><![CDATA[#enabled
				]]></see>
</method>
<method name='setPosition' fullname='qnx.ui.core:UIComponent/setPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Sets the x and y position of the component.
		 
		 ]]></description>
<param><![CDATA[x The new x position to be set.
		 ]]></param>
<param><![CDATA[y The new y position to be set.
		 ]]></param>
</method>
<method name='setSize' fullname='qnx.ui.core:UIComponent/setSize' isStatic='false' isFinal='false' isOverride='false'  param_names='w;h' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Sets the width and height of the component.
		<p>
		After setting the new dimensions, the <code>setSize</code> function calls the <code>draw</code> method, which allows you to adjust the layout
		or redraw your component's children.
		</p>
		]]></description>
<param><![CDATA[w The new width of the component.
		]]></param>
<param><![CDATA[h The new height of the component.
		]]></param>
<see><![CDATA[#draw()
		]]></see>
</method>
<method name='containment' fullname='qnx.ui.core:UIComponent/containment/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets how a component is contained within a parent container.
		 <p>
		 Possible values are:
		 </p>
		 <ul>
		 <li><code>Containment.BACKGROUND</code></li>
		 <li><code>Containment.UNCONTAINED</code></li>
		 <li><code>Containment.CONTAINED</code></li>
		 <li><code>Containment.DOCK_LEFT</code></li>
		 <li><code>Containment.DOCK_TOP</code></li>
		 <li><code>Containment.DOCK_RIGHT</code></li>
		 <li><code>Containment.DOCK_BOTTOM</code></li>
		 </ul>
		 
		 ]]></description>
<see><![CDATA[qnx.ui.core.Containment
		 ]]></see>
</method>
<method name='enabled' fullname='qnx.ui.core:UIComponent/enabled/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[val A <code>Boolean</code> indicating the state of the component. 
		 
		 ]]></param>
<return><![CDATA[Returns <em>true</em> if the component is enabled, <em>false</em> otherwise.
		 ]]></return>
<private><![CDATA[]]></private>
</method>
<method name='height' fullname='qnx.ui.core:UIComponent/height/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleX' fullname='qnx.ui.core:UIComponent/scaleX/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleY' fullname='qnx.ui.core:UIComponent/scaleY/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sizeMode' fullname='qnx.ui.core:UIComponent/sizeMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the size mode for this component. This property is used
		 by containers when laying out the component.
		 Possible values are:
		 <ul>
		 <li><code>SizeMode.FLOW</code></li>
		 <li><code>SizeMode.BOTH</code></li>
		 </ul>
		 
		 Note this property is ignored when size is 0.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.core.SizeMode
		 ]]></see>
</method>
<method name='sizeUnit' fullname='qnx.ui.core:UIComponent/sizeUnit/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the unit of measure for the <code>size</code> property.
		 <p>
		 Possible values are:
		 <ul>
		 <li><code>SizeUnit.PERCENT</code></li>
		 <li><code>SizeUnit.PIXELS</code></li>
		 </ul>
		 </p>
		 ]]></description>
<see><![CDATA[qnx.ui.core.SizeUnit
		 ]]></see>
</method>
<method name='size' fullname='qnx.ui.core:UIComponent/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets or sets the size for this component (as a percentage of the
		 container's size, or in pixels). This property is used by
		 containers to layout this component in the appropriate direction.
		 <p>
		 If the size is 0, the component is not resized during container layout
		 (it is positioned like any other <code>MovieClip</code>, <code>Sprite</code> or <code>DisplayObject</code>).
		 </p>
		 ]]></description>
<see><![CDATA[#sizeUnit
		 ]]></see>
<see><![CDATA[Container#layout()
		 ]]></see>
</method>
<method name='width' fullname='qnx.ui.core:UIComponent/width/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='containment' fullname='qnx.ui.core:UIComponent/containment/set' isStatic='false' isFinal='false' isOverride='false'  param_names='c' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='enabled' fullname='qnx.ui.core:UIComponent/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='height' fullname='qnx.ui.core:UIComponent/height/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleX' fullname='qnx.ui.core:UIComponent/scaleX/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scaleY' fullname='qnx.ui.core:UIComponent/scaleY/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sizeMode' fullname='qnx.ui.core:UIComponent/sizeMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='m' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='sizeUnit' fullname='qnx.ui.core:UIComponent/sizeUnit/set' isStatic='false' isFinal='false' isOverride='false'  param_names='unit' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='size' fullname='qnx.ui.core:UIComponent/size/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='width' fullname='qnx.ui.core:UIComponent/width/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__enabled' fullname='qnx.ui.core:UIComponent/protected:__enabled' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__height' fullname='qnx.ui.core:UIComponent/protected:__height' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__startHeight' fullname='qnx.ui.core:UIComponent/protected:__startHeight' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__startWidth' fullname='qnx.ui.core:UIComponent/protected:__startWidth' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__width' fullname='qnx.ui.core:UIComponent/protected:__width' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_containment' fullname='qnx.ui.core:UIComponent/protected:_containment' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_sizeMode' fullname='qnx.ui.core:UIComponent/protected:_sizeMode' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_sizeUnit' fullname='qnx.ui.core:UIComponent/protected:_sizeUnit' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_size' fullname='qnx.ui.core:UIComponent/protected:_size' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SkinnableComponent' fullname='qnx.ui.core:SkinnableComponent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\SkinnableComponent.as' namespace='qnx.ui.core' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  The <code>SkinnableComponent</code> class is the base class for components that can be skinned.
	  ]]></description>
</classRec>
<method name='SkinnableComponent' fullname='qnx.ui.core:SkinnableComponent/SkinnableComponent' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='draw' fullname='qnx.ui.core:SkinnableComponent/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSize' fullname='qnx.ui.core:SkinnableComponent/setSize' isStatic='false' isFinal='false' isOverride='true'  param_names='w;h' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSkin' fullname='qnx.ui.core:SkinnableComponent/setSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='cellSkin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Set the skin object on the component for it to render. 
		
		<p>If a skin is found, it is removed and a new skin is created.
		The <code>cellSkin</code> parameter can be one of three different types: <code>Class</code>, <code>String</code>, or <code>DisplayObject</code> instance.
		<ul>
		<li>If you pass in a <code>Class</code>, a new instance of that class is created and returned.</li>
		<li>If you pass in a <code>String</code>, the <code>flash.utils.getDefinitionByName</code> will attempt to create a new method.</li>
		<li>If you pass in a <code>DisplayObject</code> instance, the <code>x</code> and <code>y</code> values of the instance are set to 0 and returned.</li>
		</ul>
		</p>
		<p>
		Skins must implement the <i>ISkin</i> interface. 
		</p>
		]]></description>
<see><![CDATA[qnx.ui.skins.ISkin 
		]]></see>
</method>
<method name='setState' fullname='qnx.ui.core:SkinnableComponent/protected:setState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<param><![CDATA[state A String representing the state to be set. Valid values are <code>SkinStates.UP</code>, <code>SkinStates.DOWN</code>, 
		<code>SkinStates.SELECTED</code>, <code>SkinStates.DISABLED</code>.
		]]></param>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
<private><![CDATA[]]></private>
</method>
<method name='height' fullname='qnx.ui.core:SkinnableComponent/height/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='width' fullname='qnx.ui.core:SkinnableComponent/width/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__defaultSkin' fullname='qnx.ui.core:SkinnableComponent/protected:__defaultSkin' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__heightSet' fullname='qnx.ui.core:SkinnableComponent/private:__heightSet' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__state' fullname='qnx.ui.core:SkinnableComponent/protected:__state' type='String' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__widthSet' fullname='qnx.ui.core:SkinnableComponent/private:__widthSet' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='skin' fullname='qnx.ui.core:SkinnableComponent/skin' type='qnx.ui.skins:ISkin' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Container' fullname='qnx.ui.core:Container' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\core\Container.as' namespace='qnx.ui.core' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[

 The <code>Container</code> class is the basic "container" that contains the interface components of an application. 

 It handles the positioning, size, and layout of its children.

 Containers are useful for segmenting the screen into compartments, and for organizing the layout and flow of all components within 

 a compartment. 

 <p>

 The following example describes a typical layout scenario using containers:

 </p>

 <img src="../../../images/container.gif"></img>

 

 <p>

 The layout above uses four containers, where the border and margin of each container is highlighted in a unique colour. This is done

 by setting the container's <code>debugColor</code> property to a unique color code. The <code>debugColor</code> property is useful

 for visualizing the bounds of each container while you develop your application. This allows you to tweak the details of the layout. 

 </p>

 <p>

 The main container, <code>myMain</code> (yellow), encompasses the entire stage and contains the three subcontainers: <code>mySub</code>, <code>mySubRight</code>,

 and <code>mySubBottom</code>. The 

 following code listing shows the <code>myMain</code> container:

 </p>

 <listing>

 myMain = new Container();

 myMain.margins = Vector.&lt;Number&gt;([20,20,20,20]);

 myMain.flow = ContainerFlow.HORIZONTAL;

 myMain.debugColor = 0xFFCC00;

 addChild(myMain);

 </listing>

 <strong>Flow and alignment</strong>

 

 <p>

 The <b><i>flow</i></b> indicates the layout orientation, or direction of all subcomponents (children) within a parent container. The <code>myMain</code> container's <code>flow</code> property is set to 

 <code>ContainerFlow.HORIZONTAL</code> meaning that the container's children (which may also be containers)

 will appear horizontally opposed, or side by side within the container. The <code>margins</code> property takes a <code>Vector</code> of four numbers indicating, in order, margins

 for the the left, top,

 right, and bottom edges of the container. So <code>Vector.&lt;Number&gt;([20,40,20,40])</code>, would indicate top and bottom margins of 40 pixels, and left and right margins

 of 20 pixels. A component will only overlap a margin if the container runs out of space. For the sake of the sample, the margin values are specified using literals.

 </p>

 <p>

 The code for the <code>mySub</code> (red) container, which makes up the left side of the screen, is listed below:

 </p>

 <listing>

 // create subcontainer on left side of the screen //

 mySub = new Container();

 mySub.margins = Vector.&lt;Number&gt;([20,40,20,40]);	

 mySub.debugColor = 0xFF3300;

 mySub.size = 50;	

 mySub.sizeUnit = SizeUnit.PERCENT;

 mySub.flow = ContainerFlow.VERTICAL;

 mySub.align = ContainerAlign.NEAR;

 mySub.padding = 10;

 </listing>

 <p>

 The <code>mySub</code> container uses a vertical flow (<code>ContainerFlow.VERTICAL</code>) meaning that all components within this 

 container will appear vertically opposed, or one on top of another. It's also important to note that components will appear in the order

 in which they are added to a container, such that the top-most component in the <code>mySub</code> container will be the component that is first added to the container. 

 This is always true unless a component is docked, which is described later.</p>

 <p>

 The <code>size</code> and <code>sizeUnit</code> properties determine the size of the subcontainer, or rather, the amount of space the 

 subcontainer will take up within the parent container. In this case, <code>size</code> is set to <code>50</code> and <code>sizeUnit</code> is set to <code>SizeUnit.PERCENT</code>

 indicating that <code>mySub</code> will take up 50% of the main container. The default value of <code>sizeUnit</code> is pixels.

 </p>

 <p>

 The <code>align</code> property determines the position, or alignment, of each subcomponent in the direction opposite to the flow of the container. In a container with a vertical

 flow, this specifies the horizontal position (or x coordinate) of the subcomponent, relative to the left edge of the container. Conversely, in a container with a horizontal flow, the alignment specifies the vertical 

 position (or y coordinate) of the component relative to the top edge of the container. The <code>align</code> property has three values: <code>ContainerAlign.NEAR</code>, 

 <code>ContainerAlign.MID</code>,and <code>ContainerAlign.FAR</code>, where each value represents a position relative to the initial edge of the container. <code>ContainerAlign.NEAR</code>

 is the closest, <code>ContainerAlign.FAR</code> is the furthest. <code>ContainerAlign.MID</code> is the default. 

 </p>

 <p>

 The <code>padding</code> property sets the amount of space (in pixels) between each subcomponent. 

 </p>

 

 

 <p>

 The sub container, <code>mySubRight</code> on the right-side of the screen is listed below:

 </p>

 <listing>

 mySubRight = new Container();

 mySubRight.margins = Vector.&lt;Number&gt;([10,10,10,10]);            

 mySubRight.size = 50;            

 mySubRight.debugColor = 0x0033FF;

 mySubRight.sizeUnit = SizeUnit.PERCENT;

 mySubRight.flow = ContainerFlow.VERTICAL;

 mySubRight.align = ContainerAlign.MID;

 mySubRight.padding = 10;

 </listing>

 <p>

 The final container, <code>mySubBottom</code> (green), is listed below:

 </p>

 <listing>

 // create subcontainer as the bottom frame //

 mySubBottom = new Container();

 mySubBottom.margins = Vector.&lt;Number&gt;([5,5,5,5]);			

 mySubBottom.debugColor = 0x33FF33;

 mySubBottom.size = 9;

 mySubBottom.sizeUnit = SizeUnit.PERCENT;

 mySubBottom.flow = ContainerFlow.HORIZONTAL;

 mySubBottom.align = ContainerAlign.FAR;

 mySubBottom.containment = Containment.DOCK_BOTTOM; 

 </listing>

 <p>

 This container is docked to the bottom of the stage by setting the <code>containment</code> property to <code>Containment.DOCK_BOTTOM</code>. Docked children are 

 handled first, leaving the remainder of the container for the rest of the children. You can dock a subcomponent to any of the 

 four edges of a container, you can set a container to reside in the background of the stage (<code>Containment.BACKGROUND</code>), or you can specify that the component will not

 repositioned by the parent container (<code>Containment.UNCONTAINED</code>). 

 </p>

 <strong>Sizing</strong>

 <p>

 A container can set the <b><i>size</i></b> of each subcomponent in the direction of the flow, only if the subcomponent implements the <i>IContainable</i> interface and only if

 <i>IContainable.size</i> is not 0. Otherwise, the subcomponents dimensions are not changed during a layout operation.

 </p>

 <p>

 A container can set the size of a subcomponent in the direction opposite

 the container flow (height in a horizontal container, width in a vertical container) only if the subcomponent implements <i>IContainable</i> and <i>IContainable.sizeMode</i> is set

 to <code>SizeMode.BOTH</code>. When this property is set, the subcomponent will fill the remaining container space (in the direction opposite to the flow of the container) and the 

 container's align setting will be ignored.  

 </p>

 <p>

 The <b>Back</b> button uses the <code>SizeMode</code> property to fill out the opposite direction in the bottom container. In other words, after a layout call, the <code>Back</code>

 button will expand vertically (note that the container uses a horizontal flow) to fill the space in the bottom container: 

 </p>

 <listing>

   leftButton = new LabelButton();

   leftButton.label = "Back";

   leftButton.size = 100;

   leftButton.sizeUnit = SizeUnit.PIXELS;

   leftButton.sizeMode = SizeMode.BOTH;   

   </listing>

 <p>

 Note that you must specify a size for the component (using the <code>size</code> property) otherwise the component will not resize when a layout call occurs. For the sake of the 

 example, the <b>Next</b> button does not specify the <code>SizeMode</code> property.

 </p>

   <listing>

   rightButton = new LabelButton();

   rightButton.label = "Next";

   rightButton.size = 100;

 </listing>

  <strong>Spacing</strong>

 <p>

 The <b>Back</b> and <b>Next</b> buttons are positioned at the far bottom-right side of the container. This is accomplished by setting the 

 <code>align</code> property to <code>ContainerAlign.FAR</code> but also by adding a spacer as the first subcomponent in the container. By default, the spacer is set to take up

 100 percent of the container, which pushes the other two components to the far right of the container. Notice that a second spacer is added to provide spacing between the buttons. This

 could also have been accomplished by using the <code>padding</code> property.

 </p>

 <listing>

 mySubBottom.addChild(new Spacer()); 

 mySubBottom.addChild(leftButton);

 mySubBottom.addChild(new Spacer(3,SizeUnit.PIXELS));

 mySubBottom.addChild(rightButton);

 </listing>

 <p>

 Finally, and perhaps most importantly, we call the <code>myMain</code> container's <code>setSize</code> method, which sets the size of the main container:

 </p>

 <listing>

 //call setSize //

 myMain.setSize(stage.stageWidth, stage.stageHeight);

 </listing>

 <p>

 This in turn calls the <code>layout()</code> function which adjusts the

 layout of the subcomponents according to the properties that are defined by each parent container. It's important to call this method only after each container and each subcomponent is 

 defined. Otherwise, the call will have no effect.

 </p>

 <p>

 The complete code for this layout is listed in the examples section below. 

 </p>

 ]]></description>
<example><![CDATA[The code listing below provides the complete container layout that was illustrated in the class description above. 

 <listing>

package

{

	import flash.display.Sprite;

	import flash.text.TextFieldAutoSize;

	import flash.text.TextFormat;

	

	import qnx.ui.buttons.LabelButton;

	import qnx.ui.core.Container;

	import qnx.ui.core.ContainerAlign;

	import qnx.ui.core.ContainerFlow;

	import qnx.ui.core.Containment;

	import qnx.ui.core.SizeMode;

	import qnx.ui.core.SizeUnit;

	import qnx.ui.core.Spacer;

	import qnx.ui.core.UIComponent;

	import qnx.ui.text.Label;

	import qnx.ui.text.TextInput;

	

	[SWF(height="600", width="1024", frameRate="30", backgroundColor="#FFFFFF")]

	

	// A simple container layout example //

	

	public class containerTest extends Sprite

	{

		//the containers // 

		private var myMain:Container;

		private var mySub:Container;

		private var mySubRight:Container;

		private var mySubBottom:Container;

		

		//the left-side of the screen labels //

		private var firstLabel:Label;

		private var secondLabel:Label;

		private var thirdLabel:Label;

		private var fourthLabel:Label;

		

		//text input for second sub container //

		private var firstInput:TextInput;

		

		//the back and next buttons //

		private var leftButton:LabelButton;

		private var rightButton:LabelButton;

		

		

		public function containerTest()

		{

			

			// create main container //

			myMain = new Container();

			myMain.margins = Vector.&lt;Number&gt;([20,20,20,20]);

			myMain.flow = ContainerFlow.HORIZONTAL;

			myMain.debugColor = 0xFFCC00;

			addChild(myMain);

			

			// create subcontainer on left side of the screen //

			mySub = new Container();

			mySub.margins = Vector.&lt;Number&gt;([20,40,20,40]);            

			mySub.size = 50;            

			mySub.debugColor = 0xFF3300;

			mySub.sizeUnit = SizeUnit.PERCENT;

			mySub.flow = ContainerFlow.VERTICAL;

			mySub.align = ContainerAlign.NEAR;

			mySub.padding = 10;

			

			// create second subcontainer on left side of the screen //

			mySubRight = new Container();

			mySubRight.margins = Vector.&lt;Number&gt;([10,10,10,10]);            

			mySubRight.size = 50;            

			mySubRight.debugColor = 0x0033FF;

			mySubRight.sizeUnit = SizeUnit.PERCENT;

			mySubRight.flow = ContainerFlow.VERTICAL;

			mySubRight.align = ContainerAlign.MID;

			mySubRight.padding = 10;

			

			// create subcontainer as the bottom frame //

			mySubBottom = new Container();

			mySubBottom.margins = Vector.&lt;Number&gt;([5,5,5,5]);            

			mySubBottom.debugColor = 0x33FF33;

			mySubBottom.size = 12;

			mySubBottom.sizeUnit = SizeUnit.PERCENT;

			mySubBottom.flow = ContainerFlow.HORIZONTAL;

			mySubBottom.align = ContainerAlign.FAR;

			mySubBottom.containment = Containment.DOCK_BOTTOM; 

			

			// create and add UI components to the left container//            

			var labelFormat:TextFormat = new TextFormat();

			labelFormat = new TextFormat();            

			labelFormat.size = 22;

			

			firstLabel = new Label();

			firstLabel.format = labelFormat;

			firstLabel.text = "First label";

			firstLabel.size=50;

			firstLabel.sizeUnit = SizeUnit.PERCENT;

			firstLabel.autoSize = TextFieldAutoSize.LEFT;

			

			mySub.addChild(firstLabel);

			

			secondLabel = new Label();

			secondLabel.format = labelFormat;

			secondLabel.text = "Second label";

			secondLabel.size=50;

			secondLabel.sizeUnit = SizeUnit.PERCENT;

			secondLabel.autoSize = TextFieldAutoSize.LEFT;

			

			mySub.addChild(secondLabel);

			

			thirdLabel = new Label();

			thirdLabel.format = labelFormat;

			thirdLabel.text = "Third label";

			thirdLabel.size=50;

			thirdLabel.sizeUnit = SizeUnit.PERCENT;

			thirdLabel.autoSize = TextFieldAutoSize.LEFT;

			

			mySub.addChild(thirdLabel);

			

			// create and add UI components for right side //

			firstInput = new TextInput;

			firstInput.width = 200;

			

			fourthLabel = new Label();

			fourthLabel.format = labelFormat;			

			fourthLabel.text = "Fourth label:";

			fourthLabel.width = 200;

			fourthLabel.size=30;

			fourthLabel.sizeUnit = SizeUnit.PIXELS;

						

			mySub.addChild(thirdLabel);

			

			mySubRight.addChild(new Spacer(60));

			mySubRight.addChild(fourthLabel);

			mySubRight.addChild(firstInput);

			

			// create and add back and next buttons //

			leftButton = new LabelButton();

			leftButton.label = "Back";

			leftButton.size = 100;

			leftButton.sizeUnit = SizeUnit.PIXELS;

			leftButton.sizeMode = SizeMode.BOTH;			



			rightButton = new LabelButton();

			rightButton.label = "Next";

			rightButton.size = 100;

			

			// add spacer then button then spacer then button //

			mySubBottom.addChild(new Spacer()); 

			mySubBottom.addChild(leftButton);

			mySubBottom.addChild(new Spacer(3,SizeUnit.PIXELS));

			mySubBottom.addChild(rightButton);

			

			// add subcontainers to main container //

			myMain.addChild(mySub);   

			myMain.addChild(mySubRight); 

			myMain.addChild(mySubBottom);

			

			// call setSize //

			myMain.setSize(stage.stageWidth, stage.stageHeight);

		}

		

		

	}

}

</listing>

 

 ]]></example>
<see><![CDATA[Containment

 ]]></see>
</classRec>
<method name='Container' fullname='qnx.ui.core:Container/Container' isStatic='false' isFinal='false' isOverride='false'  param_names='s;su' param_types='Number;String' param_defaults='100;percent' result_type='*'>
<description><![CDATA[

		 Constructs a <code>Container</code> instance given a size and size unit.

		 

		 ]]></description>
<param><![CDATA[s A <code>Number</code> representing the size of the container. The default value is 100 (the default unit is percent).

		 ]]></param>
<param><![CDATA[su A <code>String</code> representing the unit. Can be one of <code>SizeUnit.PERCENT</code> or <code>SizeUnit.PIXELS</code>. 

		 The default value is <code>SizeUnit.PERCENT</code>.

		 

		 ]]></param>
<see><![CDATA[qnx.ui.core.SizeUnit

		 ]]></see>
<see><![CDATA[qnx.ui.core.Containment

		 ]]></see>
</method>
<method name='alignChild' fullname='qnx.ui.core:Container/private:alignChild' isStatic='false' isFinal='false' isOverride='false'  param_names='start;size;span' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childIsBackground' fullname='qnx.ui.core:Container/private:childIsBackground' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childIsDocked' fullname='qnx.ui.core:Container/private:childIsDocked' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childIsResizable' fullname='qnx.ui.core:Container/private:childIsResizable' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childIsUncontained' fullname='qnx.ui.core:Container/private:childIsUncontained' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childSizeBoth' fullname='qnx.ui.core:Container/private:childSizeBoth' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='childSize' fullname='qnx.ui.core:Container/private:childSize' isStatic='false' isFinal='false' isOverride='false'  param_names='child;remainingSize;totalPercent' param_types='qnx.ui.core:IContainable;Number;Number' param_defaults='undefined;undefined;100' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.core:Container/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layout' fullname='qnx.ui.core:Container/layout' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Repositions the children of the container according to the flow and align settings

		 of the container, and the containment and sizing attributes (if present) of the children.

		 <p>

		 Invisible children are not positioned by a container.

		 </p>

		 <p>

		 A child is considered <i>docked</i> if it implements the <code>IContainable</code> interface and its

		 <code>containment</code> property is set to <code>Containment.DOCK_LEFT</code>, <code>Containment.DOCK_TOP</code>,

		 <code>Containment.DOCK_RIGHT</code> or <code>Containment.DOCK_BOTTOM</code>. Children which implement

		 <code>IContainable</code> and specify a <code>containment</code> of <code>Containment.UNCONTAINED</code>

		 will be ignored by the container.  Children which specify a <code>containment</code> of

		 <code>Containment.BACKGROUND</code> will be sized to fill the entire area of the container.

		 </p>

		 <p>

		 A child is considered <i>resizable</i> if it implements the <code>IContainable</code> interface and its

		 <code>size</code> property is greater than 0.

		 </p>

		 <p>

		 Containers will position docked children first around the edges of the container. They will

		 then will position undocked children in the remaining area of the container. Undocked

		 children which are resizable will be positioned and sized based on their <code>size</code>

		 (and <code>sizeUnit</code>) property in the direction of the container flow, and will

		 fill the remaining space in the direction opposite the flow.

		 </p>

		 <p>

		 Undocked children which are not resizable will be positioned based on their width and

		 height properties in the direction of the container flow, and will be aligned in the

		 direction opposite the container flow based on the container's <code>align</code> property.

		 </p>

		 

		 ]]></description>
<see><![CDATA[#flow

		 ]]></see>
<see><![CDATA[#align

		 ]]></see>
<see><![CDATA[IContainable

		 

		 ]]></see>
</method>
<method name='setSize' fullname='qnx.ui.core:Container/setSize' isStatic='false' isFinal='false' isOverride='true'  param_names='width;height' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 Called by the parent (other containers or the outer most parent) to

		 set the size of the container.

		 <p>

		 The container will invoke <code>layout</code> automatically in response to this.

		 </p>

		 

		 ]]></description>
<param><![CDATA[width The new width (in pixels) for the <code>Container</code> component.

		 ]]></param>
<param><![CDATA[height The new height (in pixels) for the <code>Container</code> component.

		 

		 ]]></param>
<see><![CDATA[#layout()

		 ]]></see>
</method>
<method name='showDebug' fullname='qnx.ui.core:Container/private:showDebug' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='margins' fullname='qnx.ui.core:Container/margins/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Number'>
<description><![CDATA[

		 Gets or sets the internal margins for the container (the space just inside

		 the border of the container). The <code>m</code> argument is represented as a

		 vector of 4 numbers: the left, top,

		 right and bottom edges respectively.

		 

		 ]]></description>
<default><![CDATA[[0, 0, 0, 0]

		 

		 ]]></default>
<see><![CDATA[#layout()

		 ]]></see>
</method>
<method name='padding' fullname='qnx.ui.core:Container/padding/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='margins' fullname='qnx.ui.core:Container/margins/set' isStatic='false' isFinal='false' isOverride='false'  param_names='m' param_types='Vector$Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Specifies the internal margins for the container (the space just inside

		 the border of the container). <code>margins</code> is represented as a

		 vector of 4 numbers, specifying the margins in pixels for the left, top,

		 right and bottom edges respectively.

		 

		 ]]></description>
<default><![CDATA[[0, 0, 0, 0]

		 

		 ]]></default>
<see><![CDATA[#layout()

		 ]]></see>
</method>
<method name='padding' fullname='qnx.ui.core:Container/padding/set' isStatic='false' isFinal='false' isOverride='false'  param_names='p' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Specifies the internal padding in pixels for the container (the space

		 between contained children of the container).

		 

		 ]]></description>
<default><![CDATA[8

		 

		 ]]></default>
<see><![CDATA[#layout()

		 ]]></see>
</method>
<field name='_margins' fullname='qnx.ui.core:Container/private:_margins' type='Vector$Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_padding' fullname='qnx.ui.core:Container/private:_padding' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='align' fullname='qnx.ui.core:Container/align' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 Specifies the align, with which contained and non-resizable children are positioned.

		 <p>

		 The <code>align</code> attribute is used to determine the position of the childen in the

		 direction opposite to the flow of the container, with <em>near</em> implying

		 upper or left-most, and <em>far</em> implying lower or right-most. This applies only

		 to children which do not implement the <i>IContainable</i> interface or those which

		 specify a 0 size.

		 </p>

		 Possible values are:

		 <ul>

		 <li><code>ContainerAlign.NEAR</code></li>

		 <li><code>ContainerAlign.MID</code></li>

		 <li><code>ContainerAlign.FAR</code></li>

		 </ul>

		 ]]></description>
<default><![CDATA[ContainerAlign.MID

		 

		 ]]></default>
<see><![CDATA[#layout()

		 ]]></see>
</field>
<field name='debugColor' fullname='qnx.ui.core:Container/debugColor' type='uint' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='flow' fullname='qnx.ui.core:Container/flow' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 Specifies the flow direction, with which any contained children are positioned.

		 

		 <p>

		 Possible values are:

		 <ul>

		 <li><code>ContainerFlow.VERTICAL</code></li>

		 <li><code>ContainerFlow.HORIZONTAL</code></li>

		 </ul>

		 </p>

		 ]]></description>
<default><![CDATA[ContainerFlow.VERTICAL

		 

		 ]]></default>
<see><![CDATA[#layout()

		 ]]></see>
</field>
<classRec name='DeviceBatteryState' fullname='qnx.system:DeviceBatteryState' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\system\DeviceBatteryState.as' namespace='qnx.system' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The battery power state of the device.
	 ]]></description>
<see><![CDATA[Device#batteryState
	 ]]></see>
</classRec>
<field name='CHARGING' fullname='qnx.system:DeviceBatteryState/CHARGING' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
		A constant indicating that the battery power state is plugged into power and is less then 100% charged.
		]]></description>
</field>
<field name='FULL' fullname='qnx.system:DeviceBatteryState/FULL' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
		A constant indicating that the battery power state is plugged into power and is at 100% charge.
		]]></description>
</field>
<field name='UNKNOWN' fullname='qnx.system:DeviceBatteryState/UNKNOWN' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
		A constant indicating that the battery power state is unknown.
		]]></description>
</field>
<field name='UNPLUGGED' fullname='qnx.system:DeviceBatteryState/UNPLUGGED' type='int' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
		 A constant indicating that the battery power state is unplugged from power and is discharging.
		]]></description>
</field>
<classRec name='QNXApplication' fullname='qnx.system:QNXApplication' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\system\QNXApplication.as' namespace='qnx.system' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>QNXApplication</code> class contains system information, system-wide functions, and dispatches system events.
	]]></description>
<metadata>
	<Event owner='qnx.system:QNXApplication' name='swipeDown' type='qnx.events.QNXApplicationEvent' >
<description><![CDATA[
	Dispatched when the user swipes down from the top bezel onto the application screen.
	]]></description>
<eventType><![CDATA[qnx.events.QNXApplicationEvent.SWIPE_DOWN
	]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.system:QNXApplication' name='swipeStart' type='qnx.events.QNXApplicationEvent' >
<description><![CDATA[
	Dispatched when the user initiates a swipe down from the top bezel onto the application screen.
	]]></description>
<eventType><![CDATA[qnx.events.QNXApplicationEvent.SWIPE_START
	]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.system:QNXApplication' name='lowMemory' type='qnx.events.QNXApplicationEvent' >
<description><![CDATA[
	Dispatched when the device is running low on memory.
	]]></description>
<eventType><![CDATA[qnx.events.QNXApplicationEvent.LOW_MEMORY
	]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='QNXApplication' fullname='qnx.system:QNXApplication/QNXApplication' isStatic='false' isFinal='false' isOverride='false'  param_names='enforcer' param_types='QNXApplication.as$66:SingletonEnforcer' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 The constructor of the QNXApplication class. This should never be called directly. 
		 Use the <code>QNXApplication.qnxApplication</code> to create an instance.
		 ]]></description>
<param><![CDATA[enforcer Used to prevent direct construction of this class.
		 ]]></param>
<see><![CDATA[qnx.system.QNXApplication#qnxApplication
		 ]]></see>
</method>
<method name='addEventListener' fullname='qnx.system:QNXApplication/addEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.system:QNXApplication/private:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='lowMemoryReceived' fullname='qnx.system:QNXApplication/private:lowMemoryReceived' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
</method>
<method name='onOpenFail' fullname='qnx.system:QNXApplication/private:onOpenFail' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onOpen' fullname='qnx.system:QNXApplication/private:onOpen' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='openFile' fullname='qnx.system:QNXApplication/openFile' isStatic='false' isFinal='false' isOverride='false'  param_names='filePath' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Opens the given file in the default application for that file type.
		
		<p>
		If the file type is not known by the device,
		the file is not opened. Before attempting to open a file, check the <code>QNXApplication.supportedFileTypes</code> <code>Vector</code> array
		to see if the file is a valid file extension.
		</p>
		
		]]></description>
<param><![CDATA[filePath The path to the file on the device.
		]]></param>
<see><![CDATA[#supportedFileTypes
		]]></see>
</method>
<method name='swipeDownRecieved' fullname='qnx.system:QNXApplication/private:swipeDownRecieved' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
</method>
<method name='swipeStartRecieved' fullname='qnx.system:QNXApplication/private:swipeStartRecieved' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
</method>
<method name='qnxApplication' fullname='qnx.system:QNXApplication/qnxApplication/get' isStatic='true' isFinal='false' isOverride='false'  result_type='qnx.system:QNXApplication'>
<description><![CDATA[
		 Returns the Singleton instance of the QNXApplication class.
		 ]]></description>
</method>
<method name='supportedFileTypes' fullname='qnx.system:QNXApplication/supportedFileTypes/get' isStatic='true' isFinal='false' isOverride='false'  result_type='Vector$String'>
<description><![CDATA[
		A <code>Vector</code> array (a typed array of <code>String</code> values) of file extensions which can be opened in the default application on the device.
		]]></description>
<see><![CDATA[#openFile()
		]]></see>
</method>
<field name='__instance' fullname='qnx.system:QNXApplication/private:__instance' type='qnx.system:QNXApplication' isStatic='true' isConst='false' >
</field>
<field name='__supportedFileTypes' fullname='qnx.system:QNXApplication/private:__supportedFileTypes' type='Vector$String' isStatic='true' isConst='false' >
</field>
<field name='pps' fullname='qnx.system:QNXApplication/private:pps' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<classRec name='Device' fullname='qnx.system:Device' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\system\Device.as' namespace='qnx.system' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>Device</code> class exposes many properties of the device. Use the public static method 
	 <code>Device.device</code> to retrieve a reference to the current device. 
	 
	 ]]></description>
<see><![CDATA[qnx.system.Device#device
	 ]]></see>
<metadata>
	<Event owner='qnx.system:Device' name='BatteryStateChange' type='qnx.events.DeviceBatteryEvent' >
<description><![CDATA[
	
	
	]]></description>
<eventType><![CDATA[qnx.events.DeviceBatteryEvent.STATE_CHANGE
	]]></eventType>
<see><![CDATA[DeviceBatteryState
	]]></see>
<see><![CDATA[#batteryState
	]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.system:Device' name='BatteryLevelChange' type='qnx.events.DeviceBatteryEvent' >
<description><![CDATA[ 
	
	]]></description>
<eventType><![CDATA[qnx.events.DeviceBatteryEvent.LEVEL_CHANGE
	]]></eventType>
<see><![CDATA[#batteryLevel
	]]></see>
	</Event>
</metadata>
</classRec>
<method name='Device' fullname='qnx.system:Device/Device' isStatic='false' isFinal='false' isOverride='false'  param_names='enforcer' param_types='Device.as$138:SingletonEnforcer' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		Do not use the constructor to instanitate a instance of this class. 
		Use the <code>Device.device</code> method to return the Singleton instance of the class.
		]]></description>
<param><![CDATA[enforcer Used to prevent calling the constructor directly.
		
		]]></param>
<see><![CDATA[Device.device
		]]></see>
</method>
<method name='init' fullname='qnx.system:Device/private:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='toString' fullname='qnx.system:Device/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
		 Returns a <code>String</code> containing device, software, and hardware information.   
		 
		 ]]></description>
<return><![CDATA[A <code>String</code> containing device information.
		 ]]></return>
</method>
<method name='updateBatteryProperties' fullname='qnx.system:Device/private:updateBatteryProperties' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='batteryLevel' fullname='qnx.system:Device/batteryLevel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the battery level of the device.
		<p>
		If the <code>batteryMonitoringEnabled</code> property is set to <i>true</i>, a value between 0 and 100 will be returned
		indicating the battery level.
		If the <code>batteryMonitoringEnabled</code> property is set to <i>false</i>, -1 is returned indicating that the battery level is unknown.
		</p>
		]]></description>
<default><![CDATA[-1
		]]></default>
<see><![CDATA[#batteryMonitoringEnabled
		]]></see>
</method>
<method name='batteryMonitoringEnabled' fullname='qnx.system:Device/batteryMonitoringEnabled/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Turns battery monitoring on or off.
		<p>
		When set to <i>true</i>, <code>DeviceBatteryEvent.LEVEL_CHANGE</code> and <code>DeviceBatteryEvent.STATE_CHANGE</code> events will be 
		dispatched whenever changes to the battery level and state occur.
		When set to <i>false</i>, events will not be fired.
		</p>
		]]></description>
<default><![CDATA[false
		]]></default>
<see><![CDATA[DeviceBatteryState
		]]></see>
</method>
<method name='batteryState' fullname='qnx.system:Device/batteryState/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the battery state of the device.
		<p>
		If the <code>batteryMonitoringEnabled</code> property is set to false, DeviceBatteryState.UNKNOWN is returned as the state is unknown. 
		If the <code>batteryMonitoringEnabled</code> property is set to true, the battery state will be returned. 
		</p>
		<p>
		The following are valid values:
		</p>
		<ul>
		<li><code>DeviceBatteryState.UNKNOWN</code></li>
		<li><code>DeviceBatteryState.FULL</code></li>
		<li><code>DeviceBatteryState.CHARGING</code></li>
		<li><code>DeviceBatteryState.UNPLUGGED</code></li>
		</ul>
		
		]]></description>
<default><![CDATA[DeviceBatteryState.UNKNOWN
		]]></default>
<see><![CDATA[DeviceBatteryState
		]]></see>
<see><![CDATA[#batteryMonitoringEnabled
		]]></see>
</method>
<method name='bsn' fullname='qnx.system:Device/bsn/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Returns the board serial number of the device.
		]]></description>
</method>
<method name='device' fullname='qnx.system:Device/device/get' isStatic='true' isFinal='false' isOverride='false'  result_type='qnx.system:Device'>
<description><![CDATA[
		 Gets a <code>Device</code> instance.
		 
		 ]]></description>
<return><![CDATA[Returns the current device instance.
		 ]]></return>
</method>
<method name='hardwareID' fullname='qnx.system:Device/hardwareID/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the Hardware ID of the device.
		]]></description>
</method>
<method name='os' fullname='qnx.system:Device/os/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Returns the OS of the device.
		]]></description>
</method>
<method name='pin' fullname='qnx.system:Device/pin/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		Returns the PIN of the device.
		]]></description>
</method>
<method name='scmBundle' fullname='qnx.system:Device/scmBundle/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Returns the SCM Bundle of the device.
		]]></description>
</method>
<method name='vendorID' fullname='qnx.system:Device/vendorID/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		Returns the Vendor ID of the device.
		]]></description>
</method>
<method name='batteryMonitoringEnabled' fullname='qnx.system:Device/batteryMonitoringEnabled/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<field name='__batteryLevel' fullname='qnx.system:Device/private:__batteryLevel' type='int' isStatic='false' isConst='false' >
</field>
<field name='__batteryMonitoringEnabled' fullname='qnx.system:Device/private:__batteryMonitoringEnabled' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__batteryState' fullname='qnx.system:Device/private:__batteryState' type='int' isStatic='false' isConst='false' >
</field>
<field name='__battery' fullname='qnx.system:Device/private:__battery' type='Device.as$138:DeviceBattery' isStatic='false' isConst='false' >
</field>
<field name='__bsn' fullname='qnx.system:Device/private:__bsn' type='String' isStatic='false' isConst='false' >
</field>
<field name='__hardwareid' fullname='qnx.system:Device/private:__hardwareid' type='int' isStatic='false' isConst='false' >
</field>
<field name='__instance' fullname='qnx.system:Device/private:__instance' type='qnx.system:Device' isStatic='true' isConst='false' >
</field>
<field name='__os' fullname='qnx.system:Device/private:__os' type='String' isStatic='false' isConst='false' >
</field>
<field name='__pin' fullname='qnx.system:Device/private:__pin' type='uint' isStatic='false' isConst='false' >
</field>
<field name='__scmbundle' fullname='qnx.system:Device/private:__scmbundle' type='String' isStatic='false' isConst='false' >
</field>
<field name='__vendorid' fullname='qnx.system:Device/private:__vendorid' type='uint' isStatic='false' isConst='false' >
</field>
<classRec name='LabelPlacement' fullname='qnx.ui.buttons:LabelPlacement' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\LabelPlacement.as' namespace='qnx.ui.buttons' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>LabelPlacement</code> class contains constants that define how a label is placed next to a skin or icon. 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.CheckBox
	 ]]></see>
</classRec>
<field name='BOTTOM' fullname='qnx.ui.buttons:LabelPlacement/BOTTOM' type='String' isStatic='true' isConst='true' defaultValue='labelPlacementBottom' >
<description><![CDATA[
		 Position the label below the skin or icon.
		 ]]></description>
</field>
<field name='LEFT' fullname='qnx.ui.buttons:LabelPlacement/LEFT' type='String' isStatic='true' isConst='true' defaultValue='labelPlacementLeft' >
<description><![CDATA[
		 Position the label to the left side of the skin or icon.
		 ]]></description>
</field>
<field name='RIGHT' fullname='qnx.ui.buttons:LabelPlacement/RIGHT' type='String' isStatic='true' isConst='true' defaultValue='labelPlacementRight' >
<description><![CDATA[
		 Position the label to the right side of the skin or icon.
		 ]]></description>
</field>
<field name='TOP' fullname='qnx.ui.buttons:LabelPlacement/TOP' type='String' isStatic='true' isConst='true' defaultValue='labelPlacementTop' >
<description><![CDATA[
		 Position the label above the skin or icon.
		 ]]></description>
</field>
<classRec name='RadioButtonGroup' fullname='qnx.ui.buttons:RadioButtonGroup' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\RadioButtonGroup.as' namespace='qnx.ui.buttons' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>RadioButtonGroup</code> class contains the functionality for handling a group of related radio buttons.
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.RadioButton
	 ]]></see>
<metadata>
	<Event owner='qnx.ui.buttons:RadioButtonGroup' name='change' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the <code>selection</code> property of the group changes.
	 
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='RadioButtonGroup' fullname='qnx.ui.buttons:RadioButtonGroup/RadioButtonGroup' isStatic='false' isFinal='false' isOverride='false'  param_names='groupname' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Do not use this constructor.
		 
		 <p>
		 Instead, use the <code>getGroup</code> method to create a <code>RadioButtonGroup</code> instance.
		 </p>
		 ]]></description>
<see><![CDATA[#getGroup()
		 ]]></see>
</method>
<method name='addButton' fullname='qnx.ui.buttons:RadioButtonGroup/addButton' isStatic='false' isFinal='false' isOverride='false'  param_names='button' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
		  Adds a button of type <code>RadioButton</code> to the group.
		 
		  
		 ]]></description>
<param><![CDATA[button The button to add to the group. Must be of type <code>RadioButton</code>.
		 ]]></param>
<see><![CDATA[qnx.ui.buttons.RadioButton
		 ]]></see>
</method>
<method name='cleanUpGroups' fullname='qnx.ui.buttons:RadioButtonGroup/private:cleanUpGroups' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getGroup' fullname='qnx.ui.buttons:RadioButtonGroup/getGroup' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='qnx.ui.buttons:RadioButtonGroup'>
<description><![CDATA[
		 Returns a radio button group object given a unique name.
		 Use this method in order to create a new RadioButtonGroup instance.
		 
		 ]]></description>
<param><![CDATA[name The name of the group.
		 ]]></param>
<return><![CDATA[RadioButtonGroup
		 ]]></return>
</method>
<method name='getUniqueId' fullname='qnx.ui.buttons:RadioButtonGroup/getUniqueId' isStatic='true' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns a unique ID to ensure radio group IDs are not duplicated.
		 ]]></description>
<return><![CDATA[A unique int.
		 ]]></return>
</method>
<method name='init' fullname='qnx.ui.buttons:RadioButtonGroup/private:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeButton' fullname='qnx.ui.buttons:RadioButtonGroup/removeButton' isStatic='false' isFinal='false' isOverride='false'  param_names='button' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes the specified button from the group (assuming the button exists).
		 
		 
		 ]]></description>
<param><![CDATA[button The <code>RadioButton</code> to remove from the group.
		 ]]></param>
<see><![CDATA[qnx.ui.buttons.RadioButton
		 ]]></see>
</method>
<method name='setSelectedRadioButton' fullname='qnx.ui.buttons:RadioButtonGroup/setSelectedRadioButton' isStatic='false' isFinal='false' isOverride='false'  param_names='button' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the specified radio button to selected.
		 
		 ]]></description>
<param><![CDATA[button The button to set to selected. Must be of type <code>RadioButton</code>.
		 ]]></param>
<see><![CDATA[qnx.ui.buttons.RadioButton
		 ]]></see>
</method>
<method name='length' fullname='qnx.ui.buttons:RadioButtonGroup/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the number of buttons that have been added to the group.
		 
		 ]]></description>
<return><![CDATA[int An <code>Integer</code> representing the number of buttons in the group.
		 ]]></return>
</method>
<method name='name' fullname='qnx.ui.buttons:RadioButtonGroup/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the name of the group.
		 
		 ]]></description>
<return><![CDATA[A <code>String</code> representing the name of the group.
		 ]]></return>
</method>
<method name='selection' fullname='qnx.ui.buttons:RadioButtonGroup/selection/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.buttons:RadioButton'>
<description><![CDATA[
		 Returns the currently selected radio button.
		 
		 ]]></description>
<return><![CDATA[The selected <code>RadioButton</code>.
		 ]]></return>
<see><![CDATA[qnx.ui.buttons.RadioButton
		 
		 ]]></see>
</method>
<field name='UNIQUEID' fullname='qnx.ui.buttons:RadioButtonGroup/private:UNIQUEID' type='int' isStatic='true' isConst='false' defaultValue='0' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__buttons' fullname='qnx.ui.buttons:RadioButtonGroup/private:__buttons' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__groups' fullname='qnx.ui.buttons:RadioButtonGroup/private:__groups' type='flash.utils:Dictionary' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__name' fullname='qnx.ui.buttons:RadioButtonGroup/private:__name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedRadioButton' fullname='qnx.ui.buttons:RadioButtonGroup/private:__selectedRadioButton' type='qnx.ui.buttons:RadioButton' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='groupCount' fullname='qnx.ui.buttons:RadioButtonGroup/private:groupCount' type='uint' isStatic='true' isConst='false' defaultValue='0' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SegmentedControl' fullname='qnx.ui.buttons:SegmentedControl' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\SegmentedControl.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.core:UIComponent' interfaces='qnx.ui.display:ISizeable;qnx.ui.data:IDataViewer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A segmented control is a series of connected radio buttons that enable the user to select a single item from a list 
	 of multiple items. 
	 
	 <p>
	 You can skin the <code>SegmentedControl</code> component by defining the 
	 background skin and the button skins for the segmented control.	
	 </p>
	 ]]></description>
<metadata>
	<Event owner='qnx.ui.buttons:SegmentedControl' name='change' type='flash.events.Event' >
<description><![CDATA[
	 Dispatches a change event when the selection of the control changes.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='SegmentedControl' fullname='qnx.ui.buttons:SegmentedControl/SegmentedControl' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>SegmentedControl</code> instance.
		 ]]></description>
</method>
<method name='addChildren' fullname='qnx.ui.buttons:SegmentedControl/protected:addChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addItemAt' fullname='qnx.ui.buttons:SegmentedControl/addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to the <code>DataProvider</code> at a given index.
		 <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[index The index at which to add the item.		
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='addItem' fullname='qnx.ui.buttons:SegmentedControl/addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to the <code>DataProvider</code>. 
		 <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The object to add to the <code>DataProvider</code>.
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='addItemsAt' fullname='qnx.ui.buttons:SegmentedControl/addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an array item at the specified index.
		
		]]></description>
<param><![CDATA[items The array of items to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='clearChildren' fullname='qnx.ui.buttons:SegmentedControl/private:clearChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.buttons:SegmentedControl/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableButtons' fullname='qnx.ui.buttons:SegmentedControl/protected:enableButtons' isStatic='false' isFinal='false' isOverride='false'  param_names='enabled' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getIndexByButton' fullname='qnx.ui.buttons:SegmentedControl/private:getIndexByButton' isStatic='false' isFinal='false' isOverride='false'  param_names='b' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getItemAt' fullname='qnx.ui.buttons:SegmentedControl/getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Gets the data object from the <code>dataProvider</code> at a given index.
		 <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[index The index at which to return the item.	
		 ]]></param>
<returns><![CDATA[Object
		 ]]></returns>
</method>
<method name='handleRadioButtonToggle' fullname='qnx.ui.buttons:SegmentedControl/protected:handleRadioButtonToggle' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initButtonSkin' fullname='qnx.ui.buttons:SegmentedControl/protected:initButtonSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.buttons:SegmentedControl/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeButton' fullname='qnx.ui.buttons:SegmentedControl/protected:initializeButton' isStatic='false' isFinal='false' isOverride='false'  param_names='button;data' param_types='qnx.ui.buttons:RadioButton;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutChildren' fullname='qnx.ui.buttons:SegmentedControl/protected:layoutChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.buttons:SegmentedControl/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onButtonAdded' fullname='qnx.ui.buttons:SegmentedControl/protected:onButtonAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onButtonRemoved' fullname='qnx.ui.buttons:SegmentedControl/protected:onButtonRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onDataChange' fullname='qnx.ui.buttons:SegmentedControl/private:onDataChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:DataProviderEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.ui.buttons:SegmentedControl/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionItem' fullname='qnx.ui.buttons:SegmentedControl/protected:positionItem' isStatic='false' isFinal='false' isOverride='false'  param_names='child;previousItem' param_types='flash.display:MovieClip;flash.display:MovieClip' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeAll' fullname='qnx.ui.buttons:SegmentedControl/removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all items from the <code>DataProvider</code>.
		 
		 <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='removeItemAt' fullname='qnx.ui.buttons:SegmentedControl/removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from the <code>DataProvider</code> at a given index.
	     <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[index The index location at which to remove the item.
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='removeItem' fullname='qnx.ui.buttons:SegmentedControl/removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from the <code>DataProvider</code>.
		 <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='replaceItemAt' fullname='qnx.ui.buttons:SegmentedControl/replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces the data at a given index. 
		 <p>
		 Adding or removing an item fires a data provider event, which causes the columns to be cleared and redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The new item to add.
		 ]]></param>
<param><![CDATA[index The index at which to add the itemm.
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='replaceItem' fullname='qnx.ui.buttons:SegmentedControl/replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='newObject;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item with a new item.
		 
		 ]]></description>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[oldObject The current item to replace.
		 
		 ]]></param>
<see><![CDATA[#replaceItemAt()
		 ]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		 
		 ]]></throws>
</method>
<method name='setBackgroundSkin' fullname='qnx.ui.buttons:SegmentedControl/setBackgroundSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the background skin for the segmented control, given a <code>skin</code> object.
		 
		 ]]></description>
<param><![CDATA[skin The skin to use for the background of the segmented control.
		 ]]></param>
</method>
<method name='setButtonSize' fullname='qnx.ui.buttons:SegmentedControl/protected:setButtonSize' isStatic='false' isFinal='false' isOverride='false'  param_names='button;width;height' param_types='qnx.ui.buttons:RadioButton;int;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[button - current Radio Button to initialize
		 ]]></param>
<param><![CDATA[height - height of the component
		 ]]></param>
<param><![CDATA[width - width of each button based on total width of component and number of buttons to draw
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='setButtonSizes' fullname='qnx.ui.buttons:SegmentedControl/protected:setButtonSizes' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setButtonSkin' fullname='qnx.ui.buttons:SegmentedControl/setButtonSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the button skin for the buttons in the segmented control.
		 
		 ]]></description>
<param><![CDATA[skin The button skin.
		 ]]></param>
</method>
<method name='setButtonWidthAtIndex' fullname='qnx.ui.buttons:SegmentedControl/setButtonWidthAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='width;index' param_types='int;int' param_defaults='100;0' result_type='void'>
<description><![CDATA[
		 Sets the button width of an item at the specified index.
		 <p>
		 This operation will override the current width and height of this control, other button widths will not 
		 be changed.
		 </p>
		 ]]></description>
<param><![CDATA[width The new width to set. The default is 100 (pixels).
		 ]]></param>
<param><![CDATA[index The index of the button to set. The default is 0.
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='setDataProvider' fullname='qnx.ui.buttons:SegmentedControl/private:setDataProvider' isStatic='false' isFinal='false' isOverride='false'  param_names='dp' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setEnabled' fullname='qnx.ui.buttons:SegmentedControl/protected:setEnabled' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedButton' fullname='qnx.ui.buttons:SegmentedControl/protected:setSelectedButton' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.buttons:RadioButton' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedIndex' fullname='qnx.ui.buttons:SegmentedControl/protected:setSelectedIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedItem' fullname='qnx.ui.buttons:SegmentedControl/protected:setSelectedItem' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateItemAt' fullname='qnx.ui.buttons:SegmentedControl/updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='value;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the item at the specified index with a new item.
		 
		 ]]></description>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[index The index of the item to replace.
		 
		 ]]></param>
<see><![CDATA[#updateItem()
		 ]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		 
		 ]]></throws>
</method>
<method name='updateItem' fullname='qnx.ui.buttons:SegmentedControl/updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='value;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates an item with a new item at the same position in the data provider.
		 
		 ]]></description>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[oldObject The current item to replace.
		 
		 ]]></param>
<see><![CDATA[#updateItemAt()
		 ]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		 
		 ]]></throws>
</method>
<method name='dataProvider' fullname='qnx.ui.buttons:SegmentedControl/dataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		  Gets or sets the <code>DataProvider</code> object used by the segmented control. 
		 
		 <p>
		 This method is used to draw the columns and apply the data object to each one.
		 </p>
		  ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider
		 ]]></see>
</method>
<method name='selectedIndex' fullname='qnx.ui.buttons:SegmentedControl/selectedIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets the currently selected index.
		 
		 ]]></description>
<default><![CDATA[-1
		 ]]></default>
<return><![CDATA[An <code>Integer</code> representing the currently selected index, or -1 if no index is selected.
		 ]]></return>
</method>
<method name='selectedItem' fullname='qnx.ui.buttons:SegmentedControl/selectedItem/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Gets or sets the currently selected item.
		 
		 
		 ]]></description>
</method>
<method name='dataProvider' fullname='qnx.ui.buttons:SegmentedControl/dataProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_dataProvider' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Setter for dataprovider
		 ]]></description>
<param><![CDATA[DataProvider
		 ]]></param>
<see><![CDATA[qnx.ui.data.DataProvider
		 Used to draw the columns and apply the data object to each one
		 ]]></see>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='selectedIndex' fullname='qnx.ui.buttons:SegmentedControl/selectedIndex/set' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Selected index determines which item should be selected
		 ]]></description>
<param><![CDATA[index
		 ]]></param>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='selectedItem' fullname='qnx.ui.buttons:SegmentedControl/selectedItem/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Set the selected item
		 ]]></description>
<param><![CDATA[value
		 ]]></param>
</method>
<field name='RADIO_GROUP' fullname='qnx.ui.buttons:SegmentedControl/private:RADIO_GROUP' type='String' isStatic='true' isConst='true' defaultValue='SegmentedRadioGroup' >
<description><![CDATA[private]]></description>
</field>
<field name='__bg' fullname='qnx.ui.buttons:SegmentedControl/protected:__bg' type='qnx.ui.skins:ISkin' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__dataProvider' fullname='qnx.ui.buttons:SegmentedControl/private:__dataProvider' type='qnx.ui.data:IDataProvider' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__defaultBackgroundSkin' fullname='qnx.ui.buttons:SegmentedControl/private:__defaultBackgroundSkin' type='String' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__defaultButtonSkin' fullname='qnx.ui.buttons:SegmentedControl/private:__defaultButtonSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__drawnItems' fullname='qnx.ui.buttons:SegmentedControl/private:__drawnItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__groupName' fullname='qnx.ui.buttons:SegmentedControl/private:__groupName' type='String' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__holder' fullname='qnx.ui.buttons:SegmentedControl/private:__holder' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__radioGroup' fullname='qnx.ui.buttons:SegmentedControl/private:__radioGroup' type='qnx.ui.buttons:RadioButtonGroup' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__selectedIndex' fullname='qnx.ui.buttons:SegmentedControl/private:__selectedIndex' type='int' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<field name='__selectedItem' fullname='qnx.ui.buttons:SegmentedControl/private:__selectedItem' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[private]]></description>
</field>
<classRec name='ToggleSwitch' fullname='qnx.ui.buttons:ToggleSwitch' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\ToggleSwitch.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.slider:Slider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ToggleSwitch</code> represents a button that has one of two states indicating an "ON" or "OFF" type state.
	 <p>
	 A toggle switch has a thumb that can be dragged like a <em>Slider</em> but differs in functionality where
	 if you click the track or background of the Toggle Switch, it will change the selected state of the switch.
	 </p>
	 <p>
	 A toggle switch is comprised of a track, thumb and fill and two text labels.
	 </p>
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.Button
	 ]]></see>
</classRec>
<method name='ToggleSwitch' fullname='qnx.ui.buttons:ToggleSwitch/ToggleSwitch' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>ToggleSwitch</code> instance.
		 ]]></description>
</method>
<method name='animateThumbTo' fullname='qnx.ui.buttons:ToggleSwitch/private:animateThumbTo' isStatic='false' isFinal='false' isOverride='false'  param_names='xpos;time' param_types='int;Number' param_defaults='undefined;-1' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='changeSelection' fullname='qnx.ui.buttons:ToggleSwitch/private:changeSelection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawFill' fullname='qnx.ui.buttons:ToggleSwitch/protected:drawFill' isStatic='false' isFinal='false' isOverride='true'  param_names='percent' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawLabel' fullname='qnx.ui.buttons:ToggleSwitch/protected:drawLabel' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.buttons:ToggleSwitch/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTextFormatForState' fullname='qnx.ui.buttons:ToggleSwitch/getTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='flash.text:TextFormat'>
<description><![CDATA[
		Returns the <code>TextFormat</code> object for a specified state.
		]]></description>
<param><![CDATA[state The state for the <code>TextFormat</code> object to return.
		
		]]></param>
<return><![CDATA[The <code>TextFormat</code> object for the specified state.
		
		]]></return>
<see><![CDATA[#setTextFormatForState()
		]]></see>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
</method>
<method name='handleThumbUp' fullname='qnx.ui.buttons:ToggleSwitch/protected:handleThumbUp' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.buttons:ToggleSwitch/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeTextFormatForState' fullname='qnx.ui.buttons:ToggleSwitch/protected:initializeTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setLabelState' fullname='qnx.ui.buttons:ToggleSwitch/protected:setLabelState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setLabels' fullname='qnx.ui.buttons:ToggleSwitch/protected:setLabels' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[items Array of labels to set in the text field
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='setTextFormatForState' fullname='qnx.ui.buttons:ToggleSwitch/setTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='format;state' param_types='flash.text:TextFormat;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Sets the <code>TextFormat</code> object for the label for a given state. Valid states
		are: <code>SkinStates.UP</code>, <code>SkinStates.DOWN</code>, <code>SkinStates.SELECTED</code>, 
		<code>SkinStates.DISABLED</code>.
				]]></description>
<param><![CDATA[format The <code>TextFormat</code> to set.
		]]></param>
<param><![CDATA[state The state for which to change the TextFormat.
		
		]]></param>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
<see><![CDATA[#getTextFormatForState()
		]]></see>
</method>
<method name='trackClick' fullname='qnx.ui.buttons:ToggleSwitch/protected:trackClick' isStatic='false' isFinal='false' isOverride='true'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='defaultLabel' fullname='qnx.ui.buttons:ToggleSwitch/defaultLabel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the <code>String</code> text for the <em>default</em> or <em>OFF</em> label. 
		 
		 ]]></description>
<default><![CDATA["OFF"
		 ]]></default>
<return><![CDATA[String
		 ]]></return>
</method>
<method name='selectedLabel' fullname='qnx.ui.buttons:ToggleSwitch/selectedLabel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets or sets the <code>String</code> text for the <em>selected</em> or <em>ON</em> label.
		 ]]></description>
<return><![CDATA[String
		 ]]></return>
</method>
<method name='selected' fullname='qnx.ui.buttons:ToggleSwitch/selected/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Gets or sets the value of the switch (the position of the thumb).
		 
		 <p>
		 <i>true</i> for <em>ON, selected</em>, <i>false</i> for <em>OFF, unselected</em>.
		 </p>
		 
		 ]]></description>
<return><![CDATA[Returns a <code>Boolean</code> indicating if the switch is in the selected state.
		 ]]></return>
</method>
<method name='defaultLabel' fullname='qnx.ui.buttons:ToggleSwitch/defaultLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_defaultLabel' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the text of the default label.
		 ]]></description>
<param><![CDATA[_defaultLabel:String
		 ]]></param>
<return><![CDATA[void
		 ]]></return>
</method>
<method name='selectedLabel' fullname='qnx.ui.buttons:ToggleSwitch/selectedLabel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_selectedLabel' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the text of the selected label, or OFF label
		 ]]></description>
<param><![CDATA[_defaultLabel:String
		 ]]></param>
<return><![CDATA[void
		 ]]></return>
</method>
<method name='selected' fullname='qnx.ui.buttons:ToggleSwitch/selected/set' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Determines the position of the thumb based on the selected value parameter
		 ]]></description>
<param><![CDATA[bool Boolean
		 ]]></param>
</method>
<field name='__defaultLabel' fullname='qnx.ui.buttons:ToggleSwitch/private:__defaultLabel' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__destX' fullname='qnx.ui.buttons:ToggleSwitch/private:__destX' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedLabel' fullname='qnx.ui.buttons:ToggleSwitch/private:__selectedLabel' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selected' fullname='qnx.ui.buttons:ToggleSwitch/private:__selected' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__textFormats' fullname='qnx.ui.buttons:ToggleSwitch/protected:__textFormats' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='label1_txt' fullname='qnx.ui.buttons:ToggleSwitch/protected:label1_txt' type='flash.text:TextField' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='label2_txt' fullname='qnx.ui.buttons:ToggleSwitch/protected:label2_txt' type='flash.text:TextField' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Button' fullname='qnx.ui.buttons:Button' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\Button.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.core:SkinnableComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>Button</code> class represents a common button.
	 <p>
	 A button consists of a skin, which changes based on the current state of the button.
	 You can create a custom skin by implementing the <em>ISkin</em> interface.
	 A button has an <code>up</code>, <code>down</code>, <code>selected</code>, and <code>disabled</code> state. 
	 </p>
	 <p>
	 You can also use the <code>toggle</code> method to make the button behave like a toggle switch.
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons
	 ]]></see>
</classRec>
<method name='Button' fullname='qnx.ui.buttons:Button/Button' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Constructs a <code>Button</code> instance.
		 ]]></description>
</method>
<method name='clickEvent' fullname='qnx.ui.buttons:Button/private:clickEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='click' fullname='qnx.ui.buttons:Button/protected:click' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='disableMouseEvents' fullname='qnx.ui.buttons:Button/protected:disableMouseEvents' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='downEvent' fullname='qnx.ui.buttons:Button/private:downEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='down' fullname='qnx.ui.buttons:Button/protected:down' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawDeselected' fullname='qnx.ui.buttons:Button/protected:drawDeselected' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawDisabledSelected' fullname='qnx.ui.buttons:Button/protected:drawDisabledSelected' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawDisabled' fullname='qnx.ui.buttons:Button/protected:drawDisabled' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawSelected' fullname='qnx.ui.buttons:Button/protected:drawSelected' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableMouseEvents' fullname='qnx.ui.buttons:Button/protected:enableMouseEvents' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.buttons:Button/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.buttons:Button/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<see><![CDATA[flash.events.Event.ADDED_TO_STAGE 
		 ]]></see>
<private><![CDATA[]]></private>
</method>
<method name='onRollOut' fullname='qnx.ui.buttons:Button/private:onRollOut' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRollOver' fullname='qnx.ui.buttons:Button/private:onRollOver' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeStageUpListener' fullname='qnx.ui.buttons:Button/private:removeStageUpListener' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setEnabled' fullname='qnx.ui.buttons:Button/protected:setEnabled' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelected' fullname='qnx.ui.buttons:Button/protected:setSelected' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='upOutside' fullname='qnx.ui.buttons:Button/private:upOutside' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selected' fullname='qnx.ui.buttons:Button/selected/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets the selected property of the button.
		
		]]></description>
<default><![CDATA[false
		]]></default>
<return><![CDATA[A <code>Boolean</code> indicating if the button is in selected mode.
		]]></return>
</method>
<method name='toggle' fullname='qnx.ui.buttons:Button/toggle/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets the <code>toggle</code> property of the button.
		
		When set to <i>true</i>, the button's selected state is toggled when the button is released.
		]]></description>
<default><![CDATA[false
		]]></default>
<return><![CDATA[A <code>Boolean</code> indicating if the button is in toggle mode.
		]]></return>
</method>
<method name='selected' fullname='qnx.ui.buttons:Button/selected/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toggle' fullname='qnx.ui.buttons:Button/toggle/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__selected' fullname='qnx.ui.buttons:Button/protected:__selected' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__toggle' fullname='qnx.ui.buttons:Button/protected:__toggle' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='LabelButton' fullname='qnx.ui.buttons:LabelButton' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\LabelButton.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.buttons:Button' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>LabelButton</code> class enables you to add a label to your button.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.Button
	 ]]></see>
</classRec>
<method name='LabelButton' fullname='qnx.ui.buttons:LabelButton/LabelButton' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>LabelButton</code> instance.
		 ]]></description>
</method>
<method name='drawLabel' fullname='qnx.ui.buttons:LabelButton/protected:drawLabel' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.buttons:LabelButton/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTextFormatForState' fullname='qnx.ui.buttons:LabelButton/getTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='flash.text:TextFormat'>
<description><![CDATA[
		Returns the <code>TextFormat</code> object for a specified state.
		]]></description>
<param><![CDATA[state The state for the <code>TextFormat</code> object to return.
		
		]]></param>
<return><![CDATA[The <code>TextFormat</code> object for the specified state.
		
		]]></return>
<see><![CDATA[#setTextFormatForState()
		]]></see>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
</method>
<method name='init' fullname='qnx.ui.buttons:LabelButton/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeTextFormatForState' fullname='qnx.ui.buttons:LabelButton/protected:initializeTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<param><![CDATA[state The state for which  to initialize the <code>TextFormat</code> object.
		]]></param>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
<see><![CDATA[#setTextFormatForState()
		]]></see>
<private><![CDATA[]]></private>
</method>
<method name='setLabelState' fullname='qnx.ui.buttons:LabelButton/protected:setLabelState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setLabel' fullname='qnx.ui.buttons:LabelButton/protected:setLabel' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setState' fullname='qnx.ui.buttons:LabelButton/protected:setState' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setTextFormatForState' fullname='qnx.ui.buttons:LabelButton/setTextFormatForState' isStatic='false' isFinal='false' isOverride='false'  param_names='format;state' param_types='flash.text:TextFormat;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Sets the <code>TextFormat</code> object for the label for a given state. Valid states
		are: <code>SkinStates.UP</code>, <code>SkinStates.DOWN</code>, <code>SkinStates.SELECTED</code>, 
		<code>SkinStates.DISABLED</code>.
				]]></description>
<param><![CDATA[format The <code>TextFormat</code> to set.
		]]></param>
<param><![CDATA[state The state for which to change the TextFormat.
		
		]]></param>
<see><![CDATA[qnx.ui.skins.SkinStates
		]]></see>
<see><![CDATA[#getTextFormatForState()
		]]></see>
</method>
<method name='embedFonts' fullname='qnx.ui.buttons:LabelButton/embedFonts/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
				Gets or sets the <code>embedFonts</code> property of the internal <code>TextField</code> of the <code>LabelButton</code>.
		<p>
		When set to <i>false</i>, fonts are rendered as device fonts.
		When set to <i>true</i>, you must specify a font using the <code>font</code> property of a <code>TextFormat</code> object and 
		set it using the setTextFormatForState() method.
		</p>
		<p>
		This font must be included in your application. If it is not included, the text will not be rendererd.
		</p>
		]]></description>
<default><![CDATA[false
		]]></default>
<see><![CDATA[#setTextFormatForState()
		]]></see>
</method>
<method name='label' fullname='qnx.ui.buttons:LabelButton/label/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the label for the button. 
		]]></description>
</method>
<method name='embedFonts' fullname='qnx.ui.buttons:LabelButton/embedFonts/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='label' fullname='qnx.ui.buttons:LabelButton/label/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__embedFonts' fullname='qnx.ui.buttons:LabelButton/private:__embedFonts' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__label' fullname='qnx.ui.buttons:LabelButton/protected:__label' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__textFormats' fullname='qnx.ui.buttons:LabelButton/protected:__textFormats' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='label_txt' fullname='qnx.ui.buttons:LabelButton/label_txt' type='flash.text:TextField' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='IconButton' fullname='qnx.ui.buttons:IconButton' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\IconButton.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.buttons:Button' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>IconButton</code> class enables you to place an icon at the center of a button.
	 ]]></description>
</classRec>
<method name='IconButton' fullname='qnx.ui.buttons:IconButton/IconButton' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Constructs an <code>IconButton</code> instance.
		 ]]></description>
</method>
<method name='drawIcon' fullname='qnx.ui.buttons:IconButton/private:drawIcon' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='draw' fullname='qnx.ui.buttons:IconButton/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onImageLoaded' fullname='qnx.ui.buttons:IconButton/private:onImageLoaded' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='setIcon' fullname='qnx.ui.buttons:IconButton/setIcon' isStatic='false' isFinal='false' isOverride='false'  param_names='image' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Sets the icon for the Button. The icon is positioned in the center of the button.
			
		]]></description>
<param><![CDATA[image The icon to be set. A <code>String</code> representing the URL to an external image, a Bitmap instance, 
		or a <code>BitmapData</code> instance.
		]]></param>
</method>
<field name='icon' fullname='qnx.ui.buttons:IconButton/icon' type='flash.display:Bitmap' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='DropDownButton' fullname='qnx.ui.buttons:DropDownButton' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\DropDownButton.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.buttons:LabelButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>DropDownButton</code> class represents the top button in the <code>DropDown</code> list. It contains the label
	 used to highlight the selected item. You can click on the <code>DropDownButton</code> to open and close the list. 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.DropDown
	 ]]></see>
</classRec>
<method name='DropDownButton' fullname='qnx.ui.buttons:DropDownButton/DropDownButton' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>DropDownButton</code> instance.
		 ]]></description>
</method>
<method name='drawLabel' fullname='qnx.ui.buttons:DropDownButton/protected:drawLabel' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.buttons:DropDownButton/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setLabelState' fullname='qnx.ui.buttons:DropDownButton/protected:setLabelState' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__rightMargin' fullname='qnx.ui.buttons:DropDownButton/protected:__rightMargin' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CheckBox' fullname='qnx.ui.buttons:CheckBox' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\CheckBox.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.buttons:LabelButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>CheckBox</code> class is a simple subclass of the <code>LabelButton</code> class. The <code>CheckBox</code> 
	 class has its <code>toggle</code> property set to <em>true</em> and cannot be changed.
	 
	 <p>
	 In the following example, a new check box is instantiated and added to the list of display items. The check box 
	 label is placed to the right of the check box component.
	 </p>
	 
	 <listing>
	 var cb:CheckBox = new CheckBox();
	 addChild( cb );
	 cb.label ="Select";
	 cb.width = 150;
	 cb.y = label3.y + label3.height + 10;
	 cb.labelPlacement = LabelPlacement.RIGHT;
	 </listing>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.Button	 
	 ]]></see>
</classRec>
<method name='CheckBox' fullname='qnx.ui.buttons:CheckBox/CheckBox' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>CheckBox</code> instance.
		 ]]></description>
</method>
<method name='down' fullname='qnx.ui.buttons:CheckBox/protected:down' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawLabel' fullname='qnx.ui.buttons:CheckBox/protected:drawLabel' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.buttons:CheckBox/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.buttons:CheckBox/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeTextFormatForState' fullname='qnx.ui.buttons:CheckBox/protected:initializeTextFormatForState' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutChildren' fullname='qnx.ui.buttons:CheckBox/protected:layoutChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<method name='labelPadding' fullname='qnx.ui.buttons:CheckBox/labelPadding/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets a value that determines the padding between the label and the skin/icon.
		 
		 ]]></description>
<default><![CDATA[0
		 ]]></default>
<param><![CDATA[value The int value that specifies the padding.
		 ]]></param>
</method>
<method name='labelPlacement' fullname='qnx.ui.buttons:CheckBox/labelPlacement/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 
		 Gets or sets the placement of the label according to the skin. 
		 <p>
		 Can be one of:
		 <ul>
		 <li><code>LabelPlacement.RIGHT</code></li>
		 <li><code>LabelPlacement.LEFT</code></li>
		 <li><code>LabelPlacement.TOP</code></li>
		 <li><code>LabelPlacement.BOTTOM</code></li>
		 </ul>
		 
		 </p>
		 
		 ]]></description>
<default><![CDATA[<code>LabelPlacement.RIGHT</code>
		 ]]></default>
<see><![CDATA[qnx.ui.buttons.LabelPlacement
		 ]]></see>
</method>
<method name='labelPadding' fullname='qnx.ui.buttons:CheckBox/labelPadding/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[]]></description>
<default><![CDATA[0
		 ]]></default>
<param><![CDATA[value The int value
		 ]]></param>
<public><![CDATA[
		 Value used to set the padding between the label and the skin/icon
		 ]]></public>
</method>
<method name='labelPlacement' fullname='qnx.ui.buttons:CheckBox/labelPlacement/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Gets or sets the placement of the label according to the skin. 
		 <p>
		 The label can be placed to the right, left, top, or bottom of the skin by using one of the following 
		 <code>LabelPlacement</code> properties:
		 <ul>
		 <li>LabelPlacement.RIGHT</li>
		 <li>LabelPlacement.LEFT</li>
		 <li>LabelPlacement.BOTTOM</li>
		 <li>LabelPlacement.TOP</li>
		 </ul>
		 </p>
		 ]]></description>
<default><![CDATA[<code>LabelPlacement.RIGHT</code>
		 ]]></default>
<param><![CDATA[str A <code>String</code> representing the position of the label.
		 ]]></param>
<see><![CDATA[qnx.ui.buttons.LabelPlacement
		 ]]></see>
</method>
<method name='toggle' fullname='qnx.ui.buttons:CheckBox/toggle/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__hitSprite' fullname='qnx.ui.buttons:CheckBox/private:__hitSprite' type='flash.display:Shape' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__labelPadding' fullname='qnx.ui.buttons:CheckBox/private:__labelPadding' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__labelPlacement' fullname='qnx.ui.buttons:CheckBox/private:__labelPlacement' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='RadioButton' fullname='qnx.ui.buttons:RadioButton' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\buttons\RadioButton.as' namespace='qnx.ui.buttons' access='public' baseclass='qnx.ui.buttons:LabelButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>RadioButton</code> component lets you force a user to make a single selection from a set of choices. 
	 This component must be used in a group of at least two <code>RadioButton</code> instances. 
	 You can only select one member of the group at any given time.
	 Selecting one radio button in a group deselects the currently selected radio button in the group. 
	 You can set the <code>groupname</code> parameter to indicate which group a radio button belongs to. 
	 <p>
	 In the following code listing, three radio buttons are created and arranged on the background:
	 </p>
	 <listing version="3.0">
	 var rb1:RadioButton = new RadioButton();
	 rb1.label = "Meal option 1";
	 addChild( rb1 );
	 
	 var rb2:RadioButton = new RadioButton();
     rb2.label = "Meal option 2";
	 addChild( rb2 );
	 rb2.x = rb1.width + 10 + rb1.x;
	 	
	 var rb3:RadioButton = new RadioButton();
	 rb3.label = "Meal option 3";
	 addChild( rb3 );
	 rb3.x = rb2.width + 10 + rb2.x;
	 </listing>
	 <p>
	 The <code>x</code> properties of each button are set using the height and width, and coordinate values
	 of each previously created, adjacent button.
	 </p>
	 ]]></description>
</classRec>
<method name='RadioButton' fullname='qnx.ui.buttons:RadioButton/RadioButton' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Constructs a new <code>RadioButton</code> instance. 
		 ]]></description>
</method>
<method name='click' fullname='qnx.ui.buttons:RadioButton/protected:click' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.buttons:RadioButton/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.buttons:RadioButton/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.ui.buttons:RadioButton/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeFromGroup' fullname='qnx.ui.buttons:RadioButton/private:removeFromGroup' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='setEnabled' fullname='qnx.ui.buttons:RadioButton/protected:setEnabled' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setGroup' fullname='qnx.ui.buttons:RadioButton/private:setGroup' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='setSelected' fullname='qnx.ui.buttons:RadioButton/protected:setSelected' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='groupname' fullname='qnx.ui.buttons:RadioButton/groupname/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[ 
		Sets the group for which the <code>RadioButton</code> belongs to.
		<p>
		A <code>RadioButton</code> can only belong to a single group at any given time.
		</p>
		]]></description>
<default><![CDATA[QNXRadioButtonGroup
		]]></default>
</method>
<method name='groupname' fullname='qnx.ui.buttons:RadioButton/groupname/set' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='__group' fullname='qnx.ui.buttons:RadioButton/protected:__group' type='qnx.ui.buttons:RadioButtonGroup' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__groupname' fullname='qnx.ui.buttons:RadioButton/private:__groupname' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='NavControllerEvent' fullname='qnx.ui.events:NavControllerEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\events\NavControllerEvent.as' namespace='qnx.ui.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  ]]></description>
<see><![CDATA[qnx.views.NavController
	  ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='NavControllerEvent' fullname='qnx.ui.events:NavControllerEvent/NavControllerEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;bubbles;cancelable' param_types='String;Boolean;Boolean' param_defaults='undefined;false;false' result_type='*'>
<description><![CDATA[
		 Creates a new NavControllerEvent instance.
		 
		 ]]></description>
<param><![CDATA[type The event type.
		 ]]></param>
<param><![CDATA[bubbles A <code>Boolean</code> that determines whether or not the event will bubble. <code>False</code>
		 by default.
		 ]]></param>
<param><![CDATA[cancelable A <code>Boolean</code> that determines whether or not the event can be cancelled.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.ui.events:NavControllerEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.ui.events:NavControllerEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='VIEW_CHANGED' fullname='qnx.ui.events:NavControllerEvent/VIEW_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='navControllerEvent_view_changed' >
<description><![CDATA[
		 A constant indicating that a view change operation has completed.
		 ]]></description>
</field>
<field name='VIEW_CHANGING' fullname='qnx.ui.events:NavControllerEvent/VIEW_CHANGING' type='String' isStatic='true' isConst='true' defaultValue='navControllerEvent_view_changing' >
<description><![CDATA[
		 A constant indicating that a view change has started.
		 ]]></description>
</field>
<classRec name='DataProviderEvent' fullname='qnx.ui.events:DataProviderEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\events\DataProviderEvent.as' namespace='qnx.ui.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  A <code>DataProviderEvent</code> object is dispatched into the event flow whenever a <code>DataProvider</code> change occurs. A change occurs
	  through modification of the data provider by adding, removing, replacing, updating.
	  
	  ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider
	  ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider
	  ]]></see>
</classRec>
<method name='DataProviderEvent' fullname='qnx.ui.events:DataProviderEvent/DataProviderEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='changeType;items;startIndex;endIndex;childStartIndex;childEndIndex' param_types='String;Array;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;-1;-1' result_type='*'>
<description><![CDATA[
		 Constructs a <code>DataProviderEvent</code> object.
		 
		 ]]></description>
<param><![CDATA[changeType The type of change that occured.
		 ]]></param>
<param><![CDATA[items An Array of the items that where modified.
		 ]]></param>
<param><![CDATA[startIndex The start index of the items that were modified in the data provider.
		 ]]></param>
<param><![CDATA[endIndex The end index of the items that were modified in the data provider.
		 ]]></param>
<param><![CDATA[childStartIndex The start index of the children items that were modified in the data provider.
		 ]]></param>
<param><![CDATA[childEndIndex The end index of the children items that were modified in the data provider.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.ui.events:DataProviderEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.ui.events:DataProviderEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='changeType' fullname='qnx.ui.events:DataProviderEvent/changeType/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets the type of change that occured on the data provider.
		 
		 ]]></description>
<see><![CDATA[#ADD_ITEM
		 ]]></see>
<see><![CDATA[#REPLACE_ITEM
		 ]]></see>
<see><![CDATA[#REMOVE_ITEM
		 ]]></see>
<see><![CDATA[#UPDATE_ALL
		 ]]></see>
<see><![CDATA[#UPDATE_ITEM
		 ]]></see>
<see><![CDATA[#REMOVE_ALL
		 ]]></see>
<see><![CDATA[#ADD_CHILD
		 ]]></see>
<see><![CDATA[#REMOVE_CHILD
		 ]]></see>
<see><![CDATA[#REPLACE_CHILD
		 ]]></see>
<see><![CDATA[#UPDATE_ALL_CHILDREN
		 ]]></see>
<see><![CDATA[#REMOVE_ALL_CHILDREN
		 ]]></see>
<see><![CDATA[#UPDATE_CHILD
		 ]]></see>
</method>
<method name='childEndIndex' fullname='qnx.ui.events:DataProviderEvent/childEndIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the end index of the child items that where modified in a <code>SectionDataProvider</code>.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider
		 ]]></see>
</method>
<method name='childStartIndex' fullname='qnx.ui.events:DataProviderEvent/childStartIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the start index of the child items that where modified in a <code>SectionDataProvider</code>.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider
		 ]]></see>
</method>
<method name='endIndex' fullname='qnx.ui.events:DataProviderEvent/endIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the end index of the items that were modified.
		 ]]></description>
</method>
<method name='items' fullname='qnx.ui.events:DataProviderEvent/items/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Gets the items that have been modified
		 ]]></description>
</method>
<method name='startIndex' fullname='qnx.ui.events:DataProviderEvent/startIndex/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets the start index of the items that were modified.
		 ]]></description>
</method>
<field name='ADD_CHILD' fullname='qnx.ui.events:DataProviderEvent/ADD_CHILD' type='String' isStatic='true' isConst='true' defaultValue='addChild' >
<description><![CDATA[
		 Dispatched when children have been added to an item in a section data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider#addChildToItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#addChildToItemAtIndex
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#addChildToIndex
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#addChildToIndexAt
		 ]]></see>
</field>
<field name='ADD_ITEM' fullname='qnx.ui.events:DataProviderEvent/ADD_ITEM' type='String' isStatic='true' isConst='true' defaultValue='addItem' >
<description><![CDATA[
		 Dispatched when items have been added to a data provider.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider#addItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.DataProvider#addItemAt
		 ]]></see>
</field>
<field name='DATA_CHANGE' fullname='qnx.ui.events:DataProviderEvent/DATA_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='dataChange' >
<description><![CDATA[
		 The event type for the DataProviderEvent.
		 ]]></description>
</field>
<field name='REMOVE_ALL_CHILDREN' fullname='qnx.ui.events:DataProviderEvent/REMOVE_ALL_CHILDREN' type='String' isStatic='true' isConst='true' defaultValue='removeChildren' >
<description><![CDATA[
		 Dispatched when all children have been removed from an item in a section data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider#removeAllChildrenFromIndex
		 ]]></see>
</field>
<field name='REMOVE_ALL' fullname='qnx.ui.events:DataProviderEvent/REMOVE_ALL' type='String' isStatic='true' isConst='true' defaultValue='removeAll' >
<description><![CDATA[
		 Dispatched when all items have been removed from the data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider#removeAll()
		 ]]></see>
</field>
<field name='REMOVE_CHILD' fullname='qnx.ui.events:DataProviderEvent/REMOVE_CHILD' type='String' isStatic='true' isConst='true' defaultValue='removeChild' >
<description><![CDATA[
		 Dispatched when children have been removed from an item in a section data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider#removeChildFromItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#removeChildFromItemAt
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#removeChildFromIndex
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#removeChildFromIndexAt
		 ]]></see>
</field>
<field name='REMOVE_ITEM' fullname='qnx.ui.events:DataProviderEvent/REMOVE_ITEM' type='String' isStatic='true' isConst='true' defaultValue='removeItem' >
<description><![CDATA[
		 Dispatched when items have been removed from a data provider.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider#removeItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.DataProvider#removeItemAt
		 ]]></see>
</field>
<field name='REPLACE_CHILD' fullname='qnx.ui.events:DataProviderEvent/REPLACE_CHILD' type='String' isStatic='true' isConst='true' defaultValue='replaceChild' >
<description><![CDATA[
		 Dispatched when children have been replaced from an item in a section data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider#replaceChildInItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#replaceChildInItemAt
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#replaceChildInIndex
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#replaceChildInIndexAt
		 ]]></see>
</field>
<field name='REPLACE_ITEM' fullname='qnx.ui.events:DataProviderEvent/REPLACE_ITEM' type='String' isStatic='true' isConst='true' defaultValue='replaceItem' >
<description><![CDATA[
		 Dispatched when items have been replaced in the data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider#replaceItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.DataProvider#replaceItemAt
		 ]]></see>
</field>
<field name='UPDATE_ALL_CHILDREN' fullname='qnx.ui.events:DataProviderEvent/UPDATE_ALL_CHILDREN' type='String' isStatic='true' isConst='true' defaultValue='updateChildren' >
<description><![CDATA[
		 Dispatched when all children have been updated in an item in a section data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider#setChildrenForItem
		 ]]></see>
</field>
<field name='UPDATE_ALL' fullname='qnx.ui.events:DataProviderEvent/UPDATE_ALL' type='String' isStatic='true' isConst='true' defaultValue='updateAll' >
<description><![CDATA[
		 Dispatched when all the items have been updated in the data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider#setItems
		 ]]></see>
</field>
<field name='UPDATE_CHILD' fullname='qnx.ui.events:DataProviderEvent/UPDATE_CHILD' type='String' isStatic='true' isConst='true' defaultValue='updateChild' >
<description><![CDATA[
		 Dispatched when a child has been updated from an item in a section data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.SectionDataProvider#updateChildInItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#updateChildInItemAt
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#updateChildInIndex
		 ]]></see>
<see><![CDATA[qnx.ui.data.SectionDataProvider#updateChildInIndexAt
		 ]]></see>
</field>
<field name='UPDATE_ITEM' fullname='qnx.ui.events:DataProviderEvent/UPDATE_ITEM' type='String' isStatic='true' isConst='true' defaultValue='updateItem' >
<description><![CDATA[
		 Dispatched when items have been updated in the data provider.
		 ]]></description>
<see><![CDATA[qnx.ui.data.DataProvider#updateItem
		 ]]></see>
<see><![CDATA[qnx.ui.data.DataProvider#updateItemAt
		 ]]></see>
</field>
<field name='__changeType' fullname='qnx.ui.events:DataProviderEvent/private:__changeType' type='String' isStatic='false' isConst='false' >
</field>
<field name='__childEndIndex' fullname='qnx.ui.events:DataProviderEvent/private:__childEndIndex' type='int' isStatic='false' isConst='false' >
</field>
<field name='__childStartIndex' fullname='qnx.ui.events:DataProviderEvent/private:__childStartIndex' type='int' isStatic='false' isConst='false' >
</field>
<field name='__endIndex' fullname='qnx.ui.events:DataProviderEvent/private:__endIndex' type='int' isStatic='false' isConst='false' >
</field>
<field name='__items' fullname='qnx.ui.events:DataProviderEvent/private:__items' type='Array' isStatic='false' isConst='false' >
</field>
<field name='__startIndex' fullname='qnx.ui.events:DataProviderEvent/private:__startIndex' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='ScrollEvent' fullname='qnx.ui.events:ScrollEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\events\ScrollEvent.as' namespace='qnx.ui.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 A <code>ScrollEvent</code> object is dispatched by scrollable objects.

	 ]]></description>
</classRec>
<method name='ScrollEvent' fullname='qnx.ui.events:ScrollEvent/ScrollEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;deltaX;deltaY;phase' param_types='String;Number;Number;String' param_defaults='undefined;0;0;null' result_type='*'>
<description><![CDATA[

		 Creates a <code>ScrollEvent</code> instance that contains information about Scroll events.

		 <p>

		 Event objects are passed as parameters to event listeners.

		 </p>

		 ]]></description>
<param><![CDATA[type (String) The type of event.

		 ]]></param>
<param><![CDATA[deltaX The delta of the X axis.

		 ]]></param>
<param><![CDATA[deltaY The delta of the Y axis.

		 ]]></param>
<param><![CDATA[phase The phase of the scroll.

		 ]]></param>
</method>
<method name='clone' fullname='qnx.ui.events:ScrollEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.ui.events:ScrollEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='deltaX' fullname='qnx.ui.events:ScrollEvent/deltaX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[

		 Gets the delta of the <code>x</code> property of the object from its previous position.

		 ]]></description>
</method>
<method name='deltaY' fullname='qnx.ui.events:ScrollEvent/deltaY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[

		 Gets the delta of the <code>y</code> property of the object from its previous position.

		 ]]></description>
</method>
<method name='phase' fullname='qnx.ui.events:ScrollEvent/phase/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[

		 Gets the phase of the scroll event.

		 ]]></description>
</method>
<field name='SCROLL_BEGIN' fullname='qnx.ui.events:ScrollEvent/SCROLL_BEGIN' type='String' isStatic='true' isConst='true' defaultValue='scrollBegin' >
<description><![CDATA[

		 Dispatched when scrolling begins.

		 ]]></description>
</field>
<field name='SCROLL_END' fullname='qnx.ui.events:ScrollEvent/SCROLL_END' type='String' isStatic='true' isConst='true' defaultValue='scrollEnd' >
<description><![CDATA[

		 Dispatched when scrolling ends.

		 ]]></description>
</field>
<field name='SCROLL_MOVE' fullname='qnx.ui.events:ScrollEvent/SCROLL_MOVE' type='String' isStatic='true' isConst='true' defaultValue='scrollMove' >
<description><![CDATA[

		 Dispatched when scrolling occurs.

		 ]]></description>
</field>
<field name='__deltaX' fullname='qnx.ui.events:ScrollEvent/private:__deltaX' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__deltaY' fullname='qnx.ui.events:ScrollEvent/private:__deltaY' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__phase' fullname='qnx.ui.events:ScrollEvent/private:__phase' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='ListEvent' fullname='qnx.ui.events:ListEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\events\ListEvent.as' namespace='qnx.ui.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	   A <code>ListEvent</code> object contains list and cell renderer interaction events.
	  ]]></description>
</classRec>
<method name='ListEvent' fullname='qnx.ui.events:ListEvent/ListEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;data;index;row;column;section' param_types='String;Object;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;undefined;0' result_type='*'>
<description><![CDATA[
		Creates a <code>ListEvent</code> instance.
		<p>
		This event is dispatched by the List component.
		</p>
		]]></description>
<param><![CDATA[type The type of the event.
		]]></param>
<param><![CDATA[data The data for the item in the list.
		]]></param>
<param><![CDATA[index The index of the item in the list.
		]]></param>
<param><![CDATA[row The row of the item in the list.
		]]></param>
<param><![CDATA[column The column of the item in list.
		]]></param>
<param><![CDATA[section The section of the item in the list.
		
		]]></param>
<see><![CDATA[qnx.ui.listClasses.List
		]]></see>
</method>
<method name='clone' fullname='qnx.ui.events:ListEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.ui.events:ListEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='column' fullname='qnx.ui.events:ListEvent/column/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the column of the cell renderer that was clicked in the list.
		
		]]></description>
<return><![CDATA[The index of the column.
		]]></return>
</method>
<method name='data' fullname='qnx.ui.events:ListEvent/data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		Returns the data of the cell renderer that was clicked in the list.
		
		]]></description>
<return><![CDATA[The cell renderer data object.
		]]></return>
</method>
<method name='index' fullname='qnx.ui.events:ListEvent/index/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the index of the cell renderer that was clicked in the list.
		
		]]></description>
<return><![CDATA[The index of the cell renderer.
		]]></return>
</method>
<method name='row' fullname='qnx.ui.events:ListEvent/row/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the row of the cell renderer that was clicked in the list.
		
		]]></description>
<return><![CDATA[The index of the row.
		]]></return>
</method>
<method name='section' fullname='qnx.ui.events:ListEvent/section/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the section of the cell renderer that was clicked in the list.
		
		]]></description>
<return><![CDATA[The index of the section.
		]]></return>
</method>
<field name='ITEM_CLICKED' fullname='qnx.ui.events:ListEvent/ITEM_CLICKED' type='String' isStatic='true' isConst='true' defaultValue='listItemClicked' >
<description><![CDATA[
		 Dispatched when a cell renderer is clicked.
		 ]]></description>
</field>
<field name='__column' fullname='qnx.ui.events:ListEvent/private:__column' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__data' fullname='qnx.ui.events:ListEvent/private:__data' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__index' fullname='qnx.ui.events:ListEvent/private:__index' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__row' fullname='qnx.ui.events:ListEvent/private:__row' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__section' fullname='qnx.ui.events:ListEvent/private:__section' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='MediaControlEvent' fullname='qnx.ui.events:MediaControlEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\events\MediaControlEvent.as' namespace='qnx.ui.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaControlEvent</code> is dispatched by the MediaControl component.
	 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControl
	 ]]></see>
</classRec>
<method name='MediaControlEvent' fullname='qnx.ui.events:MediaControlEvent/MediaControlEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;property' param_types='String;String' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 Constructs a <code>MediaControl</code> object.
		 ]]></description>
<param><![CDATA[type The type of MediaControlEvent.
		 ]]></param>
<param><![CDATA[property The property that changed.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.ui.events:MediaControlEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.ui.events:MediaControlEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='property' fullname='qnx.ui.events:MediaControlEvent/property/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets the property, state or option of the <code>MediaControl</code> class that triggered the event.
		 ]]></description>
</method>
<field name='OPTION_CLICK' fullname='qnx.ui.events:MediaControlEvent/OPTION_CLICK' type='String' isStatic='true' isConst='true' defaultValue='optionClicked' >
<description><![CDATA[
		 Dispatched when the next and previous buttons are clicked in a <code>MediaControl</code> instance.
		 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControlOption#NEXT
		 ]]></see>
<see><![CDATA[qnx.ui.media.MediaControlOption#PREVIOUS
		 ]]></see>
</field>
<field name='PROPERTY_CHANGE' fullname='qnx.ui.events:MediaControlEvent/PROPERTY_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='propertyChange' >
<description><![CDATA[
		 Dispatched when a property has changed on a <code>MediaControl</code> instance.
		 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControlProperty
		 ]]></see>
</field>
<field name='STATE_CHANGE' fullname='qnx.ui.events:MediaControlEvent/STATE_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='stateChange' >
<description><![CDATA[
		 Dispatched when the state of a MediaControl instance changes.
		 ]]></description>
<see><![CDATA[qnx.ui.media.MediaControlState
		 ]]></see>
</field>
<field name='__property' fullname='qnx.ui.events:MediaControlEvent/private:__property' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='SliderEvent' fullname='qnx.ui.events:SliderEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\events\SliderEvent.as' namespace='qnx.ui.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>Slider</code> class uses this event class to notify subscribers of slider events.

	 ]]></description>
<see><![CDATA[qnx.ui.slider.Slider

	 ]]></see>
</classRec>
<method name='SliderEvent' fullname='qnx.ui.events:SliderEvent/SliderEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;value' param_types='String;Number' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[

		 Constructs a <code>SliderEvent</code> object.

		 

		 ]]></description>
<param><![CDATA[type The type of slider event.

		 ]]></param>
<param><![CDATA[value The value of slider event.

		 ]]></param>
</method>
<method name='clone' fullname='qnx.ui.events:SliderEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.ui.events:SliderEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='value' fullname='qnx.ui.events:SliderEvent/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[

		 Gets or sets the slider value.

		 

		 ]]></description>
<see><![CDATA[qnx.ui.slider.Slider#value

		 ]]></see>
</method>
<method name='value' fullname='qnx.ui.events:SliderEvent/value/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='END' fullname='qnx.ui.events:SliderEvent/END' type='String' isStatic='true' isConst='true' defaultValue='slider_drag_ended' >
<description><![CDATA[ Dispatched when a drag event ends. ]]></description>
</field>
<field name='MOVE' fullname='qnx.ui.events:SliderEvent/MOVE' type='String' isStatic='true' isConst='true' defaultValue='slider_move' >
<description><![CDATA[ Dispatched when the slider is moved by the user. ]]></description>
</field>
<field name='START' fullname='qnx.ui.events:SliderEvent/START' type='String' isStatic='true' isConst='true' defaultValue='slider_drag_started' >
<description><![CDATA[ Dispatched when a drag event starts. ]]></description>
</field>
<field name='__value' fullname='qnx.ui.events:SliderEvent/private:__value' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<interfaceRec name='IScroller' fullname='qnx.ui.tween:IScroller' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\tween\IScroller.as' namespace='qnx.ui.tween' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='dispose' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='scrollEnd' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:scrollEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollMove' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:scrollMove' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollStart' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:scrollStart' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollTo' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:scrollTo' isStatic='false' isFinal='false' isOverride='false'  param_names='pos;time' param_types='Number;Number' param_defaults='undefined;1.0' result_type='void'>
</method>
<method name='setScrollPosition' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:setScrollPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='pos' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='stopScroll' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:stopScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='dragging' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:dragging/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='scrolling' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:scrolling/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='vmax' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:vmax/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='vmin' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:vmin/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='windowSize' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:windowSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='vmax' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:vmax/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='vmin' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:vmin/set' isStatic='false' isFinal='false' isOverride='false'  param_names='num' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='windowSize' fullname='qnx.ui.tween:IScroller/qnx.ui.tween:IScroller:windowSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<classRec name='Scroller' fullname='qnx.ui.tween:Scroller' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\tween\Scroller.as' namespace='qnx.ui.tween' access='public' baseclass='flash.events:EventDispatcher' interfaces='qnx.ui.tween:IScroller' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='Scroller' fullname='qnx.ui.tween:Scroller/Scroller' isStatic='false' isFinal='false' isOverride='false'  param_names='mc;vwidth;vheight;mwidth;mheight;vertical;_scrollThreshold;single' param_types='flash.display:DisplayObjectContainer;Number;Number;Number;Number;Boolean;Number;Boolean' param_defaults='undefined;undefined;undefined;undefined;undefined;false;20;true' result_type='*'>
<description><![CDATA[
		 Constructs a new instance of the Scroller class.
		 		 ]]></description>
<param><![CDATA[mc   The movie clip for which to add scrolling support.
		 ]]></param>
<param><![CDATA[vwidth The virtual width of the scroll area.
		 ]]></param>
<param><![CDATA[vheight The virtual height of the scroll area.
		 ]]></param>
<param><![CDATA[mwidth The width of the movie clip.
		 ]]></param>
<param><![CDATA[mheight The height of the movie clip.
		 ]]></param>
<param><![CDATA[vertical A Boolean indicating whether to scroll vertically or horizontally.
		 ]]></param>
</method>
<method name='dispose' fullname='qnx.ui.tween:Scroller/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		  Stops the scroller.
		  ]]></description>
</method>
<method name='onScrollMoved' fullname='qnx.ui.tween:Scroller/protected:onScrollMoved' isStatic='false' isFinal='false' isOverride='false'  param_names='nowM' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollComplete' fullname='qnx.ui.tween:Scroller/protected:scrollComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollEnd' fullname='qnx.ui.tween:Scroller/scrollEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sends an update that a scroll operation has ended.
		 ]]></description>
<param><![CDATA[val The position of the scroller.
		 ]]></param>
</method>
<method name='scrollMove' fullname='qnx.ui.tween:Scroller/scrollMove' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sends an update that the scroller has moved.
		 ]]></description>
<param><![CDATA[val The position of the scroller.
		 ]]></param>
</method>
<method name='scrollPress' fullname='qnx.ui.tween:Scroller/private:scrollPress' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollRelease' fullname='qnx.ui.tween:Scroller/protected:scrollRelease' isStatic='false' isFinal='false' isOverride='false'  param_names='nowM' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollStart' fullname='qnx.ui.tween:Scroller/scrollStart' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sends an update that a scroll operation has started.
		 ]]></description>
<param><![CDATA[val The position of the scroller.
		 ]]></param>
</method>
<method name='scrollTo' fullname='qnx.ui.tween:Scroller/scrollTo' isStatic='false' isFinal='false' isOverride='false'  param_names='pos;time' param_types='Number;Number' param_defaults='undefined;1.0' result_type='void'>
<description><![CDATA[
		 Scrolls to a position within the scrollable area, given X and Y coordinates.
		 		 ]]></description>
<param><![CDATA[x (Number) The x position.
		 ]]></param>
<param><![CDATA[y (Number) The y position.
		 ]]></param>
</method>
<method name='setScrollPosition' fullname='qnx.ui.tween:Scroller/setScrollPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='pos' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the scroll position given a Number.
		 		 ]]></description>
<param><![CDATA[pos (Number) The scroll position.
		 ]]></param>
<return><![CDATA[Void
		 ]]></return>
</method>
<method name='startDrag' fullname='qnx.ui.tween:Scroller/protected:startDrag' isStatic='false' isFinal='false' isOverride='false'  param_names='m;t' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stopScroll' fullname='qnx.ui.tween:Scroller/stopScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stop scrolling movement within a movie clip.
		 ]]></description>
</method>
<method name='tweenEND' fullname='qnx.ui.tween:Scroller/private:tweenEND' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tweenMID' fullname='qnx.ui.tween:Scroller/private:tweenMID' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tweenNOW' fullname='qnx.ui.tween:Scroller/private:tweenNOW' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tween' fullname='qnx.ui.tween:Scroller/protected:tween' isStatic='false' isFinal='false' isOverride='false'  param_names='m;t;e' param_types='Number;Number;String' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updatePosition' fullname='qnx.ui.tween:Scroller/private:updatePosition' isStatic='false' isFinal='false' isOverride='false'  param_names='phase' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dragging' fullname='qnx.ui.tween:Scroller/dragging/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Determines if the user is currently engaged with the ScrollManager.
		 
		 ]]></description>
<return><![CDATA[A Boolean indicating whether or not the user is scrolling.
		 ]]></return>
</method>
<method name='scrolling' fullname='qnx.ui.tween:Scroller/scrolling/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Returns a Boolean indicating whether or not the ScrollManager is scrolling.
		 
		 ]]></description>
<return><![CDATA[A Boolean indicating whether or not the scroll manager is scrolling.
		 ]]></return>
</method>
<method name='stageX' fullname='qnx.ui.tween:Scroller/private:stageX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stageY' fullname='qnx.ui.tween:Scroller/private:stageY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='vmax' fullname='qnx.ui.tween:Scroller/vmax/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets or sets the virtual size of the scroll area.
		 		 ]]></description>
<param><![CDATA[size (Number) The virtual size of the scroll area.
		 ]]></param>
</method>
<method name='vmin' fullname='qnx.ui.tween:Scroller/vmin/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='windowSize' fullname='qnx.ui.tween:Scroller/windowSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets or sets the movie clip size.
		 		 ]]></description>
<param><![CDATA[size (Number) The size of the movie clip.
		 ]]></param>
</method>
<method name='vmax' fullname='qnx.ui.tween:Scroller/vmax/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='vmin' fullname='qnx.ui.tween:Scroller/vmin/set' isStatic='false' isFinal='false' isOverride='false'  param_names='min' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the minimum virtual coordinate. 
		 
		 <p>If the movie clip
		 is moved so that its position is greater than <code>min</code> it is scrolled back.
		 </p>
		 ]]></description>
<param><![CDATA[min (Number) The minimum coordinate of the scrolled movie clip.
		 ]]></param>
</method>
<method name='windowSize' fullname='qnx.ui.tween:Scroller/windowSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='MAX_SCROLL_DISTANCE' fullname='qnx.ui.tween:Scroller/MAX_SCROLL_DISTANCE' type='Number' isStatic='true' isConst='false' defaultValue='2000' >
</field>
<field name='MAX_SCROLL_TIME' fullname='qnx.ui.tween:Scroller/protected:MAX_SCROLL_TIME' type='Number' isStatic='true' isConst='false' defaultValue='2' >
</field>
<field name='MAX_SWIPE_TIME' fullname='qnx.ui.tween:Scroller/protected:MAX_SWIPE_TIME' type='Number' isStatic='true' isConst='false' defaultValue='250' >
</field>
<field name='MIN_SCROLL_TIME' fullname='qnx.ui.tween:Scroller/protected:MIN_SCROLL_TIME' type='Number' isStatic='true' isConst='false' defaultValue='0.3' >
</field>
<field name='Ms' fullname='qnx.ui.tween:Scroller/protected:Ms' type='Array' isStatic='false' isConst='false' >
</field>
<field name='Ts' fullname='qnx.ui.tween:Scroller/protected:Ts' type='Array' isStatic='false' isConst='false' >
</field>
<field name='__msize' fullname='qnx.ui.tween:Scroller/protected:__msize' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__singleTweenMode' fullname='qnx.ui.tween:Scroller/protected:__singleTweenMode' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='__vmax' fullname='qnx.ui.tween:Scroller/protected:__vmax' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__vmin' fullname='qnx.ui.tween:Scroller/protected:__vmin' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_prevX' fullname='qnx.ui.tween:Scroller/protected:_prevX' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_prevY' fullname='qnx.ui.tween:Scroller/protected:_prevY' type='Number' isStatic='false' isConst='false' >
</field>
<field name='blockClick' fullname='qnx.ui.tween:Scroller/protected:blockClick' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='dragStarted' fullname='qnx.ui.tween:Scroller/protected:dragStarted' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='mc' fullname='qnx.ui.tween:Scroller/protected:mc' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='mcorig' fullname='qnx.ui.tween:Scroller/protected:mcorig' type='Number' isStatic='false' isConst='false' >
</field>
<field name='mcpos' fullname='qnx.ui.tween:Scroller/protected:mcpos' type='Number' isStatic='false' isConst='false' >
</field>
<field name='mousePressed' fullname='qnx.ui.tween:Scroller/protected:mousePressed' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='objectsUnderPress' fullname='qnx.ui.tween:Scroller/protected:objectsUnderPress' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='origM' fullname='qnx.ui.tween:Scroller/protected:origM' type='Number' isStatic='false' isConst='false' >
</field>
<field name='posName' fullname='qnx.ui.tween:Scroller/protected:posName' type='String' isStatic='false' isConst='false' >
</field>
<field name='prevM' fullname='qnx.ui.tween:Scroller/protected:prevM' type='Number' isStatic='false' isConst='false' >
</field>
<field name='prevT' fullname='qnx.ui.tween:Scroller/protected:prevT' type='Number' isStatic='false' isConst='false' >
</field>
<field name='scrollThreshold' fullname='qnx.ui.tween:Scroller/protected:scrollThreshold' type='Number' isStatic='false' isConst='false' >
</field>
<field name='speedScale' fullname='qnx.ui.tween:Scroller/protected:speedScale' type='Number' isStatic='false' isConst='false' >
</field>
<field name='speed' fullname='qnx.ui.tween:Scroller/protected:speed' type='Number' isStatic='false' isConst='false' >
</field>
<field name='vertical' fullname='qnx.ui.tween:Scroller/protected:vertical' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='RotatingScroller' fullname='qnx.ui.tween:RotatingScroller' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\tween\RotatingScroller.as' namespace='qnx.ui.tween' access='public' baseclass='flash.events:EventDispatcher' interfaces='qnx.ui.tween:IScroller' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='RotatingScroller' fullname='qnx.ui.tween:RotatingScroller/RotatingScroller' isStatic='false' isFinal='false' isOverride='false'  param_names='mc;vwidth;vheight;mwidth;mheight;vertical;_scrollThreshold;rowHeight' param_types='flash.display:DisplayObjectContainer;Number;Number;Number;Number;Boolean;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;false;20;60' result_type='*'>
<description><![CDATA[
		 Constructs a new instance of the ScrollManager class.
		 		 ]]></description>
<param><![CDATA[mc   The movie clip for which to add scrolling support.
		 ]]></param>
<param><![CDATA[vwidth The virtual width of the scroll area.
		 ]]></param>
<param><![CDATA[vheight The virtual height of the scroll area.
		 ]]></param>
<param><![CDATA[mwidth The width of the movie clip.
		 ]]></param>
<param><![CDATA[mheight The height of the movie clip.
		 ]]></param>
<param><![CDATA[vertical A Boolean indicating whether to scroll vertically or horizontally.
		 ]]></param>
</method>
<method name='dispose' fullname='qnx.ui.tween:RotatingScroller/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		  Stops the scroll operation.
		  ]]></description>
</method>
<method name='onScrollMoved' fullname='qnx.ui.tween:RotatingScroller/private:onScrollMoved' isStatic='false' isFinal='false' isOverride='false'  param_names='nowM' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollComplete' fullname='qnx.ui.tween:RotatingScroller/private:scrollComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollEnd' fullname='qnx.ui.tween:RotatingScroller/scrollEnd' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Stops the current scrolling operation.
		 ]]></description>
<param><![CDATA[val 
		 ]]></param>
</method>
<method name='scrollMove' fullname='qnx.ui.tween:RotatingScroller/scrollMove' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 ]]></description>
<param><![CDATA[val
		 ]]></param>
</method>
<method name='scrollPress' fullname='qnx.ui.tween:RotatingScroller/private:scrollPress' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollRelease' fullname='qnx.ui.tween:RotatingScroller/private:scrollRelease' isStatic='false' isFinal='false' isOverride='false'  param_names='nowM' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scrollStart' fullname='qnx.ui.tween:RotatingScroller/scrollStart' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Starts a scroll operation.
		 ]]></description>
<param><![CDATA[val
		 ]]></param>
</method>
<method name='scrollTo' fullname='qnx.ui.tween:RotatingScroller/scrollTo' isStatic='false' isFinal='false' isOverride='false'  param_names='pos;time' param_types='Number;Number' param_defaults='undefined;1.0' result_type='void'>
<description><![CDATA[
		 Scrolls to a position within the scrollable area, given X and Y coordinates.
		 		 ]]></description>
<param><![CDATA[x (Number) The x position.
		 ]]></param>
<param><![CDATA[y (Number) The y position.
		 ]]></param>
</method>
<method name='setScrollPosition' fullname='qnx.ui.tween:RotatingScroller/setScrollPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='pos' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the scroll position.
		 		 ]]></description>
<param><![CDATA[pos The scroll position.
		 ]]></param>
</method>
<method name='startDrag' fullname='qnx.ui.tween:RotatingScroller/private:startDrag' isStatic='false' isFinal='false' isOverride='false'  param_names='m;t' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stopScroll' fullname='qnx.ui.tween:RotatingScroller/stopScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method to stop scrolling movement within a movie clip.
		 ]]></description>
</method>
<method name='tweenEND' fullname='qnx.ui.tween:RotatingScroller/private:tweenEND' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tweenMID' fullname='qnx.ui.tween:RotatingScroller/private:tweenMID' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tweenNOW' fullname='qnx.ui.tween:RotatingScroller/private:tweenNOW' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='tween' fullname='qnx.ui.tween:RotatingScroller/private:tween' isStatic='false' isFinal='false' isOverride='false'  param_names='m;t;e' param_types='Number;Number;String' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updatePosition' fullname='qnx.ui.tween:RotatingScroller/private:updatePosition' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dragging' fullname='qnx.ui.tween:RotatingScroller/dragging/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Determines if the user is currently engaged with the ScrollManager.
		 
		 ]]></description>
<return><![CDATA[A Boolean indicating whether or not the user is scrolling.
		 ]]></return>
</method>
<method name='scrolling' fullname='qnx.ui.tween:RotatingScroller/scrolling/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Determine whether or not the ScrollManager is scrolling.
		 
		 ]]></description>
<return><![CDATA[A Boolean indicating whether or not the scroll manager is scrolling.
		 ]]></return>
</method>
<method name='stageX' fullname='qnx.ui.tween:RotatingScroller/private:stageX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stageY' fullname='qnx.ui.tween:RotatingScroller/private:stageY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='vmax' fullname='qnx.ui.tween:RotatingScroller/vmax/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='vmin' fullname='qnx.ui.tween:RotatingScroller/vmin/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='windowSize' fullname='qnx.ui.tween:RotatingScroller/windowSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets the size of the window.
		 
		 ]]></description>
<return><![CDATA[A Number representing the size of the movie.
		 ]]></return>
</method>
<method name='vmax' fullname='qnx.ui.tween:RotatingScroller/vmax/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the virtual size of the scroll area.
		 		 ]]></description>
<param><![CDATA[size The virtual size of the scroll area.
		 ]]></param>
</method>
<method name='vmin' fullname='qnx.ui.tween:RotatingScroller/vmin/set' isStatic='false' isFinal='false' isOverride='false'  param_names='min' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the minimum virtual coordinate.
		 <p>
		 If the movie clip is moved such that its position is greater than <code>min</code>, it is scrolled back.
		 </p>
		 ]]></description>
<param><![CDATA[min The minimum coordinate of the scrolled movie clip.
		 ]]></param>
</method>
<method name='windowSize' fullname='qnx.ui.tween:RotatingScroller/windowSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the movie clip size.
		 
		 ]]></description>
<param><![CDATA[size  The size of the movie clip.
		 ]]></param>
</method>
<field name='MAX_SCROLL_DISTANCE' fullname='qnx.ui.tween:RotatingScroller/MAX_SCROLL_DISTANCE' type='Number' isStatic='true' isConst='false' defaultValue='2000' >
</field>
<field name='MAX_SCROLL_TIME' fullname='qnx.ui.tween:RotatingScroller/private:MAX_SCROLL_TIME' type='Number' isStatic='true' isConst='false' defaultValue='2' >
</field>
<field name='MAX_SWIPE_TIME' fullname='qnx.ui.tween:RotatingScroller/private:MAX_SWIPE_TIME' type='Number' isStatic='true' isConst='false' defaultValue='250' >
</field>
<field name='MIN_SCROLL_TIME' fullname='qnx.ui.tween:RotatingScroller/private:MIN_SCROLL_TIME' type='Number' isStatic='true' isConst='false' defaultValue='0.2' >
</field>
<field name='Ms' fullname='qnx.ui.tween:RotatingScroller/private:Ms' type='Array' isStatic='false' isConst='false' >
</field>
<field name='Ts' fullname='qnx.ui.tween:RotatingScroller/private:Ts' type='Array' isStatic='false' isConst='false' >
</field>
<field name='__msize' fullname='qnx.ui.tween:RotatingScroller/private:__msize' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__vmax' fullname='qnx.ui.tween:RotatingScroller/private:__vmax' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__vmin' fullname='qnx.ui.tween:RotatingScroller/private:__vmin' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_prevX' fullname='qnx.ui.tween:RotatingScroller/private:_prevX' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_prevY' fullname='qnx.ui.tween:RotatingScroller/private:_prevY' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_rowHeight' fullname='qnx.ui.tween:RotatingScroller/private:_rowHeight' type='Number' isStatic='false' isConst='false' >
</field>
<field name='blockClick' fullname='qnx.ui.tween:RotatingScroller/private:blockClick' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='dragStarted' fullname='qnx.ui.tween:RotatingScroller/private:dragStarted' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='mc' fullname='qnx.ui.tween:RotatingScroller/private:mc' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='mcorig' fullname='qnx.ui.tween:RotatingScroller/private:mcorig' type='Number' isStatic='false' isConst='false' >
</field>
<field name='mcpos' fullname='qnx.ui.tween:RotatingScroller/private:mcpos' type='Number' isStatic='false' isConst='false' >
</field>
<field name='mousePressed' fullname='qnx.ui.tween:RotatingScroller/private:mousePressed' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='objectsUnderPress' fullname='qnx.ui.tween:RotatingScroller/private:objectsUnderPress' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='origM' fullname='qnx.ui.tween:RotatingScroller/private:origM' type='Number' isStatic='false' isConst='false' >
</field>
<field name='posName' fullname='qnx.ui.tween:RotatingScroller/private:posName' type='String' isStatic='false' isConst='false' >
</field>
<field name='prevM' fullname='qnx.ui.tween:RotatingScroller/private:prevM' type='Number' isStatic='false' isConst='false' >
</field>
<field name='prevT' fullname='qnx.ui.tween:RotatingScroller/private:prevT' type='Number' isStatic='false' isConst='false' >
</field>
<field name='scrollThreshold' fullname='qnx.ui.tween:RotatingScroller/private:scrollThreshold' type='Number' isStatic='false' isConst='false' >
</field>
<field name='speedScale' fullname='qnx.ui.tween:RotatingScroller/private:speedScale' type='Number' isStatic='false' isConst='false' >
</field>
<field name='speed' fullname='qnx.ui.tween:RotatingScroller/private:speed' type='Number' isStatic='false' isConst='false' >
</field>
<field name='vertical' fullname='qnx.ui.tween:RotatingScroller/private:vertical' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='ScrollManager' fullname='qnx.ui.tween:ScrollManager' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\tween\ScrollManager.as' namespace='qnx.ui.tween' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ScrollManager' fullname='qnx.ui.tween:ScrollManager/ScrollManager' isStatic='false' isFinal='false' isOverride='false'  param_names='mc;vwidth;vheight;mwidth;mheight;vertical;_scrollThreshold' param_types='flash.display:DisplayObjectContainer;Number;Number;Number;Number;Boolean;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;false;20' result_type='*'>
<description><![CDATA[

		 Constructs a new instance of the ScrollMgr class.

		 
		 ]]></description>
<param><![CDATA[mc (MovieClip)  The movie clip to add scrolling support to.

		 ]]></param>
<param><![CDATA[vwidth (Number) The virtual width of the scroll area.

		 ]]></param>
<param><![CDATA[vheight (Number) The virtual height of the scrol area.

		 ]]></param>
<param><![CDATA[mwidth (Number) The movie clips width.

		 ]]></param>
<param><![CDATA[mheight (Number) The movie clips height.

		 ]]></param>
<param><![CDATA[vertical (Boolean) Wether to scroll vertically or horizontally.

		 ]]></param>
</method>
<method name='blockEvent' fullname='qnx.ui.tween:ScrollManager/private:blockEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='dispose' fullname='qnx.ui.tween:ScrollManager/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='scrollComplete' fullname='qnx.ui.tween:ScrollManager/private:scrollComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Sends an update out when the scroll operation ends

		 ]]></description>
</method>
<method name='scrollMove' fullname='qnx.ui.tween:ScrollManager/private:scrollMove' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to handle click and drag scrolling

		 ]]></description>
</method>
<method name='scrollPress' fullname='qnx.ui.tween:ScrollManager/private:scrollPress' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to handle onPress events on the scrolling list

		 ]]></description>
</method>
<method name='scrollRelease' fullname='qnx.ui.tween:ScrollManager/private:scrollRelease' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to handle releasing the mouse button when dragging (by gradually 

		 slowing down) and when not dragging (check for onRelease)

		 ]]></description>
</method>
<method name='scrollTo' fullname='qnx.ui.tween:ScrollManager/scrollTo' isStatic='false' isFinal='false' isOverride='false'  param_names='pos;time' param_types='Number;Number' param_defaults='undefined;1.0' result_type='void'>
<description><![CDATA[

		 Method to scroll to a particular position within the scrollable area.

		 
		 ]]></description>
<param><![CDATA[x (Number) The x position to scroll to.

		 ]]></param>
<param><![CDATA[y (Number) The y position to scroll to.

		 ]]></param>
<return><![CDATA[Void

		 ]]></return>
</method>
<method name='setScrollPosition' fullname='qnx.ui.tween:ScrollManager/setScrollPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='pos' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to set the scroll position.

		 
		 ]]></description>
<param><![CDATA[pos (Number) The scroll position.

		 ]]></param>
<return><![CDATA[Void

		 ]]></return>
</method>
<method name='startDrag' fullname='qnx.ui.tween:ScrollManager/private:startDrag' isStatic='false' isFinal='false' isOverride='false'  param_names='m;t' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='stopScroll' fullname='qnx.ui.tween:ScrollManager/stopScroll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Method to stop scrolling movement within a movie clip.

		 ]]></description>
</method>
<method name='tweenEND' fullname='qnx.ui.tween:ScrollManager/private:tweenEND' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
</method>
<method name='tweenMID' fullname='qnx.ui.tween:ScrollManager/private:tweenMID' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
</method>
<method name='tweenNOW' fullname='qnx.ui.tween:ScrollManager/private:tweenNOW' isStatic='false' isFinal='false' isOverride='false'  param_names='t;b;c;d;params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
</method>
<method name='tween' fullname='qnx.ui.tween:ScrollManager/private:tween' isStatic='false' isFinal='false' isOverride='false'  param_names='m;t;e' param_types='Number;Number;String' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='updatePosition' fullname='qnx.ui.tween:ScrollManager/private:updatePosition' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Sends an update out as the scroll position changes

		 ]]></description>
</method>
<method name='dragging' fullname='qnx.ui.tween:ScrollManager/dragging/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Method to determine if the user is engaged with the ScrollManager or not

		 ]]></description>
<return><![CDATA[(Boolean) Whether or not the user is scrolling

		 ]]></return>
</method>
<method name='scrolling' fullname='qnx.ui.tween:ScrollManager/scrolling/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[

		 Method to determine if the ScrollManager is scrolling or not

		 ]]></description>
<return><![CDATA[(Boolean) Whether or not the scroll manager is scrolling

		 ]]></return>
</method>
<method name='stageX' fullname='qnx.ui.tween:ScrollManager/private:stageX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='stageY' fullname='qnx.ui.tween:ScrollManager/private:stageY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='vmax' fullname='qnx.ui.tween:ScrollManager/vmax/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='vmin' fullname='qnx.ui.tween:ScrollManager/vmin/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='windowSize' fullname='qnx.ui.tween:ScrollManager/windowSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='vmax' fullname='qnx.ui.tween:ScrollManager/vmax/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to set the virtual size of the scroll area.

		 
		 ]]></description>
<param><![CDATA[size (Number) The virtual size of the scroll area.

		 ]]></param>
<return><![CDATA[Void

		 ]]></return>
</method>
<method name='vmin' fullname='qnx.ui.tween:ScrollManager/vmin/set' isStatic='false' isFinal='false' isOverride='false'  param_names='min' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to set the minimum virtual coordinate.  If the movie clip

		 is moved so that its position is greater than -min it is scrolled back.

		 
		 ]]></description>
<param><![CDATA[min (Number) The minimum coordinate of the scrolled movie clip.

		 ]]></param>
<return><![CDATA[Void

		 ]]></return>
</method>
<method name='windowSize' fullname='qnx.ui.tween:ScrollManager/windowSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Method to set the movie clip size.

		 
		 ]]></description>
<param><![CDATA[size (Number) The sizeof the movie clip.

		 ]]></param>
<return><![CDATA[Void

		 ]]></return>
</method>
<field name='MAX_SCROLL_DISTANCE' fullname='qnx.ui.tween:ScrollManager/MAX_SCROLL_DISTANCE' type='Number' isStatic='true' isConst='false' defaultValue='2000' >
</field>
<field name='MAX_SCROLL_TIME' fullname='qnx.ui.tween:ScrollManager/private:MAX_SCROLL_TIME' type='Number' isStatic='true' isConst='false' defaultValue='2' >
</field>
<field name='MAX_SWIPE_TIME' fullname='qnx.ui.tween:ScrollManager/private:MAX_SWIPE_TIME' type='Number' isStatic='true' isConst='false' defaultValue='250' >
</field>
<field name='MIN_SCROLL_TIME' fullname='qnx.ui.tween:ScrollManager/private:MIN_SCROLL_TIME' type='Number' isStatic='true' isConst='false' defaultValue='0.3' >
</field>
<field name='Ms' fullname='qnx.ui.tween:ScrollManager/private:Ms' type='Array' isStatic='false' isConst='false' >
</field>
<field name='Ts' fullname='qnx.ui.tween:ScrollManager/private:Ts' type='Array' isStatic='false' isConst='false' >
</field>
<field name='__msize' fullname='qnx.ui.tween:ScrollManager/private:__msize' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__vmax' fullname='qnx.ui.tween:ScrollManager/private:__vmax' type='Number' isStatic='false' isConst='false' >
</field>
<field name='__vmin' fullname='qnx.ui.tween:ScrollManager/private:__vmin' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_prevX' fullname='qnx.ui.tween:ScrollManager/private:_prevX' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_prevY' fullname='qnx.ui.tween:ScrollManager/private:_prevY' type='Number' isStatic='false' isConst='false' >
</field>
<field name='blockClick' fullname='qnx.ui.tween:ScrollManager/private:blockClick' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='dragStarted' fullname='qnx.ui.tween:ScrollManager/private:dragStarted' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='mc' fullname='qnx.ui.tween:ScrollManager/private:mc' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='mcorig' fullname='qnx.ui.tween:ScrollManager/private:mcorig' type='Number' isStatic='false' isConst='false' >
</field>
<field name='mcpos' fullname='qnx.ui.tween:ScrollManager/private:mcpos' type='Number' isStatic='false' isConst='false' >
</field>
<field name='mousePressed' fullname='qnx.ui.tween:ScrollManager/private:mousePressed' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='objectsUnderPress' fullname='qnx.ui.tween:ScrollManager/private:objectsUnderPress' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='origM' fullname='qnx.ui.tween:ScrollManager/private:origM' type='Number' isStatic='false' isConst='false' >
</field>
<field name='posName' fullname='qnx.ui.tween:ScrollManager/private:posName' type='String' isStatic='false' isConst='false' >
</field>
<field name='pressEvent' fullname='qnx.ui.tween:ScrollManager/private:pressEvent' type='flash.events:MouseEvent' isStatic='false' isConst='false' >
</field>
<field name='prevM' fullname='qnx.ui.tween:ScrollManager/private:prevM' type='Number' isStatic='false' isConst='false' >
</field>
<field name='prevT' fullname='qnx.ui.tween:ScrollManager/private:prevT' type='Number' isStatic='false' isConst='false' >
</field>
<field name='scrollThreshold' fullname='qnx.ui.tween:ScrollManager/private:scrollThreshold' type='Number' isStatic='false' isConst='false' >
</field>
<field name='speedScale' fullname='qnx.ui.tween:ScrollManager/private:speedScale' type='Number' isStatic='false' isConst='false' >
</field>
<field name='speed' fullname='qnx.ui.tween:ScrollManager/private:speed' type='Number' isStatic='false' isConst='false' >
</field>
<field name='vertical' fullname='qnx.ui.tween:ScrollManager/private:vertical' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='MMREvent' fullname='qnx.media.impl.mmr:MMREvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\impl\mmr\MMREvent.as' namespace='qnx.media.impl.mmr' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MMREvent' fullname='qnx.media.impl.mmr:MMREvent/MMREvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;data' param_types='String;Object' param_defaults='undefined;null' result_type='*'>
</method>
<method name='clone' fullname='qnx.media.impl.mmr:MMREvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='qnx.media.impl.mmr:MMREvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='data' fullname='qnx.media.impl.mmr:MMREvent/data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<field name='CONTEXT_CLOSED' fullname='qnx.media.impl.mmr:MMREvent/CONTEXT_CLOSED' type='String' isStatic='true' isConst='true' defaultValue='contextClosed' >
</field>
<field name='CONTEXT_READY' fullname='qnx.media.impl.mmr:MMREvent/CONTEXT_READY' type='String' isStatic='true' isConst='true' defaultValue='contextReady' >
</field>
<field name='INPUT_ATTACHED' fullname='qnx.media.impl.mmr:MMREvent/INPUT_ATTACHED' type='String' isStatic='true' isConst='true' defaultValue='inputAttached' >
</field>
<field name='INPUT_DETACHED' fullname='qnx.media.impl.mmr:MMREvent/INPUT_DETACHED' type='String' isStatic='true' isConst='true' defaultValue='inputDetached' >
</field>
<field name='METADATA_CHANGE' fullname='qnx.media.impl.mmr:MMREvent/METADATA_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='metadataChange' >
</field>
<field name='OUTPUT_ATTACHED' fullname='qnx.media.impl.mmr:MMREvent/OUTPUT_ATTACHED' type='String' isStatic='true' isConst='true' defaultValue='outputAttached' >
</field>
<field name='OUTPUT_CHANGED' fullname='qnx.media.impl.mmr:MMREvent/OUTPUT_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='outputChanged' >
</field>
<field name='OUTPUT_DETACHED' fullname='qnx.media.impl.mmr:MMREvent/OUTPUT_DETACHED' type='String' isStatic='true' isConst='true' defaultValue='outputDetached' >
</field>
<field name='PLAYITEM_CHANGE' fullname='qnx.media.impl.mmr:MMREvent/PLAYITEM_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='playItemChange' >
</field>
<field name='PLAYQUEUE_CHANGE' fullname='qnx.media.impl.mmr:MMREvent/PLAYQUEUE_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='playQueueChange' >
</field>
<field name='STATE_CHANGE' fullname='qnx.media.impl.mmr:MMREvent/STATE_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='stateChange' >
</field>
<field name='STATUS_CHANGE' fullname='qnx.media.impl.mmr:MMREvent/STATUS_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='statusChange' >
</field>
<field name='_data' fullname='qnx.media.impl.mmr:MMREvent/private:_data' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='MMROutput' fullname='qnx.media.impl.mmr:MMROutput' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\impl\mmr\MMROutput.as' namespace='qnx.media.impl.mmr' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MMROutput' fullname='qnx.media.impl.mmr:MMROutput/MMROutput' isStatic='false' isFinal='false' isOverride='false'  param_names='ctx;id;data' param_types='qnx.media.impl.mmr:MMRContext;int;Object' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='id' fullname='qnx.media.impl.mmr:MMROutput/id/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='type' fullname='qnx.media.impl.mmr:MMROutput/type/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='url' fullname='qnx.media.impl.mmr:MMROutput/url/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<field name='_data' fullname='qnx.media.impl.mmr:MMROutput/qnx.media.impl.mmr:_data' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_id' fullname='qnx.media.impl.mmr:MMROutput/private:_id' type='uint' isStatic='false' isConst='false' >
</field>
<field name='context' fullname='qnx.media.impl.mmr:MMROutput/context' type='qnx.media.impl.mmr:MMRContext' isStatic='false' isConst='false' >
</field>
<classRec name='MMRContext' fullname='qnx.media.impl.mmr:MMRContext' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\impl\mmr\MMRContext.as' namespace='qnx.media.impl.mmr' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MMRContext' fullname='qnx.media.impl.mmr:MMRContext/MMRContext' isStatic='false' isFinal='false' isOverride='false'  param_names='pps;name;mmrPPSRoot' param_types='qnx.pps:PPSChannel;String;String' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='attachInput' fullname='qnx.media.impl.mmr:MMRContext/attachInput' isStatic='false' isFinal='false' isOverride='false'  param_names='url;type' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='attachOutput' fullname='qnx.media.impl.mmr:MMRContext/attachOutput' isStatic='false' isFinal='false' isOverride='false'  param_names='url;type' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='callComplete' fullname='qnx.media.impl.mmr:MMRContext/private:callComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='msg;data' param_types='qnx.pps:Message;Object' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='close' fullname='qnx.media.impl.mmr:MMRContext/close' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='create' fullname='qnx.media.impl.mmr:MMRContext/create' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='destroy' fullname='qnx.media.impl.mmr:MMRContext/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='detachInput' fullname='qnx.media.impl.mmr:MMRContext/detachInput' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='detachOutput' fullname='qnx.media.impl.mmr:MMRContext/detachOutput' isStatic='false' isFinal='false' isOverride='false'  param_names='output' param_types='qnx.media.impl.mmr:MMROutput' param_defaults='undefined' result_type='void'>
</method>
<method name='dumpObj' fullname='qnx.media.impl.mmr:MMRContext/private:dumpObj' isStatic='false' isFinal='false' isOverride='false'  param_names='obj;indent' param_types='Object;String' param_defaults='undefined;' result_type='String'>
</method>
<method name='getQueueObject' fullname='qnx.media.impl.mmr:MMRContext/getQueueObject' isStatic='false' isFinal='false' isOverride='false'  param_names='num' param_types='int' param_defaults='undefined' result_type='Object'>
</method>
<method name='isConnected' fullname='qnx.media.impl.mmr:MMRContext/isConnected' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='listChange' fullname='qnx.media.impl.mmr:MMRContext/listChange' isStatic='false' isFinal='false' isOverride='false'  param_names='url;delta' param_types='String;int' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='open' fullname='qnx.media.impl.mmr:MMRContext/open' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='play' fullname='qnx.media.impl.mmr:MMRContext/play' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='ppsUpdate' fullname='qnx.media.impl.mmr:MMRContext/private:ppsUpdate' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='seek' fullname='qnx.media.impl.mmr:MMRContext/seek' isStatic='false' isFinal='false' isOverride='false'  param_names='position' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='setInputParameters' fullname='qnx.media.impl.mmr:MMRContext/setInputParameters' isStatic='false' isFinal='false' isOverride='false'  param_names='params' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='setOutputParameters' fullname='qnx.media.impl.mmr:MMRContext/setOutputParameters' isStatic='false' isFinal='false' isOverride='false'  param_names='output;params' param_types='qnx.media.impl.mmr:MMROutput;Object' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='setParameters' fullname='qnx.media.impl.mmr:MMRContext/setParameters' isStatic='false' isFinal='false' isOverride='false'  param_names='params' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='setSpeed' fullname='qnx.media.impl.mmr:MMRContext/setSpeed' isStatic='false' isFinal='false' isOverride='false'  param_names='speed' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='stop' fullname='qnx.media.impl.mmr:MMRContext/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='toString' fullname='qnx.media.impl.mmr:MMRContext/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='inputAttached' fullname='qnx.media.impl.mmr:MMRContext/inputAttached/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='metadata' fullname='qnx.media.impl.mmr:MMRContext/metadata/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='name' fullname='qnx.media.impl.mmr:MMRContext/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='outputs' fullname='qnx.media.impl.mmr:MMRContext/outputs/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
</method>
<method name='playQueue' fullname='qnx.media.impl.mmr:MMRContext/playQueue/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='state' fullname='qnx.media.impl.mmr:MMRContext/state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='status' fullname='qnx.media.impl.mmr:MMRContext/status/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<field name='CLOSE' fullname='qnx.media.impl.mmr:MMRContext/CLOSE' type='String' isStatic='true' isConst='true' defaultValue='contextClose' >
</field>
<field name='CREATE' fullname='qnx.media.impl.mmr:MMRContext/CREATE' type='String' isStatic='true' isConst='true' defaultValue='contextCreate' >
</field>
<field name='DESTROY' fullname='qnx.media.impl.mmr:MMRContext/DESTROY' type='String' isStatic='true' isConst='true' defaultValue='contextDestroy' >
</field>
<field name='INPUT_ATTACH' fullname='qnx.media.impl.mmr:MMRContext/INPUT_ATTACH' type='String' isStatic='true' isConst='true' defaultValue='inputAttach' >
</field>
<field name='INPUT_DETACH' fullname='qnx.media.impl.mmr:MMRContext/INPUT_DETACH' type='String' isStatic='true' isConst='true' defaultValue='inputDetach' >
</field>
<field name='INPUT_PARAMS' fullname='qnx.media.impl.mmr:MMRContext/INPUT_PARAMS' type='String' isStatic='true' isConst='true' defaultValue='inputParameters' >
</field>
<field name='LIST_CHANGE' fullname='qnx.media.impl.mmr:MMRContext/LIST_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='listChange' >
</field>
<field name='OPEN' fullname='qnx.media.impl.mmr:MMRContext/OPEN' type='String' isStatic='true' isConst='true' defaultValue='contextOpen' >
</field>
<field name='OUTPUT_ATTACH' fullname='qnx.media.impl.mmr:MMRContext/OUTPUT_ATTACH' type='String' isStatic='true' isConst='true' defaultValue='outputAttach' >
</field>
<field name='OUTPUT_DETACH' fullname='qnx.media.impl.mmr:MMRContext/OUTPUT_DETACH' type='String' isStatic='true' isConst='true' defaultValue='outputDetach' >
</field>
<field name='OUTPUT_PARAMS' fullname='qnx.media.impl.mmr:MMRContext/OUTPUT_PARAMS' type='String' isStatic='true' isConst='true' defaultValue='outputParameters' >
</field>
<field name='PARAMS' fullname='qnx.media.impl.mmr:MMRContext/PARAMS' type='String' isStatic='true' isConst='true' defaultValue='contextParameter' >
</field>
<field name='PLAY' fullname='qnx.media.impl.mmr:MMRContext/PLAY' type='String' isStatic='true' isConst='true' defaultValue='play' >
</field>
<field name='SEEK' fullname='qnx.media.impl.mmr:MMRContext/SEEK' type='String' isStatic='true' isConst='true' defaultValue='seek' >
</field>
<field name='SPEED' fullname='qnx.media.impl.mmr:MMRContext/SPEED' type='String' isStatic='true' isConst='true' defaultValue='speedSet' >
</field>
<field name='STOP' fullname='qnx.media.impl.mmr:MMRContext/STOP' type='String' isStatic='true' isConst='true' defaultValue='stop' >
</field>
<field name='_created' fullname='qnx.media.impl.mmr:MMRContext/private:_created' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_ctx_id' fullname='qnx.media.impl.mmr:MMRContext/private:_ctx_id' type='int' isStatic='false' isConst='false' >
</field>
<field name='_input_attached' fullname='qnx.media.impl.mmr:MMRContext/private:_input_attached' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_mmrPPSRoot' fullname='qnx.media.impl.mmr:MMRContext/private:_mmrPPSRoot' type='String' isStatic='false' isConst='false' >
</field>
<field name='_name' fullname='qnx.media.impl.mmr:MMRContext/private:_name' type='String' isStatic='false' isConst='false' >
</field>
<field name='_outputs' fullname='qnx.media.impl.mmr:MMRContext/private:_outputs' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_ppsWatcher' fullname='qnx.media.impl.mmr:MMRContext/private:_ppsWatcher' type='qnx.pps:PPS' isStatic='false' isConst='false' >
</field>
<field name='_pps' fullname='qnx.media.impl.mmr:MMRContext/private:_pps' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<classRec name='MMR' fullname='qnx.media.impl.mmr:MMR' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\media\impl\mmr\MMR.as' namespace='qnx.media.impl.mmr' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MMR' fullname='qnx.media.impl.mmr:MMR/MMR' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='createContext' fullname='qnx.media.impl.mmr:MMR/createContext' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='qnx.media.impl.mmr:MMRContext'>
</method>
<method name='openContext' fullname='qnx.media.impl.mmr:MMR/openContext' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='qnx.media.impl.mmr:MMRContext'>
</method>
<method name='release' fullname='qnx.media.impl.mmr:MMR/release' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_mmrPPSRoot' fullname='qnx.media.impl.mmr:MMR/private:_mmrPPSRoot' type='String' isStatic='false' isConst='false' >
</field>
<field name='_pps' fullname='qnx.media.impl.mmr:MMR/private:_pps' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<classRec name='MediaServiceConnectionEvent' fullname='qnx.events:MediaServiceConnectionEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\MediaServiceConnectionEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaServiceConnectionEvent</code> class provides event functionality related to media service I/O.
	 ]]></description>
</classRec>
<method name='MediaServiceConnectionEvent' fullname='qnx.events:MediaServiceConnectionEvent/MediaServiceConnectionEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a new <code>MediaServiceConnectionEvent</code> instance given an event type.
		 
		 ]]></description>
<param><![CDATA[type The event type.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.events:MediaServiceConnectionEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:MediaServiceConnectionEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='ACCESS_CHANGE' fullname='qnx.events:MediaServiceConnectionEvent/ACCESS_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='mediaServiceAccessChange' >
<description><![CDATA[
		 Dispatched when the media service has provided access or is asking you to revoke access to the media playback engine.
    	 ]]></description>
<see><![CDATA[MediaServiceConnection.hasAudioService  		
		 ]]></see>
</field>
<field name='CONNECTION_FAIL' fullname='qnx.events:MediaServiceConnectionEvent/CONNECTION_FAIL' type='String' isStatic='true' isConst='true' defaultValue='mediaServiceConnectionFail' >
<description><![CDATA[
		 Dispatched when a connection to the media service has failed.
		 ]]></description>
</field>
<field name='CONNECT' fullname='qnx.events:MediaServiceConnectionEvent/CONNECT' type='String' isStatic='true' isConst='true' defaultValue='mediaServiceConnect' >
<description><![CDATA[
		 Dispatched when a connection to the media service is made.
		 ]]></description>
</field>
<field name='DISCONNECT' fullname='qnx.events:MediaServiceConnectionEvent/DISCONNECT' type='String' isStatic='true' isConst='true' defaultValue='mediaServiceDisconnect' >
<description><![CDATA[
		 Dispatched when a connection to the media service has disconnected.
		 ]]></description>
</field>
<classRec name='DialogInterfaceEvent' fullname='qnx.events:DialogInterfaceEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\DialogInterfaceEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>DialogInterfaceEvent</code> class provides event functionality that is related to the dialog HMI component.

	 ]]></description>
</classRec>
<method name='DialogInterfaceEvent' fullname='qnx.events:DialogInterfaceEvent/DialogInterfaceEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;clientId;msg;bubbles;cancelable' param_types='String;String;qnx.pps:Message;Boolean;Boolean' param_defaults='undefined;undefined;null;false;false' result_type='*'>
<description><![CDATA[

		 Creates a new <code>DialogInterfaceEvent</code> instance given an event type, client ID, and message.

		 

		 ]]></description>
<param><![CDATA[type The event type.

		 ]]></param>
<param><![CDATA[clientId The ID of the client.

		 ]]></param>
<param><![CDATA[msg The msg that appears with event. Default is null.

		 ]]></param>
<param><![CDATA[bubbles A <code>Boolean</code> indicating whether or not the event supports event bubbling. Default is false.

		 ]]></param>
<param><![CDATA[cancelable A <code>Boolean</code> indicating whether or not the event can be cancelled. Default is false.

		 ]]></param>
</method>
<method name='clone' fullname='qnx.events:DialogInterfaceEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:DialogInterfaceEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='DIALOG_CANCEL_EVENT' fullname='qnx.events:DialogInterfaceEvent/DIALOG_CANCEL_EVENT' type='String' isStatic='true' isConst='true' defaultValue='dialogCancelEvent' >
<description><![CDATA[

		 Dispatched when a dialog was cancelled by the user.

		 ]]></description>
</field>
<field name='DIALOG_CONNECT_EVENT' fullname='qnx.events:DialogInterfaceEvent/DIALOG_CONNECT_EVENT' type='String' isStatic='true' isConst='true' defaultValue='dialogConnectEvent' >
<description><![CDATA[

		 Dispacthed when a dialog connection occurs. 

		 ]]></description>
</field>
<field name='DIALOG_CREATE_EVENT' fullname='qnx.events:DialogInterfaceEvent/DIALOG_CREATE_EVENT' type='String' isStatic='true' isConst='true' defaultValue='dialogCreateEvent' >
<description><![CDATA[

		 Dispatched when a dialog was created.

		 ]]></description>
</field>
<field name='DIALOG_DISCONNECT_EVENT' fullname='qnx.events:DialogInterfaceEvent/DIALOG_DISCONNECT_EVENT' type='String' isStatic='true' isConst='true' defaultValue='dialogDisconnectEvent' >
<description><![CDATA[

		 Dispatched when a dialog disconnect event occurs.

		 

		 ]]></description>
</field>
<field name='DIALOG_UPDATE_EVENT' fullname='qnx.events:DialogInterfaceEvent/DIALOG_UPDATE_EVENT' type='String' isStatic='true' isConst='true' defaultValue='dialogUpdateEvent' >
<description><![CDATA[

		 Dispatched when a dialog is updated.

		 ]]></description>
</field>
<field name='clientId' fullname='qnx.events:DialogInterfaceEvent/clientId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The ID of the client that caused the event.

		 ]]></description>
</field>
<field name='msg' fullname='qnx.events:DialogInterfaceEvent/msg' type='qnx.pps:Message' isStatic='false' isConst='false' >
<description><![CDATA[

		 The message associated with the event.

		 ]]></description>
</field>
<classRec name='QNXApplicationEvent' fullname='qnx.events:QNXApplicationEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\QNXApplicationEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>QNXApplicationEvent</code> class contains application-specific event function.
	 ]]></description>
<see><![CDATA[qnx.system.QNXApplication
	 ]]></see>
</classRec>
<method name='QNXApplicationEvent' fullname='qnx.events:QNXApplicationEvent/QNXApplicationEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Constructor for a <code>QNXApplicationEvent</code> instance.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.events:QNXApplicationEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:QNXApplicationEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='LOW_MEMORY' fullname='qnx.events:QNXApplicationEvent/LOW_MEMORY' type='String' isStatic='true' isConst='true' defaultValue='lowMemory' >
<description><![CDATA[
		Dispatched when the device is running low on memory. When this event is received you should save the state and free as many resources as possible.
		When the device is running low on memory, it will begin terminating applications in order to free up more memory.
		]]></description>
</field>
<field name='SWIPE_DOWN' fullname='qnx.events:QNXApplicationEvent/SWIPE_DOWN' type='String' isStatic='true' isConst='true' defaultValue='swipeDown' >
<description><![CDATA[
		Dispatched when a user swipes down from the top bezel of the device onto the screen.
		]]></description>
</field>
<field name='SWIPE_START' fullname='qnx.events:QNXApplicationEvent/SWIPE_START' type='String' isStatic='true' isConst='true' defaultValue='swipeStart' >
<description><![CDATA[
		Dispatched when the user starts a swipe from the top bezel of the device.
		]]></description>
</field>
<classRec name='MediaServiceRequestEvent' fullname='qnx.events:MediaServiceRequestEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\MediaServiceRequestEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaServiceRequestEvent</code> class provides events related to media service requests, such as track change or play and pause requests. 
	 ]]></description>
</classRec>
<method name='MediaServiceRequestEvent' fullname='qnx.events:MediaServiceRequestEvent/MediaServiceRequestEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a new <code>MediaServiceRequestEvent</code> instance given an event type.
		 ]]></description>
<param><![CDATA[type The event type.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.events:MediaServiceRequestEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:MediaServiceRequestEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='TRACK_NEXT' fullname='qnx.events:MediaServiceRequestEvent/TRACK_NEXT' type='String' isStatic='true' isConst='true' defaultValue='mediaRequestTrackNext' >
<description><![CDATA[
		 Dispatched when the media service has requested you to change playback to the next track.
		 ]]></description>
</field>
<field name='TRACK_PAUSE' fullname='qnx.events:MediaServiceRequestEvent/TRACK_PAUSE' type='String' isStatic='true' isConst='true' defaultValue='mediaRequestTrackPause' >
<description><![CDATA[
		 Dispatched when the media service has requested you to pause playback.
		 ]]></description>
</field>
<field name='TRACK_PLAY' fullname='qnx.events:MediaServiceRequestEvent/TRACK_PLAY' type='String' isStatic='true' isConst='true' defaultValue='mediaRequestTrackPlay' >
<description><![CDATA[
		 Dispatched when the media service has requested that you start playback.
		 ]]></description>
</field>
<field name='TRACK_PREV' fullname='qnx.events:MediaServiceRequestEvent/TRACK_PREV' type='String' isStatic='true' isConst='true' defaultValue='mediaRequestTrackPrev' >
<description><![CDATA[
		 Dispatched when the media service has requested you to change playback to the previous track.
		 ]]></description>
</field>
<classRec name='MediaPlayerEvent' fullname='qnx.events:MediaPlayerEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\MediaPlayerEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>MediaPlayerEvent</code> class provides event type functionality related to media player operation and media playback.
	 
	 ]]></description>
<see><![CDATA[qnx.media.MediaPlayer

	 ]]></see>
</classRec>
<method name='MediaPlayerEvent' fullname='qnx.events:MediaPlayerEvent/MediaPlayerEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;what_' param_types='String;Object' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 Creates a new <code>MediaPlayerEvent</code> instance given an event type. 
		 
		 ]]></description>
<param><![CDATA[type The event type.
		 ]]></param>
<param><![CDATA[bubbles A <code>Boolean</code> indicating whether or not the event supports event bubbling. Default is false.
		 ]]></param>
<param><![CDATA[cancelable A <code>Boolean</code> indicating whether or not the event can be cancelled. Default is false.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.events:MediaPlayerEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:MediaPlayerEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='what' fullname='qnx.events:MediaPlayerEvent/what/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Indicates what has changed, this object will contain a property with a value be set to true indicating the change. 
		 <table class="summaryTable">
		 <tr><th>Property</th><th>What changed</th></tr>
		 <tr><td>duration</td><td>MediaPlayer.duration</td></tr>
		 <tr><td>trackIndex</td><td>MediaPlayer.trackIndex</td></tr>
		 <tr><td>position</td><td>MediaPlayer.position</td></tr>
		 <tr><td>mediaType</td><td>MediaPlayer.mediaType</td></tr>
		 <tr><td>name</td><td>MediaPlayer.metadata.name</td></tr>
		 <tr><td>album</td><td>MediaPlayer.metadata.album</td></tr>
		 <tr><td>artist</td><td>MediaPlayer.metadata.artist</td></tr>
		 <tr><td>genre</td>genre<td>MediaPlayer.metadata.genre</td></tr>
		 <tr><td>comment</td><td>MediaPlayer.metadata.comment</td></tr>
		 <tr><td>bitrate</td><td>MediaPlayer.metadata.bitrate</td></tr>
		 <tr><td>url</td><td>MediaPlayer.metadata.url</td></tr>
		 <tr><td>track</td><td>MediaPlayer.metadata.track</td></tr>
		 <tr><td>video_width</td><td>MediaPlayer.metadata.video_width</td></tr>
		 <tr><td>video_height</td><td>MediaPlayer.metadata.video_height</td></tr>
		 </table>
		 ]]></description>
</method>
<field name='BUFFER_CHANGE' fullname='qnx.events:MediaPlayerEvent/BUFFER_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='bufferChange' >
<description><![CDATA[
		 Dispatched when buffer levels change. 
		 ]]></description>
</field>
<field name='INFO_CHANGE' fullname='qnx.events:MediaPlayerEvent/INFO_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='infoChange' >
<description><![CDATA[
		 Dispatched to communicate some information and/or warning about the media or its playback. 
		 ]]></description>
</field>
<field name='PREPARE_COMPLETE' fullname='qnx.events:MediaPlayerEvent/PREPARE_COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='prepareComplete' >
<description><![CDATA[
		 Dispatched when the media file is ready for playback, call after <code>prepare</code> or <code>play</code>.
		 ]]></description>
</field>
<field name='_what' fullname='qnx.events:MediaPlayerEvent/private:_what' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='DeviceBatteryEvent' fullname='qnx.events:DeviceBatteryEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\DeviceBatteryEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>DeviceBatteryEvent</code> class provides battery level and state change event functionality.
	 
	 ]]></description>
<see><![CDATA[qnx.system.Device
	 ]]></see>
</classRec>
<method name='DeviceBatteryEvent' fullname='qnx.events:DeviceBatteryEvent/DeviceBatteryEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;batteryState;batteryLevel' param_types='String;int;int' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		The constructor for a <code>DeviceBatteryEvent</code> object.
		
		]]></description>
<param><![CDATA[type The type of the event.
		]]></param>
<param><![CDATA[batteryState The battery state.
		]]></param>
<param><![CDATA[batteryLevel The battery level.
		]]></param>
</method>
<method name='clone' fullname='qnx.events:DeviceBatteryEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:DeviceBatteryEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='batteryLevel' fullname='qnx.events:DeviceBatteryEvent/batteryLevel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets the battery level of the device ranging from 0 to 100.
		
		]]></description>
<return><![CDATA[An integer representing the battery level.
		]]></return>
</method>
<method name='batteryState' fullname='qnx.events:DeviceBatteryEvent/batteryState/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets the battery state of the device.
		
		]]></description>
<return><![CDATA[An integer representing the current battery state.
		
		]]></return>
<see><![CDATA[qnx.system.DeviceBatteryState
		]]></see>
</method>
<field name='LEVEL_CHANGE' fullname='qnx.events:DeviceBatteryEvent/LEVEL_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='BatteryLevelChange' >
<description><![CDATA[
		Dispatched when a battery level change occurs.
		]]></description>
</field>
<field name='STATE_CHANGE' fullname='qnx.events:DeviceBatteryEvent/STATE_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='BatteryStateChange' >
<description><![CDATA[
		Dispatched when a battery state change occurs.
		]]></description>
</field>
<field name='__level' fullname='qnx.events:DeviceBatteryEvent/private:__level' type='int' isStatic='false' isConst='false' >
</field>
<field name='__state' fullname='qnx.events:DeviceBatteryEvent/private:__state' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='NotificationEvent' fullname='qnx.events:NotificationEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\NotificationEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<langversion><![CDATA[3.0

	 

	 
	 ]]></langversion>
<productversion><![CDATA[QNX Screen

	 ]]></productversion>
<see><![CDATA[qnx.notificationManager.NotificationManager

	 

	 ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='NotificationEvent' fullname='qnx.events:NotificationEvent/NotificationEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;clientId;id' param_types='String;String;String' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[

		 Creates a notification manager event object. The following event types can be generated:

		 CONNECT, DISCONNECT, REGISTER, NOTIFY_NEW, NOTIFY_UPDATE, NOTIFY_ACKNOWLEDGE, NOTIFY_EXPIRE and NOTIFY_CANCEL.

		 
		 ]]></description>
<param><![CDATA[type The type of notification event being created.

		 ]]></param>
<param><![CDATA[clientId	The string that uniquely identifies the connection to the service that is generating the event.

		 ]]></param>
<param><![CDATA[id	When specified, the string that uniquely identifies the notification within the connection to the service.

		 

		 ]]></param>
<see><![CDATA[qnx.notificationManager.NotificationManager

		 

		 ]]></see>
</method>
<field name='CONNECT' fullname='qnx.events:NotificationEvent/CONNECT' type='String' isStatic='true' isConst='true' defaultValue='connect' >
<description><![CDATA[

		 Signifies that a connection (identified by id) has been added to the service.

		 

		 ]]></description>
<eventType><![CDATA[connect

		 ]]></eventType>
</field>
<field name='DISCONNECT' fullname='qnx.events:NotificationEvent/DISCONNECT' type='String' isStatic='true' isConst='true' defaultValue='disconnect' >
<description><![CDATA[

		 Signifies that a connection (identified by id) has been removed from the service.

		 From the service's perspective, all active notifications submitted through the connection

		 are removed from the system.

		 

		 ]]></description>
<eventType><![CDATA[disconnect

		 ]]></eventType>
</field>
<field name='NOTIFY_ACKNOWLEDGE' fullname='qnx.events:NotificationEvent/NOTIFY_ACKNOWLEDGE' type='String' isStatic='true' isConst='true' defaultValue='notifyAcknowledge' >
<description><![CDATA[

		 Signifies that the specified notification for the specified client has been

		 acknowledged by the user. If id is null, this event signifies that all notifications

		 for the specified client have been acknowledged. This event is only provided back to a

		 client if the notifyOnAcknowledge property of the notification was set to true.

		 

		 ]]></description>
<eventType><![CDATA[notifyAcknowledge

		 ]]></eventType>
</field>
<field name='NOTIFY_CANCEL' fullname='qnx.events:NotificationEvent/NOTIFY_CANCEL' type='String' isStatic='true' isConst='true' defaultValue='notifyCancel' >
<description><![CDATA[

		 Signifies that the specified notification for the given client has been cancelled. If id

		 is null, all notifications for the client are cancelled.

		 

		 ]]></description>
<eventType><![CDATA[notifyCancel

		 ]]></eventType>
</field>
<field name='NOTIFY_EXPIRE' fullname='qnx.events:NotificationEvent/NOTIFY_EXPIRE' type='String' isStatic='true' isConst='true' defaultValue='notifyExpire' >
<description><![CDATA[

		 Signifies that the specified notification for the specified client has expired. If id

		 is null, this event signifies that all notifications for the specified client have expired.

		 This event is only provided back to a client if the notifyOnExpire property of the

		 notification was set to true.

		 

		 ]]></description>
<eventType><![CDATA[notifyExpire

		 ]]></eventType>
</field>
<field name='NOTIFY_NEW' fullname='qnx.events:NotificationEvent/NOTIFY_NEW' type='String' isStatic='true' isConst='true' defaultValue='notifyNew' >
<description><![CDATA[

		 Signifies that a new notification for the given client has been submitted.

		 

		 ]]></description>
<eventType><![CDATA[notifyNew

		 ]]></eventType>
</field>
<field name='NOTIFY_UPDATE' fullname='qnx.events:NotificationEvent/NOTIFY_UPDATE' type='String' isStatic='true' isConst='true' defaultValue='notifyUpdate' >
<description><![CDATA[

		 Signifies that the specified notification for the given client has been updated.

		 

		 ]]></description>
<eventType><![CDATA[notifyUpdate

		 ]]></eventType>
</field>
<field name='PROVIDER' fullname='qnx.events:NotificationEvent/PROVIDER' type='String' isStatic='true' isConst='true' defaultValue='provider' >
<description><![CDATA[

		 Signifies that the specified client has identified themself to the service.

		 

		 ]]></description>
<eventType><![CDATA[identify

		 ]]></eventType>
</field>
<field name='clientId' fullname='qnx.events:NotificationEvent/clientId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The string that uniquely identifies a connection to the service (specified for all events).

		 ]]></description>
</field>
<field name='id' fullname='qnx.events:NotificationEvent/id' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The string that uniquely identifies the notification within the client of the service.

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<classRec name='DialogEvent' fullname='qnx.events:DialogEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\DialogEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>DialogEvent</code> class provides user-related dialog event functionality. For example, the <code>DialogEvent</code> class contains 

	 the <code>DIALOG_BUTTON_CLICKED</code> event type

	 that indicates when a user has clicked a button on a dialog.

	 ]]></description>
</classRec>
<method name='DialogEvent' fullname='qnx.events:DialogEvent/DialogEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;responseBtn;responseBtnText;responseBtnContext;bubbles;cancelable' param_types='String;String;String;Object;Boolean;Boolean' param_defaults='undefined;undefined;undefined;undefined;false;false' result_type='*'>
<description><![CDATA[

		 Creates a new <code>DialogEvent</code> instance.

		 

		 

		 ]]></description>
<param><![CDATA[type The event type.

		 ]]></param>
<param><![CDATA[responseBtn The reponse button.

		 ]]></param>
<param><![CDATA[responseBtnText The response button text.

		 ]]></param>
<param><![CDATA[responseBtnContext The response button context.

		 ]]></param>
<param><![CDATA[bubbles A <code>Boolean</code> indicating whether or not the event supports event bubbling. Default is false.

		 ]]></param>
<param><![CDATA[cancelable A <code>Boolean</code> indicating whether or not the event can be cancelled. Default is false.

		 ]]></param>
</method>
<method name='clone' fullname='qnx.events:DialogEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:DialogEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='DIALOG_BUTTON_CLICKED' fullname='qnx.events:DialogEvent/DIALOG_BUTTON_CLICKED' type='String' isStatic='true' isConst='true' defaultValue='dialogButtonClicked' >
<description><![CDATA[

		 Dispatched when a button has been clicked.

		 ]]></description>
</field>
<field name='responseBtnContext' fullname='qnx.events:DialogEvent/responseBtnContext' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[

		 The response context object.

		 ]]></description>
</field>
<field name='responseBtnText' fullname='qnx.events:DialogEvent/responseBtnText' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The response button text.

		 ]]></description>
</field>
<field name='responseBtn' fullname='qnx.events:DialogEvent/responseBtn' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The response button.

		 ]]></description>
</field>
<classRec name='ImageCacheEvent' fullname='qnx.events:ImageCacheEvent' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\events\ImageCacheEvent.as' namespace='qnx.events' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ImageCacheEvent</code> class provides event functionality related to the caching and loading of images.
	 
	 ]]></description>
<see><![CDATA[qnx.utils.ImageCache
	 ]]></see>
</classRec>
<method name='ImageCacheEvent' fullname='qnx.events:ImageCacheEvent/ImageCacheEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;url_;error_' param_types='String;String;flash.errors:IOError' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 Creates a new <code>ImageCacheEvent</code> instance given an event type, a URL to the image, and an error type.
		 
		 ]]></description>
<param><![CDATA[type The event type.
		 ]]></param>
<param><![CDATA[url_ A URL to the image.
		 ]]></param>
<param><![CDATA[error_ The type of error that occurred. Default is null.
		 
 		 ]]></param>
<see><![CDATA[qnx.utils.ImageCache
		 ]]></see>
</method>
<method name='clone' fullname='qnx.events:ImageCacheEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='toString' fullname='qnx.events:ImageCacheEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='error' fullname='qnx.events:ImageCacheEvent/error/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.errors:IOError'>
<description><![CDATA[
		 Gets the type of error that occurred.
		 ]]></description>
</method>
<method name='url' fullname='qnx.events:ImageCacheEvent/url/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Gets the URL to the image that was cached.
		 ]]></description>
</method>
<field name='IMAGE_LOADED' fullname='qnx.events:ImageCacheEvent/IMAGE_LOADED' type='String' isStatic='true' isConst='true' defaultValue='imageLoaded' >
<description><![CDATA[
		 Dispatched when an image has loaded.
		 ]]></description>
</field>
<field name='IMAGE_LOAD_ERROR' fullname='qnx.events:ImageCacheEvent/IMAGE_LOAD_ERROR' type='String' isStatic='true' isConst='true' defaultValue='imageLoadError' >
<description><![CDATA[
		 Dispatched when an image has failed to load.
		 ]]></description>
</field>
<field name='_error' fullname='qnx.events:ImageCacheEvent/private:_error' type='flash.errors:IOError' isStatic='false' isConst='false' >
</field>
<field name='_url' fullname='qnx.events:ImageCacheEvent/private:_url' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='KeyboardType' fullname='qnx.ui.text:KeyboardType' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\text\KeyboardType.as' namespace='qnx.ui.text' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>KeyboardType</code> class contains constants that define the layout of the keyboard that appears
	 when the user clicks in a <code>textInput</code> component. For example, you can enable an email-specific
	 keyboard when the user clicks in a <code>textInput</code> component that takes an email address. 
	 
	 <p>
	 The following code listing creates an email-specific keyboard:
	 </p>
	 <listing>
	 firstInput = new TextInput;
     firstInput.keyboardType = KeyboardType.EMAIL;
     firstInput.width = 200;
	 </listing>
	 
	 ]]></description>
<see><![CDATA[ReturnKeyType
	 ]]></see>
</classRec>
<field name='DEFAULT' fullname='qnx.ui.text:KeyboardType/DEFAULT' type='String' isStatic='true' isConst='true' defaultValue='default' >
<description><![CDATA[
		 The default keyboard layout.
		 <p>
		 <img src="../../../images/kbd_default.gif"></img>
		 </p>
		 ]]></description>
</field>
<field name='EMAIL' fullname='qnx.ui.text:KeyboardType/EMAIL' type='String' isStatic='true' isConst='true' defaultValue='email' >
<description><![CDATA[
		 The email-specific keyboard layout.
		 <p>
		 <img src="../../../images/kbd_email.gif"></img>
		 </p>
		 ]]></description>
</field>
<field name='PHONE' fullname='qnx.ui.text:KeyboardType/PHONE' type='String' isStatic='true' isConst='true' defaultValue='phone' >
<description><![CDATA[
		 The email-specific keyboard layout.
		 <p>
		 <img src="../../../images/kbd_phone.gif"></img>
		 </p>
		 ]]></description>
</field>
<field name='PIN' fullname='qnx.ui.text:KeyboardType/PIN' type='String' isStatic='true' isConst='true' defaultValue='pin' >
<description><![CDATA[
		 The email-specific keyboard layout.
		 <p>
		 <img src="../../../images/kbd_pin.gif"></img>
		 </p>
		 ]]></description>
</field>
<field name='URL' fullname='qnx.ui.text:KeyboardType/URL' type='String' isStatic='true' isConst='true' defaultValue='url' >
<description><![CDATA[
		 The URL-specific keyboard layout (for entering web addresses).
		 <p>
		 <img src="../../../images/kbd_url.gif"></img>
		 </p>
		 ]]></description>
</field>
<classRec name='ReturnKeyType' fullname='qnx.ui.text:ReturnKeyType' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\text\ReturnKeyType.as' namespace='qnx.ui.text' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ReturnKeyType</code> class contains constants that 
	 define the <b>Enter</b> key that will appear on the keyboard
	 when the user clicks in a <code>TextInput</code> component. 
	 
	 The following listing creates a URL-specific keyboard with a <b>Join</b>
	 key.
	 
	 <listing>
	 firstInput = new TextInput;
     firstInput.keyboardType = KeyboardType.URL;
     firstInput.returnKeyType = ReturnKeyType.JOIN;
     firstInput.width = 200;
	 </listing>
	 <p>
	 The listing above creates the following keyboard:
	 </p>
	 <p>
	 <img src="../../../images/kbd_join.gif"></img>
	 </p>
	 
	 ]]></description>
<see><![CDATA[KeyboardType
	 ]]></see>
</classRec>
<field name='CONNECT' fullname='qnx.ui.text:ReturnKeyType/CONNECT' type='String' isStatic='true' isConst='true' defaultValue='enter.connect' >
<description><![CDATA[
		 The <b>Connect</b> key.
		 ]]></description>
</field>
<field name='DEFAULT' fullname='qnx.ui.text:ReturnKeyType/DEFAULT' type='String' isStatic='true' isConst='true' defaultValue='enter.default' >
<description><![CDATA[
		 The default key (<b>Enter</b>).
		 ]]></description>
</field>
<field name='DONE' fullname='qnx.ui.text:ReturnKeyType/DONE' type='String' isStatic='true' isConst='true' defaultValue='enter.done' >
<description><![CDATA[
		 The <b>Done</b> key.
		 ]]></description>
</field>
<field name='GO' fullname='qnx.ui.text:ReturnKeyType/GO' type='String' isStatic='true' isConst='true' defaultValue='enter.go' >
<description><![CDATA[
		 The <b>Go</b> key.
		 ]]></description>
</field>
<field name='JOIN' fullname='qnx.ui.text:ReturnKeyType/JOIN' type='String' isStatic='true' isConst='true' defaultValue='enter.join' >
<description><![CDATA[
		 The <b>Join</b> key.
		 ]]></description>
</field>
<field name='NEXT' fullname='qnx.ui.text:ReturnKeyType/NEXT' type='String' isStatic='true' isConst='true' defaultValue='enter.next' >
<description><![CDATA[
		 The <b>Next</b> key.
		 ]]></description>
</field>
<field name='SEARCH' fullname='qnx.ui.text:ReturnKeyType/SEARCH' type='String' isStatic='true' isConst='true' defaultValue='enter.search' >
<description><![CDATA[
		 The <b>Search</b> key.
		 ]]></description>
</field>
<field name='SEND' fullname='qnx.ui.text:ReturnKeyType/SEND' type='String' isStatic='true' isConst='true' defaultValue='enter.send' >
<description><![CDATA[
		 The <b>Send</b> key.
		 ]]></description>
</field>
<field name='SUBMIT' fullname='qnx.ui.text:ReturnKeyType/SUBMIT' type='String' isStatic='true' isConst='true' defaultValue='enter.submit' >
<description><![CDATA[
		 The <b>Submit</b> key.
		 ]]></description>
</field>
<classRec name='TextInputIconMode' fullname='qnx.ui.text:TextInputIconMode' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\text\TextInputIconMode.as' namespace='qnx.ui.text' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The TextInputIconMode class contains the constants that govern when a text input field is in view mode.
	 
	 ]]></description>
</classRec>
<field name='ALWAYS' fullname='qnx.ui.text:TextInputIconMode/ALWAYS' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[
		 Sets the TextInput icon to always show
		 ]]></description>
</field>
<field name='NEVER' fullname='qnx.ui.text:TextInputIconMode/NEVER' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
		 Sets the TextInput icon to never show
		 ]]></description>
</field>
<field name='UNLESS_EDITING' fullname='qnx.ui.text:TextInputIconMode/UNLESS_EDITING' type='int' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
		 Sets the TextInput icon to show only when a user is not editing text in the TextInput
		 ]]></description>
</field>
<field name='WHILE_EDITING' fullname='qnx.ui.text:TextInputIconMode/WHILE_EDITING' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[
		 Sets the TextInput icon to show only when a user is editing text in the TextInput
		 ]]></description>
</field>
<classRec name='Label' fullname='qnx.ui.text:Label' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\text\Label.as' namespace='qnx.ui.text' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Label class displays formatted text.
	 The Label class cannot recieve focus and cannot be used for input.
	 ]]></description>
</classRec>
<method name='Label' fullname='qnx.ui.text:Label/Label' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new Label instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.text:Label/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getDefaultTextFormat' fullname='qnx.ui.text:Label/protected:getDefaultTextFormat' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextFormat'>
<description><![CDATA[
		 ]]></description>
<return><![CDATA[A <code>TextFormat</code> object. 
		 ]]></return>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.text:Label/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setInitialLabelSize' fullname='qnx.ui.text:Label/protected:setInitialLabelSize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setText' fullname='qnx.ui.text:Label/protected:setText' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='autoSize' fullname='qnx.ui.text:Label/autoSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets a string that indicates how a label is sized and aligned to fit the value of its text property. 
		<p>
		The following are valid values:
		<ul>
		<li><code>TextFieldAutoSize.NONE</code>: The label is not resized or aligned to fit the text.</li>
		<li><code>TextFieldAutoSize.LEFT</code>: The right and bottom sides of the label are resized to fit the text. The left and top sides are not resized.</li>
		<li><code>TextFieldAutoSize.CENTER</code>: The left and right sides of the label resize to fit the text. The horizontal center of the label stays anchored at its original horizontal center position.</li>
		<li><code>TextFieldAutoSize.RIGHT</code>: The left and bottom sides of the label are resized to fit the text. The top and right sides are not resized.</li>
		</ul>
		</p>
		]]></description>
<default><![CDATA[The default value is TextFieldAutoSize.NONE.
		
		]]></default>
</method>
<method name='embedFonts' fullname='qnx.ui.text:Label/embedFonts/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
				Gets or sets the embedFonts property of the internal TextField of the label.
		When set to false, fonts are rendered as device fonts.
		When set to true, you must specify a font using the font property of a TextFormat object and set it to the format property. 
		This font must be included in the in your application. If it is not included, the text will not be rendererd.
		]]></description>
<default><![CDATA[false
		]]></default>
</method>
<method name='format' fullname='qnx.ui.text:Label/format/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextFormat'>
<description><![CDATA[
		Gets or sets the <code>TextFormat</code> object of the label. 
		<p>
		The <code>TextFormat</code> object is used to format and style the text of the label.
		The label has the following default text format:
		<ul>
		<li><code>format.size = 16;</code></li>
		<li><code>format.font = "BBAlpha Sans";</code></li>
		<li><code>format.color = 0xFFFFFF;</code></li>
		</ul>
		</p>
		]]></description>
</method>
<method name='htmlText' fullname='qnx.ui.text:Label/htmlText/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the html text of the label
		]]></description>
</method>
<method name='multiline' fullname='qnx.ui.text:Label/multiline/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets a Boolean that determines whether or not the <code>TextField</code> supports multiline display.
		]]></description>
</method>
<method name='selectable' fullname='qnx.ui.text:Label/selectable/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets a Boolean that determines whether or not the text can be selected.
		]]></description>
</method>
<method name='textField' fullname='qnx.ui.text:Label/textField/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextField'>
<description><![CDATA[
		Gets a reference to the internal textField of the label.
		]]></description>
<return><![CDATA[The textField of the current label.
		]]></return>
</method>
<method name='textHeight' fullname='qnx.ui.text:Label/textHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the height of the label text (in pixels). 
		]]></description>
</method>
<method name='textWidth' fullname='qnx.ui.text:Label/textWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the width of the label text (in pixels). 
		]]></description>
</method>
<method name='text' fullname='qnx.ui.text:Label/text/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the text of the label.
		]]></description>
</method>
<method name='wordWrap' fullname='qnx.ui.text:Label/wordWrap/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets a Boolean that determines whether or not the label supports word wrapping.
		]]></description>
</method>
<method name='autoSize' fullname='qnx.ui.text:Label/autoSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='autoSize' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='embedFonts' fullname='qnx.ui.text:Label/embedFonts/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='format' fullname='qnx.ui.text:Label/format/set' isStatic='false' isFinal='false' isOverride='false'  param_names='__format' param_types='flash.text:TextFormat' param_defaults='undefined' result_type='void'>
</method>
<method name='htmlText' fullname='qnx.ui.text:Label/htmlText/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='multiline' fullname='qnx.ui.text:Label/multiline/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='selectable' fullname='qnx.ui.text:Label/selectable/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='text' fullname='qnx.ui.text:Label/text/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='wordWrap' fullname='qnx.ui.text:Label/wordWrap/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<field name='__embedFonts' fullname='qnx.ui.text:Label/private:__embedFonts' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__text' fullname='qnx.ui.text:Label/private:__text' type='String' isStatic='false' isConst='false' >
</field>
<field name='_autoSize' fullname='qnx.ui.text:Label/private:_autoSize' type='String' isStatic='false' isConst='false' >
</field>
<field name='_format' fullname='qnx.ui.text:Label/private:_format' type='flash.text:TextFormat' isStatic='false' isConst='false' >
</field>
<field name='isHTML' fullname='qnx.ui.text:Label/private:isHTML' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='label_txt' fullname='qnx.ui.text:Label/label_txt' type='flash.text:TextField' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='TextInput' fullname='qnx.ui.text:TextInput' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\text\TextInput.as' namespace='qnx.ui.text' access='public' baseclass='qnx.ui.core:SkinnableComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  The TextInput class contains the functionality for capturing text input from a user. 
	  
	 ]]></description>
<metadata>
	<Event owner='qnx.ui.text:TextInput' name='change' type='flash.events.Event' >
<description><![CDATA[
	 Change event dispatched when the text in the input field is modified.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='TextInput' fullname='qnx.ui.text:TextInput/TextInput' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a TextInput instance.
		 ]]></description>
</method>
<method name='addListeners' fullname='qnx.ui.text:TextInput/private:addListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clearButtonClick' fullname='qnx.ui.text:TextInput/private:clearButtonClick' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='dispatchChangeEvent' fullname='qnx.ui.text:TextInput/private:dispatchChangeEvent' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawCloseButton' fullname='qnx.ui.text:TextInput/private:drawCloseButton' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawLabel' fullname='qnx.ui.text:TextInput/private:drawLabel' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawLeftIcon' fullname='qnx.ui.text:TextInput/private:drawLeftIcon' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawPlaceholder' fullname='qnx.ui.text:TextInput/private:drawPlaceholder' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawRightIcon' fullname='qnx.ui.text:TextInput/private:drawRightIcon' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.text:TextInput/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='formatPlaceholderText' fullname='qnx.ui.text:TextInput/private:formatPlaceholderText' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getDefaultTextFormat' fullname='qnx.ui.text:TextInput/protected:getDefaultTextFormat' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextFormat'>
<description><![CDATA[
		 ]]></description>
<return><![CDATA[The text input format.
		 ]]></return>
<see><![CDATA[qnx.ui.theme.ThemeGlobals#TEXT_INPUT_FORMAT	
		 
		 ]]></see>
<private><![CDATA[]]></private>
</method>
<method name='getLeftIconRect' fullname='qnx.ui.text:TextInput/getLeftIconRect' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
		Gets the position and size of the left icon.
		
		]]></description>
<return><![CDATA[Returns the rectangle in which the left icon occupies.
		]]></return>
<see><![CDATA[#leftIcon
		]]></see>
</method>
<method name='getRightIconRect' fullname='qnx.ui.text:TextInput/getRightIconRect' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
		Gets the position and size of the right icon.
		
		]]></description>
<return><![CDATA[Returns the rectangle in which the right icon occupies.
		]]></return>
<see><![CDATA[#rightIcon
		]]></see>
</method>
<method name='getTextRect' fullname='qnx.ui.text:TextInput/private:getTextRect' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.text:TextInput/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='labelFocusIn' fullname='qnx.ui.text:TextInput/private:labelFocusIn' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:FocusEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='labelFocusOut' fullname='qnx.ui.text:TextInput/private:labelFocusOut' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:FocusEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='labelMouseDown' fullname='qnx.ui.text:TextInput/private:labelMouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='labelMouseFocus' fullname='qnx.ui.text:TextInput/private:labelMouseFocus' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:FocusEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='labelMouseUp' fullname='qnx.ui.text:TextInput/private:labelMouseUp' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.text:TextInput/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onFocus' fullname='qnx.ui.text:TextInput/private:onFocus' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:FocusEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.ui.text:TextInput/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onTextChange' fullname='qnx.ui.text:TextInput/private:onTextChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeListeners' fullname='qnx.ui.text:TextInput/private:removeListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removePlaceholderText' fullname='qnx.ui.text:TextInput/private:removePlaceholderText' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setEnabled' fullname='qnx.ui.text:TextInput/protected:setEnabled' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setInitialLabelSize' fullname='qnx.ui.text:TextInput/protected:setInitialLabelSize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setPlaceholderText' fullname='qnx.ui.text:TextInput/private:setPlaceholderText' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSkin' fullname='qnx.ui.text:TextInput/setSkin' isStatic='false' isFinal='false' isOverride='true'  param_names='cellSkin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setText' fullname='qnx.ui.text:TextInput/protected:setText' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[str The label for the text field.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='setViewVisibility' fullname='qnx.ui.text:TextInput/private:setViewVisibility' isStatic='false' isFinal='false' isOverride='false'  param_names='view;mode' param_types='flash.display:DisplayObject;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='startEditing' fullname='qnx.ui.text:TextInput/private:startEditing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stopEditing' fullname='qnx.ui.text:TextInput/private:stopEditing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='autoSize' fullname='qnx.ui.text:TextInput/autoSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets a string that indicates how a label is sized and aligned to fit the value of its text property. 
		<p>
		The following are valid values:
		<ul>
		<li><code>TextFieldAutoSize.NONE</code>: The label is not resized or aligned to fit the text.</li>
		<li><code>TextFieldAutoSize.LEFT</code>: The right and bottom sides of the label are resized to fit the text. The left and top sides are not resized.</li>
		<li><code>TextFieldAutoSize.CENTER</code>: The left and right sides of the label resize to fit the text. The horizontal center of the label stays anchored at its original horizontal center position.</li>
		<li><code>TextFieldAutoSize.RIGHT</code>: The left and bottom sides of the label are resized to fit the text. The top and right sides are not resized.</li>
		</ul>
		</p>
		]]></description>
<default><![CDATA[The default value is <code>TextFieldAutoSize.NONE</code>.
		]]></default>
</method>
<method name='clearIconMode' fullname='qnx.ui.text:TextInput/clearIconMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets a value that determines how the clear button appears in the text field.
		]]></description>
<see><![CDATA[qnx.ui.text.TextInputIconMode
		]]></see>
</method>
<method name='displayAsPassword' fullname='qnx.ui.text:TextInput/displayAsPassword/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets a Boolean that determines whether text should be masked.
		]]></description>
</method>
<method name='embedFonts' fullname='qnx.ui.text:TextInput/embedFonts/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
				Gets or sets the embedFonts property of the internal TextField of the label.
		When set to false, fonts are rendered as device fonts.
		When set to true, you must specify a font using the font property of a TextFormat object and set it to the format property. 
		This font must be included in the in your application. If it is not included, the text will not be rendererd.
		]]></description>
<default><![CDATA[false
		]]></default>
</method>
<method name='format' fullname='qnx.ui.text:TextInput/format/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextFormat'>
<description><![CDATA[
		Gets or sets the TextFormat object of the label. 
		<p>
		The <code>TextFormat</code> object is used to format and style the text of the label.
		The label has the following default text format:
		<ul>
		<li><code>format.size = 16;</code></li>
		<li><code>format.font = "BBAlpha Sans";</code></li>
		<li><code>format.color = 0xFFFFFF;</code></li>
		</ul>
		</p>
		]]></description>
</method>
<method name='keyboardType' fullname='qnx.ui.text:TextInput/keyboardType/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='leftIconMode' fullname='qnx.ui.text:TextInput/leftIconMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets a value that controls how the left icon is displayed in the text field.
		]]></description>
<see><![CDATA[qnx.ui.text.TextInputIconMode
		]]></see>
<see><![CDATA[#leftIcon
		]]></see>
</method>
<method name='leftIcon' fullname='qnx.ui.text:TextInput/leftIcon/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		Gets or sets the left icon for the <code>TextInput</code> component.
		<p>
		The icon is sized and positioned according to the value that is returned from the <code>getLeftIconRect</code> method.
		</p>
		]]></description>
<see><![CDATA[#getLeftIconRect()
		]]></see>
</method>
<method name='prompt' fullname='qnx.ui.text:TextInput/prompt/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the placeholder text that is displayed in the text field when
		there is no other text in the text field.
		]]></description>
</method>
<method name='returnKeyType' fullname='qnx.ui.text:TextInput/returnKeyType/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='rightIconMode' fullname='qnx.ui.text:TextInput/rightIconMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Gets or sets a value that controls how the right icon is displayed in the text field.
		]]></description>
<see><![CDATA[qnx.ui.text.TextInputIconMode
		]]></see>
<see><![CDATA[#rightIcon
		]]></see>
</method>
<method name='rightIcon' fullname='qnx.ui.text:TextInput/rightIcon/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		Gets or sets the right icon for the <code>TextInput</code> component.
		
		The icon is sized and positioned according to the value that is returned from the <code>getRightIconRect</code> method.
		]]></description>
<see><![CDATA[#getRightIconRect()
		]]></see>
</method>
<method name='textField' fullname='qnx.ui.text:TextInput/textField/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.text:TextField'>
<description><![CDATA[
		 Gets a reference to the internal <code>TextField</code> of the <code>Label</code>.
		 ]]></description>
</method>
<method name='textHeight' fullname='qnx.ui.text:TextInput/textHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the height of the text in the label (in pixels). 
		]]></description>
</method>
<method name='textWidth' fullname='qnx.ui.text:TextInput/textWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the width of the text in the label (in pixels). 
		]]></description>
</method>
<method name='text' fullname='qnx.ui.text:TextInput/text/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the text String of the label.
		]]></description>
</method>
<method name='autoSize' fullname='qnx.ui.text:TextInput/autoSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='autoSize' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='clearIconMode' fullname='qnx.ui.text:TextInput/clearIconMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='displayAsPassword' fullname='qnx.ui.text:TextInput/displayAsPassword/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='embedFonts' fullname='qnx.ui.text:TextInput/embedFonts/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='format' fullname='qnx.ui.text:TextInput/format/set' isStatic='false' isFinal='false' isOverride='false'  param_names='__format' param_types='flash.text:TextFormat' param_defaults='undefined' result_type='void'>
</method>
<method name='keyboardType' fullname='qnx.ui.text:TextInput/keyboardType/set' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 The virtual keyboard type to use when this text input has focus.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.text.KeyboardType;
		 ]]></see>
</method>
<method name='leftIconMode' fullname='qnx.ui.text:TextInput/leftIconMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='mode' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='leftIcon' fullname='qnx.ui.text:TextInput/leftIcon/set' isStatic='false' isFinal='false' isOverride='false'  param_names='icon' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
</method>
<method name='prompt' fullname='qnx.ui.text:TextInput/prompt/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='returnKeyType' fullname='qnx.ui.text:TextInput/returnKeyType/set' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 The virtual keyboard enter key type to use when this text input has focus.
		 
		 ]]></description>
<see><![CDATA[qnx.ui.text.ReturnKeyType;
		 ]]></see>
</method>
<method name='rightIconMode' fullname='qnx.ui.text:TextInput/rightIconMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='mode' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='rightIcon' fullname='qnx.ui.text:TextInput/rightIcon/set' isStatic='false' isFinal='false' isOverride='false'  param_names='icon' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
</method>
<method name='text' fullname='qnx.ui.text:TextInput/text/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<field name='__clearIconMode' fullname='qnx.ui.text:TextInput/private:__clearIconMode' type='int' isStatic='false' isConst='false' >
</field>
<field name='__defaultLabelHeight' fullname='qnx.ui.text:TextInput/private:__defaultLabelHeight' type='int' isStatic='false' isConst='false' >
</field>
<field name='__embedFonts' fullname='qnx.ui.text:TextInput/private:__embedFonts' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__isEditing' fullname='qnx.ui.text:TextInput/private:__isEditing' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='__leftIconMode' fullname='qnx.ui.text:TextInput/private:__leftIconMode' type='int' isStatic='false' isConst='false' >
</field>
<field name='__leftIcon' fullname='qnx.ui.text:TextInput/private:__leftIcon' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<field name='__prompt' fullname='qnx.ui.text:TextInput/private:__prompt' type='String' isStatic='false' isConst='false' >
</field>
<field name='__rightIconMode' fullname='qnx.ui.text:TextInput/private:__rightIconMode' type='int' isStatic='false' isConst='false' >
</field>
<field name='__rightIcon' fullname='qnx.ui.text:TextInput/private:__rightIcon' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<field name='__text' fullname='qnx.ui.text:TextInput/private:__text' type='String' isStatic='false' isConst='false' >
</field>
<field name='_autoSize' fullname='qnx.ui.text:TextInput/private:_autoSize' type='String' isStatic='false' isConst='false' >
</field>
<field name='_format' fullname='qnx.ui.text:TextInput/private:_format' type='flash.text:TextFormat' isStatic='false' isConst='false' >
</field>
<field name='_keyboardType' fullname='qnx.ui.text:TextInput/private:_keyboardType' type='String' isStatic='false' isConst='false' >
</field>
<field name='_returnKeyType' fullname='qnx.ui.text:TextInput/private:_returnKeyType' type='String' isStatic='false' isConst='false' >
</field>
<field name='clear_btn' fullname='qnx.ui.text:TextInput/private:clear_btn' type='qnx.ui.buttons:Button' isStatic='false' isConst='false' >
</field>
<field name='label_txt' fullname='qnx.ui.text:TextInput/private:label_txt' type='flash.text:TextField' isStatic='false' isConst='false' >
</field>
<field name='placeholder_txt' fullname='qnx.ui.text:TextInput/private:placeholder_txt' type='flash.text:TextField' isStatic='false' isConst='false' >
</field>
<classRec name='NotificationProvider' fullname='qnx.notificationManager:NotificationProvider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\notificationManager\NotificationProvider.as' namespace='qnx.notificationManager' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<langversion><![CDATA[3.0

	 
	 ]]></langversion>
<productversion><![CDATA[QNX Screen

	 ]]></productversion>
<see><![CDATA[qnx.notificationManager.NotificationManager

	 ]]></see>
<see><![CDATA[qnx.notificationManager.Notification

	 

	 ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='NotificationProvider' fullname='qnx.notificationManager:NotificationProvider/NotificationProvider' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates the object that describes the notification provider that is connected to the notification service.

		 ]]></description>
</method>
<field name='ICON_DECORATION_NEW' fullname='qnx.notificationManager:NotificationProvider/ICON_DECORATION_NEW' type='String' isStatic='true' isConst='true' defaultValue='new' >
<description><![CDATA[

		 Constant identifier for the <em>new</em> icon decoration.

		 ]]></description>
</field>
<field name='ICON_DECORATION_OLD' fullname='qnx.notificationManager:NotificationProvider/ICON_DECORATION_OLD' type='String' isStatic='true' isConst='true' defaultValue='old' >
<description><![CDATA[

		 Constant identifier for the <em>old</em> icon decoration.

		 ]]></description>
</field>
<field name='ICON_DECORATION_UNKNOWN' fullname='qnx.notificationManager:NotificationProvider/ICON_DECORATION_UNKNOWN' type='String' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[

		 Constant identifier for the <em>unknown</em> icon decoration.

		 ]]></description>
</field>
<field name='appUrl' fullname='qnx.notificationManager:NotificationProvider/appUrl' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The URL, specified as a valid Unix path, to the application. The user can run the application by selecting or opening the notifcation.

		 
		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='clientId' fullname='qnx.notificationManager:NotificationProvider/clientId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='count' fullname='qnx.notificationManager:NotificationProvider/count' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[

		 Summary count of new, unread, ... items. The count is displayed alongside the icon for the client in the notification status area.

		 

		 ]]></description>
<default><![CDATA[0

		 ]]></default>
</field>
<field name='iconDecoration' fullname='qnx.notificationManager:NotificationProvider/iconDecoration' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 Specifies the type of decoration to be applied to the icon. This member is ignored if <code>iconUrl</code> is not specified.

		 Possible values are:

		 <ul>

		 <li><code>ICON_DECORATION_NEW</code></li>

		 <li><code>ICON_DECORATION_OLD</code></li>

		 <li><code>ICON_DECORATION_UNKNOWN</code></li>

		 </ul>

		 <p>

		 or null to specify no decoration.

		 </p>

		 
		 <p>

		 The following listing creates a <code>NotificationProvider</code> instance given a title, URL to an icon, and icon decoration.

		 </p>

		 <listing version="3.0"> 
		 mynp = new NotificationProvider();

		 mynp.clientId = myapp_id;

		 mynp.title = 'My mail client app';

		 mynp.iconUrl = '/mailapp/mail.png';

		 mynp.iconDecoration = NotificationProvider.ICON_DECORATION_NEW;

		 </listing>

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='iconUrl' fullname='qnx.notificationManager:NotificationProvider/iconUrl' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 URL (as a Unix path) to the icon representing the summary state of the notification client. The icon is displayed in the

		 notification status area of the system status screen.

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='priority' fullname='qnx.notificationManager:NotificationProvider/priority' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[

		 The priority of this provider indication relative to other providers in the system.

		 Depending on the capabilities of the view, providers with higher priorities

		 can be displayed ahead of those with lower priorities.

		 <p>

		 The higher the specified value, the higher the provider priority.

		 </p>

		 ]]></description>
<default><![CDATA[0

		 ]]></default>
</field>
<field name='title' fullname='qnx.notificationManager:NotificationProvider/title' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 A string representing the title or name of the provider. This string can be displayed to the user.

		   

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<classRec name='Notification' fullname='qnx.notificationManager:Notification' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\notificationManager\Notification.as' namespace='qnx.notificationManager' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<langversion><![CDATA[3.0

	 

	 
	 ]]></langversion>
<productversion><![CDATA[QNX Screen

	 ]]></productversion>
<see><![CDATA[qnx.notificationManager.NotificationManager

	 ]]></see>
<see><![CDATA[qnx.notificationManager.NotificationProvider

	 
	 ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='Notification' fullname='qnx.notificationManager:Notification/Notification' isStatic='false' isFinal='false' isOverride='false'  param_names='id;iconUrl' param_types='String;String' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[

		 Creates an object that describes the notification. The notification instance is identified by unique ID, where each unique ID is associated 

		 with a specified client.

		 

		 ]]></description>
<param><![CDATA[clientId The ID of the client that submitted the notification (unique to the notification manager server). 

		 ]]></param>
<param><![CDATA[id The ID of the notification (unique to the client owner).

		 ]]></param>
<param><![CDATA[iconUrl The URL (as a Unix path) to the icon that represents the notification.

		 ]]></param>
</method>
<field name='LED_BLUE' fullname='qnx.notificationManager:Notification/LED_BLUE' type='String' isStatic='true' isConst='true' defaultValue='blue' >
<description><![CDATA[

		 Constant identifier for the blue LED.

		 ]]></description>
</field>
<field name='LED_GREEN' fullname='qnx.notificationManager:Notification/LED_GREEN' type='String' isStatic='true' isConst='true' defaultValue='green' >
<description><![CDATA[

		 Constant identifier for the green LED.

		 ]]></description>
</field>
<field name='LED_RED' fullname='qnx.notificationManager:Notification/LED_RED' type='String' isStatic='true' isConst='true' defaultValue='red' >
<description><![CDATA[

		 Constant identifier for the red LED.

		 ]]></description>
</field>
<field name='LED_YELLOW' fullname='qnx.notificationManager:Notification/LED_YELLOW' type='String' isStatic='true' isConst='true' defaultValue='yellow' >
<description><![CDATA[

		 Constant identifier for the yellow LED.

		 ]]></description>
</field>
<field name='PRIORITY_HIGH' fullname='qnx.notificationManager:Notification/PRIORITY_HIGH' type='Number' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[

		 High notification priority.

		 ]]></description>
</field>
<field name='PRIORITY_LOW' fullname='qnx.notificationManager:Notification/PRIORITY_LOW' type='Number' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[

		 Low (default) notifcation priority.

		 ]]></description>
</field>
<field name='PRIORITY_MEDIUM' fullname='qnx.notificationManager:Notification/PRIORITY_MEDIUM' type='Number' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[

		 Medium notification priority.

		 ]]></description>
</field>
<field name='appUrl' fullname='qnx.notificationManager:Notification/appUrl' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The URL, specified as a valid Unix path, to the application. The user can run the application by selecting or opening the notifcation.

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='clientId' fullname='qnx.notificationManager:Notification/clientId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='decorationAreas' fullname='qnx.notificationManager:Notification/decorationAreas' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[

		 An array of objects (corresponding to the <code>decorationUrls</code>) that define the sub-areas of the decoration

		 images that will be used to overlay the notification icon .

		 <p>

		 Each object in this array is expected to supply <code>x, y, width</code> and <code>height</code> member properties,

		 as numbers, which define the sub areas of the images to be used as the decoration overlays. 

		 </p>

		 <p>

		 If <code>decorationAreas</code> is <code>null</code> (or any entry in the array), the entire area for the image

		 decoration will be used as the decoration overlay.

		 </p>

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='decorationUrls' fullname='qnx.notificationManager:Notification/decorationUrls' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[

		 An array of URLs to images which will be overlayed on the notification icon as additional decorations.

		 Decoration images will be layered on top of the notification icon in the same order in which they

		 appear in the array. 

		 <p>

		 If <code>decorationUrls</code> is <code>null</code>, no decoration will be applied to the icon.

		 </p>

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='expirationTime' fullname='qnx.notificationManager:Notification/expirationTime' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[

		 Specifies the absolute time (as a GMT-based timestamp) for the expiration of the notification, or

		 specified relative time (applied to the notification's time) in ms afterwhich the notification will expire.

		 A value of 0 indicates this is not specified.

		 <p>

		 When a notification expires, it is automatically cancelled by the notification manager (<code>NotificationManager</code>).

		 /p>

		 In the following listing, 

	     the <code>expirationTime</code> property is set

	     using the <code>getTime</code> function:

	     </p>

	     <listing version="3.0">

	     var d:Date = new Date();

	     notification.time = d.getTime();

	     notification.expirationTime = notification.time + 60000;

	     </listing>

		 <p>

    	 The expiration time is specified relative to the notification start time by adding 60000 ms, or one minute, to the start time. The notification 

	     will appear on the screen for one minute.

		 </p>

		 ]]></description>
<default><![CDATA[0

		 ]]></default>
</field>
<field name='htmlText' fullname='qnx.notificationManager:Notification/htmlText' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 An HTML-formatted text string. If set, this value overrides any text attribute that was specified by the <code>text</code> attribute.

		 

		 ]]></description>
<default><![CDATA[null

		 

		 ]]></default>
<see><![CDATA[flash.text.TextField

		 ]]></see>
</field>
<field name='iconArea' fullname='qnx.notificationManager:Notification/iconArea' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[

		 An object that defines the sub-area of the icon image that will be displayed as the notification icon.

		 <p>

		 When present, the object is expected to supply <code>x, y, width</code> and <code>height</code> number

		 members, which defines the pixel sub area of the image to be used as the icon. 

		 </p>

		 <p>

		 If <code>iconArea</code> is <code>null</code>, the entire image area is used for the icon.

		 </p>

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='iconUrl' fullname='qnx.notificationManager:Notification/iconUrl' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The URL, specified as a valid Unix path, to the icon representing the notification. This icon

		 is displayed in the notification list if the system status screen when the notification is created.

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='id' fullname='qnx.notificationManager:Notification/id' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The ID of the notification. The ID is unique to the client owner.

		 ]]></description>
</field>
<field name='led' fullname='qnx.notificationManager:Notification/led' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 Color identifier for the LED that will blink with this notification. Possible values are <code>LED_RED</code>, <code>LED_GREEN</code>,

		 <code>LED_YELLOW</code>, <code>LED_BLUE</code>, or null if not specified. 

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='notifyOnAcknowledge' fullname='qnx.notificationManager:Notification/notifyOnAcknowledge' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[

		 Set to <code>true</code> to have the notification manager (<code>NotificationManager</code>) notify you when the user acknowledges this notification.

		 

		 ]]></description>
<default><![CDATA[true

		 ]]></default>
</field>
<field name='notifyOnExpire' fullname='qnx.notificationManager:Notification/notifyOnExpire' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[

		 Set to <code>true</code> to have the notification manager (<code>NotificationManager</code>) notify you when the notification expires.

		 

		 ]]></description>
<default><![CDATA[true

		 ]]></default>
</field>
<field name='priority' fullname='qnx.notificationManager:Notification/priority' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[

		 The priority of this notification relative to other notifications in the system.

		 Depending on the capabilities of the view, notifications with higher priorities

		 can be displayed ahead of those with lower priorities.

		 <p>

		 The higher the specified value, the higher the notification priority.

		 </p>

		 ]]></description>
<default><![CDATA[0

		 ]]></default>
</field>
<field name='soundRepeat' fullname='qnx.notificationManager:Notification/soundRepeat' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[

		 The number of times to repeat the sound, or 0 to play the sound only once.

		 

		 ]]></description>
<default><![CDATA[0

		 ]]></default>
</field>
<field name='soundUrl' fullname='qnx.notificationManager:Notification/soundUrl' type='String' isStatic='false' isConst='false' >
<description><![CDATA[

		 The URL, specified as a valid Unix path, to the system sound file to play when the notification is created. 

		 Null if not specified.

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='text' fullname='qnx.notificationManager:Notification/text' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[

		 One of either a string or an array that describes the notification. A string specifies a single text element that describes the notification.

		 An array specifies a number of strings that describe the notification. 

		 

		 ]]></description>
<default><![CDATA[null

		 ]]></default>
</field>
<field name='time' fullname='qnx.notificationManager:Notification/time' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[

		 A GMT-based timestamp (expressed as <em>ms</em> since 1970) for the notification. A value of 0 indicates that 

		 a time has not specified.

		 

		 ]]></description>
<default><![CDATA[0

		 ]]></default>
</field>
<classRec name='NotificationInterface' fullname='qnx.notificationManager:NotificationInterface' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\notificationManager\NotificationInterface.as' namespace='qnx.notificationManager' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<langversion><![CDATA[3.0

	 

	 
	 ]]></langversion>
<productversion><![CDATA[QNX Screen

	 ]]></productversion>
<private><![CDATA[]]></private>
</classRec>
<method name='NotificationInterface' fullname='qnx.notificationManager:NotificationInterface/NotificationInterface' isStatic='false' isFinal='false' isOverride='false'  param_names='server' param_types='Boolean' param_defaults='false' result_type='*'>
<description><![CDATA[

		 Construct a new <code>NotificationInterface</code> using the provided client descriptor.

		 ]]></description>
</method>
<method name='acknowledge' fullname='qnx.notificationManager:NotificationInterface/acknowledge' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Called by the server to inform the client that a notification has been acknowledged by the user.

		 If the notification has <code>notifyOnAcknowledge</code> set, a <code>NOTIFICATION_ACKNOWLEDGED</code>

		 event will be sent to the client.

		 

		 ]]></description>
<param><![CDATA[notification The notification being acknowledged.

		 ]]></param>
<see><![CDATA[qnx.notificationManager.Notification

		 ]]></see>
<see><![CDATA[qnx.events.

		 

		 ]]></see>
</method>
<method name='cancel' fullname='qnx.notificationManager:NotificationInterface/cancel' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Cancel an existing notification in the system.

		 

		 ]]></description>
<param><![CDATA[notification The notification to cancel.

		 ]]></param>
<see><![CDATA[qnx.notificationManager.Notification

		 

		 ]]></see>
</method>
<method name='channelEvent' fullname='qnx.notificationManager:NotificationInterface/private:channelEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.events:PPSChannelEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='close' fullname='qnx.notificationManager:NotificationInterface/close' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Close the connection.

		 ]]></description>
</method>
<method name='commandHandler' fullname='qnx.notificationManager:NotificationInterface/private:commandHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='message;command' param_types='qnx.pps:Message;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='expire' fullname='qnx.notificationManager:NotificationInterface/expire' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Called by the server to inform the client that a notification has expired. If the

		 notification has <code>cancelOnExpire</code> set, the notification will be cancelled by the

		 server and no event will be sent to the client.

		 

		 ]]></description>
<param><![CDATA[notification The notification that is to expire.

		 ]]></param>
<see><![CDATA[qnx.notificationManager.Notification

		 

		 ]]></see>
</method>
<method name='identify' fullname='qnx.notificationManager:NotificationInterface/identify' isStatic='false' isFinal='false' isOverride='false'  param_names='provider' param_types='qnx.notificationManager:NotificationProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Identify the notification provider to the notification service.

		 

		 ]]></description>
<param><![CDATA[provider The object that describes the notification provider.

		 ]]></param>
<see><![CDATA[qnx.notificationManager.NotificationProvider

		 

		 ]]></see>
</method>
<method name='keyToPeer' fullname='qnx.notificationManager:NotificationInterface/private:keyToPeer' isStatic='false' isFinal='false' isOverride='false'  param_names='peer' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='notify' fullname='qnx.notificationManager:NotificationInterface/notify' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Submit a new notification to the system, or update an existing notification.

		 

		 ]]></description>
<param><![CDATA[notification The notification to submit or update.

		 ]]></param>
<see><![CDATA[qnx.notificationManager.Notification

		 

		 ]]></see>
</method>
<method name='onAcknowledge' fullname='qnx.notificationManager:NotificationInterface/protected:onAcknowledge' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
</method>
<method name='onCancel' fullname='qnx.notificationManager:NotificationInterface/protected:onCancel' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
</method>
<method name='onClose' fullname='qnx.notificationManager:NotificationInterface/protected:onClose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onConnect' fullname='qnx.notificationManager:NotificationInterface/protected:onConnect' isStatic='false' isFinal='false' isOverride='false'  param_names='clientId' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='onDisconnect' fullname='qnx.notificationManager:NotificationInterface/protected:onDisconnect' isStatic='false' isFinal='false' isOverride='false'  param_names='clientId' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='onExpire' fullname='qnx.notificationManager:NotificationInterface/protected:onExpire' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
</method>
<method name='onIdentify' fullname='qnx.notificationManager:NotificationInterface/protected:onIdentify' isStatic='false' isFinal='false' isOverride='false'  param_names='provider' param_types='qnx.notificationManager:NotificationProvider' param_defaults='undefined' result_type='void'>
</method>
<method name='onNotify' fullname='qnx.notificationManager:NotificationInterface/protected:onNotify' isStatic='false' isFinal='false' isOverride='false'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
</method>
<method name='onOpenFail' fullname='qnx.notificationManager:NotificationInterface/private:onOpenFail' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onOpen' fullname='qnx.notificationManager:NotificationInterface/protected:onOpen' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='open' fullname='qnx.notificationManager:NotificationInterface/open' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Open the connection (as the server or as a client).

		 ]]></description>
</method>
<method name='peerToKey' fullname='qnx.notificationManager:NotificationInterface/private:peerToKey' isStatic='false' isFinal='false' isOverride='false'  param_names='peer' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='scanObject' fullname='qnx.notificationManager:NotificationInterface/private:scanObject' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='*' param_defaults='undefined' result_type='Vector$String'>
</method>
<field name='channel' fullname='qnx.notificationManager:NotificationInterface/private:channel' type='qnx.pps:PPSChannel' isStatic='false' isConst='false' >
</field>
<field name='commandAcknowledge' fullname='qnx.notificationManager:NotificationInterface/private:commandAcknowledge' type='String' isStatic='true' isConst='true' defaultValue='Acknowledge' >
</field>
<field name='commandCancel' fullname='qnx.notificationManager:NotificationInterface/private:commandCancel' type='String' isStatic='true' isConst='true' defaultValue='Cancel' >
</field>
<field name='commandExpire' fullname='qnx.notificationManager:NotificationInterface/private:commandExpire' type='String' isStatic='true' isConst='true' defaultValue='Expire' >
</field>
<field name='commandIdentify' fullname='qnx.notificationManager:NotificationInterface/private:commandIdentify' type='String' isStatic='true' isConst='true' defaultValue='Identify' >
</field>
<field name='commandNotify' fullname='qnx.notificationManager:NotificationInterface/private:commandNotify' type='String' isStatic='true' isConst='true' defaultValue='Notify' >
</field>
<field name='debugName' fullname='qnx.notificationManager:NotificationInterface/private:debugName' type='String' isStatic='false' isConst='false' >
</field>
<field name='notificationAttrs' fullname='qnx.notificationManager:NotificationInterface/private:notificationAttrs' type='Vector$String' isStatic='true' isConst='false' defaultValue='null' >
</field>
<field name='providerAttrs' fullname='qnx.notificationManager:NotificationInterface/private:providerAttrs' type='Vector$String' isStatic='true' isConst='false' defaultValue='null' >
</field>
<field name='serverPath' fullname='qnx.notificationManager:NotificationInterface/private:serverPath' type='String' isStatic='true' isConst='true' defaultValue='/pps/services/notification/control' >
</field>
<field name='server' fullname='qnx.notificationManager:NotificationInterface/private:server' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='NotificationManager' fullname='qnx.notificationManager:NotificationManager' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\notificationManager\NotificationManager.as' namespace='qnx.notificationManager' access='public' baseclass='qnx.notificationManager:NotificationInterface' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<langversion><![CDATA[3.0

	 
	 
	 ]]></langversion>
<productversion><![CDATA[QNX Screen

	 ]]></productversion>
<see><![CDATA[qnx.notificationManager.NotificationProvider

	 ]]></see>
<see><![CDATA[qnx.notificationManager.Notification

	 ]]></see>
<see><![CDATA[qnx.events.NotificationEvent

	 
	 ]]></see>
<private><![CDATA[]]></private>
</classRec>
<method name='NotificationManager' fullname='qnx.notificationManager:NotificationManager/NotificationManager' isStatic='false' isFinal='false' isOverride='false'  param_names='provider' param_types='qnx.notificationManager:NotificationProvider' param_defaults='null' result_type='*'>
<description><![CDATA[

		 Construct a new client using the client descriptor provided.

		 ]]></description>
</method>
<method name='acknowledge' fullname='qnx.notificationManager:NotificationManager/acknowledge' isStatic='false' isFinal='false' isOverride='true'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='expire' fullname='qnx.notificationManager:NotificationManager/expire' isStatic='false' isFinal='false' isOverride='true'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAcknowledge' fullname='qnx.notificationManager:NotificationManager/protected:onAcknowledge' isStatic='false' isFinal='false' isOverride='true'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onClose' fullname='qnx.notificationManager:NotificationManager/protected:onClose' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onExpire' fullname='qnx.notificationManager:NotificationManager/protected:onExpire' isStatic='false' isFinal='false' isOverride='true'  param_names='notification' param_types='qnx.notificationManager:Notification' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onOpen' fullname='qnx.notificationManager:NotificationManager/protected:onOpen' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='provider' fullname='qnx.notificationManager:NotificationManager/private:provider' type='qnx.notificationManager:NotificationProvider' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IProgress' fullname='qnx.ui.progress:IProgress' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\progress\IProgress.as' namespace='qnx.ui.progress' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The interface for components that show progress.
	 ]]></description>
</interfaceRec>
<method name='progress' fullname='qnx.ui.progress:IProgress/qnx.ui.progress:IProgress:progress/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets and sets the current progress.
		 ]]></description>
</method>
<method name='progress' fullname='qnx.ui.progress:IProgress/qnx.ui.progress:IProgress:progress/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<classRec name='ProgressBar' fullname='qnx.ui.progress:ProgressBar' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\progress\ProgressBar.as' namespace='qnx.ui.progress' access='public' baseclass='qnx.ui.core:SkinnableComponent' interfaces='qnx.ui.progress:IProgress' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ProgressBar</code> class is a basic class that shows progress by percentage.
	 <p>
	 The <code>ProgressBar</code> class provides the temporal feedback functionality for the API. You can use the progress bar
	 to show progress information for processor-intensive operations or to show progress information whenever 
	 data is being loaded. This feedback ensures the user that the operating system remains responsive
	 during complex operations.
	 </p>
	 ]]></description>
</classRec>
<method name='ProgressBar' fullname='qnx.ui.progress:ProgressBar/ProgressBar' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>ProgressBar</code> instance.
		 ]]></description>
</method>
<method name='constrain' fullname='qnx.ui.progress:ProgressBar/protected:constrain' isStatic='false' isFinal='false' isOverride='false'  param_names='val;min;max' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.progress:ProgressBar/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.progress:ProgressBar/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='progress' fullname='qnx.ui.progress:ProgressBar/progress/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets or sets the current progress value as indicated by the progress bar. The value is returned as a percentage.
		  
		 ]]></description>
</method>
<method name='progress' fullname='qnx.ui.progress:ProgressBar/progress/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Percent is used to draw the visuals
		 ]]></description>
<param><![CDATA[progress Percent number
		 ]]></param>
</method>
<field name='__percent' fullname='qnx.ui.progress:ProgressBar/private:__percent' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='ActivityIndicator' fullname='qnx.ui.progress:ActivityIndicator' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\progress\ActivityIndicator.as' namespace='qnx.ui.progress' access='public' baseclass='qnx.ui.core:SkinnableComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The <code>ActivityIndicator</code> class provides visual progress feedback to the user during time-consuming operations.
	 
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.progress.ActivityIndicatorSkin
	 ]]></see>
</classRec>
<method name='ActivityIndicator' fullname='qnx.ui.progress:ActivityIndicator/ActivityIndicator' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>ActivityIndicator</code> instance.
		 ]]></description>
</method>
<method name='animate' fullname='qnx.ui.progress:ActivityIndicator/animate' isStatic='false' isFinal='false' isOverride='false'  param_names='doAnimate' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Starts or stops the indicator animation. 
		 
		 ]]></description>
<param><![CDATA[doAnimate <i>true</i> to start, or continue displaying the animation, <i>false</i> to stop animating.
		 ]]></param>
</method>
<method name='init' fullname='qnx.ui.progress:ActivityIndicator/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isAnimating' fullname='qnx.ui.progress:ActivityIndicator/isAnimating' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Returns a <code>Boolean</code> that indicates whether or not the animation is currently playing.
		 ]]></description>
<return><![CDATA[Returns <i>true</i> if the animation is currently running, otherwise <i>false</i>.
		 ]]></return>
</method>
<method name='startAnimating' fullname='qnx.ui.progress:ActivityIndicator/protected:startAnimating' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stopAnimating' fullname='qnx.ui.progress:ActivityIndicator/protected:stopAnimating' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__isAnimating' fullname='qnx.ui.progress:ActivityIndicator/private:__isAnimating' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[
		 A <code>String</code> representing the current animation state.
		 ]]></description>
</field>
<interfaceRec name='ISizeable' fullname='qnx.ui.display:ISizeable' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\display\ISizeable.as' namespace='qnx.ui.display' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	   The <i>ISizeable</i> interface contains a single method (<code>setSize</code>) that is used to resize an item. 
	   
	  ]]></description>
</interfaceRec>
<method name='setSize' fullname='qnx.ui.display:ISizeable/qnx.ui.display:ISizeable:setSize' isStatic='false' isFinal='false' isOverride='false'  param_names='w;h' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Sets the width and height of the component.
		 
		 ]]></description>
<param><![CDATA[h The new height of the component (in pixels).
		 ]]></param>
<param><![CDATA[w The new width of the component (in pixels).
		 ]]></param>
</method>
<interfaceRec name='IDisplayObject' fullname='qnx.ui.display:IDisplayObject' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\display\IDisplayObject.as' namespace='qnx.ui.display' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 An interface that provides many of the <code>DisplayObject</code> class properties. 
	 ]]></description>
</interfaceRec>
<method name='alpha' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:alpha/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>alpha</code> property of the object.
		]]></description>
</method>
<method name='blendMode' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:blendMode/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the <code>blendMode</code> property of the object.
		]]></description>
</method>
<method name='cacheAsBitmap' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:cacheAsBitmap/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets the <code>cacheAsBitmap</code> property of the object.
		]]></description>
</method>
<method name='filters' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:filters/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		Gets or sets the <code>filters</code> property of the object.
		]]></description>
</method>
<method name='height' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:height/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>height</code> property of the object.
		]]></description>
</method>
<method name='loaderInfo' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:loaderInfo/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:LoaderInfo'>
<description><![CDATA[
		Gets the <code>loaderInfo</code> property of the object.
		]]></description>
</method>
<method name='mask' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:mask/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		Gets or sets the <code>mask</code> property of the object.
		]]></description>
</method>
<method name='mouseX' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:mouseX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets the <code>mouseX</code> property of the object.
		]]></description>
</method>
<method name='mouseY' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:mouseY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets the <code>mouseY</code> property of the object.
		]]></description>
</method>
<method name='name' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets or sets the <code>name</code> property of the object.
		]]></description>
</method>
<method name='opaqueBackground' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:opaqueBackground/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		Gets or sets the <code>opaqueBackground</code> property of the object.
		]]></description>
</method>
<method name='rotationX' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotationX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>rotationX</code> property of the object.
		]]></description>
</method>
<method name='rotationY' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotationY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>rotationY</code> property of the object.
		]]></description>
</method>
<method name='rotationZ' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotationZ/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>rotationZ</code> property of the object.
		]]></description>
</method>
<method name='rotation' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotation/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>rotation</code> property of the object.
		]]></description>
</method>
<method name='scale9Grid' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scale9Grid/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
		Gets or sets the <code>scale9Grid</code> property of the object.
		]]></description>
</method>
<method name='scaleX' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scaleX/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>scaleX</code> property of the object.
		]]></description>
</method>
<method name='scaleY' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scaleY/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>scaleY</code> property of the object.
		]]></description>
</method>
<method name='scaleZ' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scaleZ/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>scaleZ</code> property of the object.
		]]></description>
</method>
<method name='scrollRect' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scrollRect/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
		Gets or sets the <code>scrollRect</code> property of the object.
		]]></description>
</method>
<method name='transform' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:transform/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Transform'>
<description><![CDATA[
		Gets or sets the <code>transform</code> property of the object.
		]]></description>
</method>
<method name='visible' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:visible/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets the <code>visible</code> property of the object.
		]]></description>
</method>
<method name='width' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:width/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>width</code> property of the object.
		]]></description>
</method>
<method name='x' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:x/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>x</code> property of the object.
		]]></description>
</method>
<method name='y' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:y/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>y</code> property of the object.
		]]></description>
</method>
<method name='z' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:z/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the <code>z</code> property of the object.
		]]></description>
</method>
<method name='alpha' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:alpha/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='blendMode' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:blendMode/set' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='cacheAsBitmap' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:cacheAsBitmap/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='filters' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:filters/set' isStatic='false' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='void'>
</method>
<method name='height' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:height/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='mask' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:mask/set' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
</method>
<method name='name' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:name/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='opaqueBackground' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:opaqueBackground/set' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='rotationX' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotationX/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='rotationY' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotationY/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='rotationZ' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotationZ/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='rotation' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:rotation/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scale9Grid' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scale9Grid/set' isStatic='false' isFinal='false' isOverride='false'  param_names='rect' param_types='flash.geom:Rectangle' param_defaults='undefined' result_type='void'>
</method>
<method name='scaleX' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scaleX/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scaleY' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scaleY/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scaleZ' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scaleZ/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='scrollRect' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:scrollRect/set' isStatic='false' isFinal='false' isOverride='false'  param_names='rect' param_types='flash.geom:Rectangle' param_defaults='undefined' result_type='void'>
</method>
<method name='transform' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:transform/set' isStatic='false' isFinal='false' isOverride='false'  param_names='trans' param_types='flash.geom:Transform' param_defaults='undefined' result_type='void'>
</method>
<method name='visible' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:visible/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='width' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:width/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='x' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:x/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_x' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='y' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:y/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_y' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='z' fullname='qnx.ui.display:IDisplayObject/qnx.ui.display:IDisplayObject:z/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_z' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<classRec name='TilingBackground' fullname='qnx.ui.display:TilingBackground' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\display\TilingBackground.as' namespace='qnx.ui.display' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  The TilingBackground component takes a <code>BitmapData</code> object and tiles it to its set width and height.
	 ]]></description>
</classRec>
<method name='TilingBackground' fullname='qnx.ui.display:TilingBackground/TilingBackground' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>TilingBackground</code> instance. 
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.display:TilingBackground/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.display:TilingBackground/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='bitmapData' fullname='qnx.ui.display:TilingBackground/bitmapData/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:BitmapData'>
<description><![CDATA[
		 Gets and sets the <code>BitmapData</code> object that is to be tiled by the component.
		 ]]></description>
</method>
<method name='bitmapData' fullname='qnx.ui.display:TilingBackground/bitmapData/set' isStatic='false' isFinal='false' isOverride='false'  param_names='bData' param_types='flash.display:BitmapData' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__bitmapData' fullname='qnx.ui.display:TilingBackground/private:__bitmapData' type='flash.display:BitmapData' isStatic='false' isConst='false' >
</field>
<field name='holder' fullname='qnx.ui.display:TilingBackground/holder' type='flash.display:Shape' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Image' fullname='qnx.ui.display:Image' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\display\Image.as' namespace='qnx.ui.display' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>Image</code> class displays an image.
	 It can display an image by using a URL to an image, a <code>Bitmap</code> instance or a <code>BitmapData</code> instance.
	 
	 ]]></description>
<see><![CDATA[qnx.utils.ImageCache
	 ]]></see>
<metadata>
	<Event owner='qnx.ui.display:Image' name='ioError' type='flash.events.IOErrorEvent' >
<description><![CDATA[
	 Dispatched when the image cannot be loaded.
	 ]]></description>
<eventType><![CDATA[flash.events.IOErrorEvent.IO_ERROR
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.display:Image' name='complete' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the image is loaded and ready to be used.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.COMPLETE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Image' fullname='qnx.ui.display:Image/Image' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Constructs an <code>Image</code> instance.
		 ]]></description>
</method>
<method name='init' fullname='qnx.ui.display:Image/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.display:Image/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onImageError' fullname='qnx.ui.display:Image/private:onImageError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onImageLoaded' fullname='qnx.ui.display:Image/private:onImageLoaded' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onRemoved' fullname='qnx.ui.display:Image/protected:onRemoved' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setImage' fullname='qnx.ui.display:Image/setImage' isStatic='false' isFinal='false' isOverride='false'  param_names='image' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Sets the image.
		The <code>image</code> parameter can be of type <code>String</code> as a URL to an external image, Bitmap instance or a BitmapData instance.
		]]></description>
<param><![CDATA[image The image to be set.
		]]></param>
</method>
<method name='cache' fullname='qnx.ui.display:Image/cache/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.utils:ImageCache'>
<description><![CDATA[
		 Gets or sets the <code>ImageCache</code> object to use to cache the image.
		 
		 ]]></description>
<see><![CDATA[qnx.utils.ImageCache
		 ]]></see>
</method>
<method name='pixelSnapping' fullname='qnx.ui.display:Image/pixelSnapping/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Controls whether or not the Bitmap object is snapped to the nearest pixel. The <code>PixelSnapping</code> class includes possible values:
		 <ul>
		 <li><code>PixelSnapping.NEVER</code>—No pixel snapping occurs.</li>
		 <li><code>PixelSnapping.ALWAYS</code>—The image is always snapped to the nearest pixel, independent of transformation.</li>
		 <li><code>PixelSnapping.AUTO</code>—The image is snapped to the nearest pixel if it is drawn with no rotation or skew and it is drawn at a scale factor of 99.9% to 100.1%. If these conditions are satisfied, the bitmap image is drawn at 100% scale, snapped to the nearest pixel. Internally, this value allows the image to be drawn as fast as possible using the vector renderer.</li>
		 </ul>
    	 		
    	 ]]></description>
</method>
<method name='smoothing' fullname='qnx.ui.display:Image/smoothing/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Controls whether or not the bitmap is smoothed when scaled. If <code>true</code>, the bitmap is smoothed when scaled. If <code>false</code>, the bitmap is not smoothed when scaled. 
		 ]]></description>
</method>
<method name='cache' fullname='qnx.ui.display:Image/cache/set' isStatic='false' isFinal='false' isOverride='false'  param_names='cache_' param_types='qnx.utils:ImageCache' param_defaults='undefined' result_type='void'>
</method>
<method name='pixelSnapping' fullname='qnx.ui.display:Image/pixelSnapping/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='smoothing' fullname='qnx.ui.display:Image/smoothing/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<field name='__pixelSnapping' fullname='qnx.ui.display:Image/private:__pixelSnapping' type='String' isStatic='false' isConst='false' >
</field>
<field name='__smoothing' fullname='qnx.ui.display:Image/private:__smoothing' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_cache' fullname='qnx.ui.display:Image/private:_cache' type='qnx.utils:ImageCache' isStatic='false' isConst='false' >
</field>
<field name='_img' fullname='qnx.ui.display:Image/private:_img' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='_url' fullname='qnx.ui.display:Image/private:_url' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='TimeFormatter' fullname='qnx.utils:TimeFormatter' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\utils\TimeFormatter.as' namespace='qnx.utils' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 The TimeFormatter class contains utility methods that format a given number (seconds or milliseconds) into a time value.
	 <p>
	 The Number is returned as a String.
	 </p>
	 ]]></description>
</classRec>
<method name='formatMilliseconds' fullname='qnx.utils:TimeFormatter/formatMilliseconds' isStatic='true' isFinal='false' isOverride='false'  param_names='milliseconds' param_types='Number' param_defaults='undefined' result_type='String'>
<description><![CDATA[
		 Returns a <code>String</code> in the format <code>hours:mins:secs</code> given a <code>Number</code>.
		 
		 ]]></description>
<param><![CDATA[milliseconds The <code>Number</code> for which to return the formatted String. 
		 ]]></param>
<return><![CDATA[A colon-delimited <code>String</code> containing the <code>Number</code> expressed in hours, minutes, and seconds.
		 ]]></return>
<see><![CDATA[#formatSeconds()
		 ]]></see>
</method>
<method name='formatSeconds' fullname='qnx.utils:TimeFormatter/formatSeconds' isStatic='true' isFinal='false' isOverride='false'  param_names='seconds' param_types='Number' param_defaults='undefined' result_type='String'>
<description><![CDATA[
		 Returns a <code>String</code> containing the number of seconds in a given <code>Number</code>.
		 
		 ]]></description>
<param><![CDATA[seconds The <code>Number</code> for which to return the formatted String. 
		 ]]></param>
<return><![CDATA[A <code>String</code> containing the number of seconds.
		 ]]></return>
<see><![CDATA[#formatMilliseconds()
		 ]]></see>
</method>
<classRec name='ImageCache' fullname='qnx.utils:ImageCache' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\utils\ImageCache.as' namespace='qnx.utils' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>ImageCache</code> class provides image caching functionality for your application. 
	 The class can be used in conjuction with the <code>Image</code> component class.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.display.Image#cache
	 ]]></see>
<metadata>
	<Event owner='qnx.utils:ImageCache' name='imageLoadError' type='qnx.events.ImageCacheEvent' >
<description><![CDATA[
	 Dispatched when an image has been requested but failed to load.
	 
	 ]]></description>
<eventType><![CDATA[qnx.events.ImageCacheEvent.IMAGE_LOAD_ERROR
	 ]]></eventType>
<see><![CDATA[qnx.events.ImageCacheEvent#error 
	 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.utils:ImageCache' name='imageLoaded' type='qnx.events.ImageCacheEvent' >
<description><![CDATA[
	 Dispatched when an image has been requested but was not available in the cache.
	 
	 ]]></description>
<eventType><![CDATA[qnx.events.ImageCacheEvent.IMAGE_LOADED
	 ]]></eventType>
<see><![CDATA[#getImage()
	 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='ImageCache' fullname='qnx.utils:ImageCache/ImageCache' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>ImageCache</code> instance.
		 ]]></description>
</method>
<method name='addImageData' fullname='qnx.utils:ImageCache/addImageData' isStatic='false' isFinal='false' isOverride='false'  param_names='url;data' param_types='String;flash.display:BitmapData' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the bitmap image data for an element in the cache given a URL to the image and new bitmap data. 
		 <p>
		 This method will dispatch an <code>ImageCacheEvent.IMAGE_LOADED</code> event, so listeners can update automatically.
		 </p>
		 ]]></description>
<param><![CDATA[url The URL to the image.
		 ]]></param>
<param><![CDATA[data The new bitmap data for the image.
		 ]]></param>
</method>
<method name='checkCacheSize' fullname='qnx.utils:ImageCache/private:checkCacheSize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='clear' fullname='qnx.utils:ImageCache/clear' isStatic='false' isFinal='false' isOverride='false'  param_names='force' param_types='Boolean' param_defaults='false' result_type='void'>
<description><![CDATA[
		 Clear the image cache and disposes the BitmapData.
		 
		 ]]></description>
<param><![CDATA[force If <code>true</code> ALL images will be disposed, including one whch may be on the stage, if <code>false</code> only unlocked images will be disposed
		 ]]></param>
</method>
<method name='getImage' fullname='qnx.utils:ImageCache/getImage' isStatic='false' isFinal='false' isOverride='false'  param_names='url;load' param_types='String;Boolean' param_defaults='undefined;undefined' result_type='flash.display:BitmapData'>
<description><![CDATA[
		 Returns an image from the cache, given the URL of the image and a Boolean that determines whether or not
		 to load the image from the URL provided. 
		 
		 <p>
		 If the image is in the cache it is locked before it is returned. 
		 It must be unlocked when no longer in use.
		 </p>
		 
		 ]]></description>
<param><![CDATA[url The URL to the image.
		 ]]></param>
<param><![CDATA[load A <code>Boolean</code> indicating whether or not to load the image.
		 
		 ]]></param>
<return><![CDATA[The Image as BitmapData.
		 ]]></return>
</method>
<method name='loadError' fullname='qnx.utils:ImageCache/private:loadError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:IOErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='loadHandler' fullname='qnx.utils:ImageCache/private:loadHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='loadImage' fullname='qnx.utils:ImageCache/private:loadImage' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='reloadImage' fullname='qnx.utils:ImageCache/reloadImage' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Reloads an image from the cache given the URL to the image. 
		 
		 <p>
		 If the image is not in the cache nothing is done. 
		 </p>
		 
		 ]]></description>
<param><![CDATA[url The URL to the image.
		 ]]></param>
</method>
<method name='trimCache' fullname='qnx.utils:ImageCache/private:trimCache' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='unlock' fullname='qnx.utils:ImageCache/unlock' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unlocks an image in the cache, given a URL to the image. 
		 
		 <p>
		 An unlocked image can be flushed from cache if space is required.
		 </p>
		 ]]></description>
<param><![CDATA[url  The URL to the image.
		 ]]></param>
</method>
<method name='cacheSize' fullname='qnx.utils:ImageCache/cacheSize/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets the cache size for your image cache given an integer representing the number of images to cache.
		 ]]></description>
<default><![CDATA[<code>Number.POSITIVE_INFINITY</code>
		 ]]></default>
</method>
<method name='cacheSize' fullname='qnx.utils:ImageCache/cacheSize/set' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<field name='_cacheLimit' fullname='qnx.utils:ImageCache/private:_cacheLimit' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_cacheTimer' fullname='qnx.utils:ImageCache/private:_cacheTimer' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_cache' fullname='qnx.utils:ImageCache/private:_cache' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<field name='_loaders' fullname='qnx.utils:ImageCache/private:_loaders' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IDataProvider' fullname='qnx.ui.data:IDataProvider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\data\IDataProvider.as' namespace='qnx.ui.data' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The interface for the <code>DataProvider</code> class.
	 
	 ]]></description>
<see><![CDATA[DataProvider
	 

	 ]]></see>
</interfaceRec>
<method name='addItemAt' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to a <code>DataProvider</code> at a given offset.
		 
		 ]]></description>
<param><![CDATA[item The item to add to the <code>DataProvider</code>.
		 ]]></param>
<param><![CDATA[index The offset at which to add the object.
		 ]]></param>
</method>
<method name='addItem' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to the <code>DataProvider</code>.
		 
		 ]]></description>
<param><![CDATA[item The item object to add.
		 ]]></param>
</method>
<method name='addItemsAt' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an array item at the specified index.
		
		]]></description>
<param><![CDATA[items The array of items to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='clone' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:clone' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		 Clones the <code>DataProvider</code> instance.
		 
		 ]]></description>
<return><![CDATA[A new <code>DataProvider</code> instance.
		 ]]></return>
</method>
<method name='getItemAt' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Returns the item at a given offset.
		 
		 ]]></description>
<param><![CDATA[index The offset of the item to return.
		 ]]></param>
<return><![CDATA[The item object.
		 ]]></return>
</method>
<method name='indexOf' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of a given object.
		 
		 ]]></description>
<param><![CDATA[obj The object for which to return the index.
		 ]]></param>
<return><![CDATA[The index of the object.
		 ]]></return>
</method>
<method name='removeAll' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all items from the <code>DataProvider</code> instance. 
		 
		 ]]></description>
</method>
<method name='removeItemAt' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from the <code>DataProvider</code> at a given offset.
		 
		 ]]></description>
<param><![CDATA[index The offset of the item to remove.
		 ]]></param>
</method>
<method name='removeItem' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from a <code>DataProvider</code> instance.
		 
		 ]]></description>
<param><![CDATA[item The item to remove from the <code>DataProvider</code>.
		 ]]></param>
</method>
<method name='replaceItemAt' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces the item at a given offset.
		 
		 ]]></description>
<param><![CDATA[item The new item object. 
		 ]]></param>
<param><![CDATA[index The offset of the item.
		 ]]></param>
</method>
<method name='replaceItem' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item, given the new item object and the old item.
		 
		 ]]></description>
<param><![CDATA[item The new item object data.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='setItems' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:setItems' isStatic='false' isFinal='false' isOverride='false'  param_names='arr;throwEvent' param_types='Array;Boolean' param_defaults='undefined;false' result_type='void'>
<description><![CDATA[
		 Sets the item data in the array.
		 
		 ]]></description>
<param><![CDATA[arr An array of item data.
		 ]]></param>
<param><![CDATA[throwEvent A Boolean that determines if an update event will occur. Default value is fale.
		 ]]></param>
</method>
<method name='updateItemAt' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the item at a given offset.
		 
		 ]]></description>
<param><![CDATA[item The new item object data.
		 ]]></param>
<param><![CDATA[index The offset at which to update the item.
		 ]]></param>
</method>
<method name='updateItem' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates an item, given the new item data object and the item to replace.
		 
		 ]]></description>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='data' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Returns the aray of item data.
		 
		 ]]></description>
<return><![CDATA[An array containing all item data for the <code>DataProvider</code> instance.
		 ]]></return>
</method>
<method name='length' fullname='qnx.ui.data:IDataProvider/qnx.ui.data:IDataProvider:length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Returns the length of the <code>DataProvider</code> instance.
		 
		 ]]></description>
<return><![CDATA[An integer representing the length.
		 
		 ]]></return>
</method>
<interfaceRec name='IDataViewer' fullname='qnx.ui.data:IDataViewer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\data\IDataViewer.as' namespace='qnx.ui.data' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	<p>
	 Interface to be implemented by components that provide access to dataProviders.
	 The IDataViewer interface provides the functionality for manipulating data in lists.
	 </p>
	 
	 ]]></description>
</interfaceRec>
<method name='addItemAt' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds an item at a given index.
		 
		 ]]></description>
<param><![CDATA[item The item to add.
		 ]]></param>
<param><![CDATA[index The index, or offset, at which to add the item. 
		 ]]></param>
</method>
<method name='addItem' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item. The item is appended to the end of the data.
		 
		 ]]></description>
<param><![CDATA[item The item to add to the DataProvider.
		 ]]></param>
</method>
<method name='addItemsAt' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an array item at the specified index.
		
		]]></description>
<param><![CDATA[items The array of items to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='getItemAt' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Returns the item at a given index.
		 
		 ]]></description>
<param><![CDATA[index The offset of the item.
		 ]]></param>
<return><![CDATA[The item.
		 ]]></return>
</method>
<method name='removeAll' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all items from the DataProvider.
		 
		 ]]></description>
</method>
<method name='removeItemAt' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from the data, given the index of the item.
		 
		 ]]></description>
<param><![CDATA[index The offset of the item to remove.
		 ]]></param>
</method>
<method name='removeItem' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from the DataProvider, given the item.
		 
		 ]]></description>
<param><![CDATA[item The item to remove.
		 ]]></param>
</method>
<method name='replaceItemAt' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item at a given offset.
		 
		 ]]></description>
<param><![CDATA[item The replacement item.
		 ]]></param>
<param><![CDATA[index The offset of the item to replace.
		 ]]></param>
</method>
<method name='replaceItem' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item.
		 
		 ]]></description>
<param><![CDATA[item The new item data.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='updateItemAt' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates an item at a given index.
		 
		 ]]></description>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[index The index of the item to update.
		 ]]></param>
</method>
<method name='updateItem' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates an item.
		 
		 ]]></description>
<param><![CDATA[item The new item data.
		 ]]></param>
<param><![CDATA[oldObject The item to update.
		 ]]></param>
</method>
<method name='dataProvider' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:dataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		 Gets and sets the dataProvider. 
		 
		 ]]></description>
</method>
<method name='dataProvider' fullname='qnx.ui.data:IDataViewer/qnx.ui.data:IDataViewer:dataProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='dp' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
</method>
<interfaceRec name='ISectionDataProvider' fullname='qnx.ui.data:ISectionDataProvider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\data\ISectionDataProvider.as' namespace='qnx.ui.data' access='public' baseClasses='qnx.ui.data:IDataProvider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The interface for the <code>SectionDataProvider</code> class.
	 
	 ]]></description>
<see><![CDATA[SectionDataProvider
	 ]]></see>
</interfaceRec>
<method name='addChildToIndexAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:addChildToIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index;childindex' param_types='Object;int;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an item, given the item, index, and child index.
		 
		 ]]></description>
<param><![CDATA[item The item for which to add the child.
		 ]]></param>
<param><![CDATA[index The offset at which to add the child.
		 ]]></param>
<param><![CDATA[childindex The index of the child.
		 ]]></param>
</method>
<method name='addChildToItemAtIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:addChildToItemAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='child;item;index' param_types='Object;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an item at a given index, given the child and item.
		 
		 ]]></description>
<param><![CDATA[child The child object to add.
		 ]]></param>
<param><![CDATA[item The item for which to add the child.
		 ]]></param>
<param><![CDATA[index The offset location at which to add the new child.
		 ]]></param>
</method>
<method name='addChildToItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:addChildToItem' isStatic='false' isFinal='false' isOverride='false'  param_names='child;item' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an item, given the child and item. The child is appended to the end of the data.
		 
		 ]]></description>
<param><![CDATA[child The child object to add.
		 ]]></param>
<param><![CDATA[item The item for which to add the child.
		 ]]></param>
</method>
<method name='getChildInItemAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:getChildInItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;childindex' param_types='Object;int' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Returns a child in an item, given the index of the child.
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[childindex The index of the child.
		 ]]></param>
<return><![CDATA[The child object.
		 ]]></return>
</method>
<method name='getChildrenLengthAtIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:getChildrenLengthAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the number of children at the given index.
		 
		 ]]></description>
<param><![CDATA[index The index of the item for which to return the number of children.
		 ]]></param>
<return><![CDATA[An integer representing the number of children.
		 ]]></return>
</method>
<method name='getChildrenLengthForItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:getChildrenLengthForItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the number of children for the given item.
		 
		 ]]></description>
<param><![CDATA[item The item, for which to return the number of children.
		 ]]></param>
<return><![CDATA[An integer representing the number of children for the item.
		 ]]></return>
</method>
<method name='indexOfChildAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:indexOfChildAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='int;Object' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of a child, given the item that contains the child and the index.
		 
		 ]]></description>
<param><![CDATA[index The index.
		 ]]></param>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<return><![CDATA[The index of the child.
		 ]]></return>
</method>
<method name='removeAllChildrenFromIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:removeAllChildrenFromIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes all children from a given index.
		 
		 ]]></description>
<param><![CDATA[index The index for which to remove all children.
		 ]]></param>
</method>
<method name='removeAllChildrenFromItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:removeAllChildrenFromItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes all children from a given index.
		 
		 ]]></description>
<param><![CDATA[item The item from which to remove all the children.
		 ]]></param>
</method>
<method name='removeChildFromIndexAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:removeChildFromIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;childindex' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child from an index, given the index and the index of the child.
		 
		 ]]></description>
<param><![CDATA[index The index that contains the child.
		 ]]></param>
<param><![CDATA[childindex The index of the child.
		 ]]></param>
</method>
<method name='removeChildFromIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:removeChildFromIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;child' param_types='int;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child from an index, given the child and the index.
		 
		 ]]></description>
<param><![CDATA[index The index that contains the child.
		 ]]></param>
<param><![CDATA[child The child object to remove.
		 ]]></param>
</method>
<method name='removeChildFromItemAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:removeChildFromItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child from an item, given the item and the index of the child.
		 
		 ]]></description>
<param><![CDATA[item The item, for which to remove the child.
		 ]]></param>
<param><![CDATA[index The index of the child to remove.
		 ]]></param>
</method>
<method name='removeChildFromItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:removeChildFromItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes the child from an item, given the item and the child.
		 
		 ]]></description>
<param><![CDATA[item The item, for which to remove the child.
		 ]]></param>
<param><![CDATA[child The child to remove.
		 ]]></param>
</method>
<method name='replaceChildInIndexAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:replaceChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;childindex' param_types='int;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child in an index at a given offset.
		 
		 ]]></description>
<param><![CDATA[index The index.
		 ]]></param>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[childindex The index of the child to replace.
		 ]]></param>
</method>
<method name='replaceChildInIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:replaceChildInIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;oldObject' param_types='int;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child in an index, given the index, the item that contains the child, and the old child data.
		 
		 ]]></description>
<param><![CDATA[index The index.
		 ]]></param>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[oldObject The child object to replace.
		 ]]></param>
</method>
<method name='replaceChildInItemAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:replaceChildInItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;childindex' param_types='Object;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child in an item at a given index, given the item, the child, and the index of the child.
		 
		 ]]></description>
<param><![CDATA[item That item that contains the child.
		 ]]></param>
<param><![CDATA[child The child to replace.
		 ]]></param>
<param><![CDATA[childindex The index of the child to replace.
		 ]]></param>
</method>
<method name='replaceChildInItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:replaceChildInItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;oldObject' param_types='Object;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child in an item, given the child, the item, and the old child data.
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[child The child to update.
		 ]]></param>
<param><![CDATA[oldObject The old child object.
		 ]]></param>
</method>
<method name='setChildrenForIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:setChildrenForIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;children;throwEvent' param_types='int;qnx.ui.data:DataProvider;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Sets the children data for a given index.
		 
		 ]]></description>
<param><![CDATA[index The index for which to set the children data.
		 ]]></param>
<param><![CDATA[children A <code>DataProvider</code> object that contains the children data.
		 ]]></param>
<param><![CDATA[throwEvent A Boolean that determines whether or not an update event occurs. false by default.
		 ]]></param>
</method>
<method name='setChildrenForItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:setChildrenForItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;children;throwEvent' param_types='Object;qnx.ui.data:DataProvider;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Sets the children data for a given item.
		 
		 ]]></description>
<param><![CDATA[index The index for which to set the children data.
		 ]]></param>
<param><![CDATA[children A <code>DataProvider</code> object that contains the children data.
		 ]]></param>
<param><![CDATA[throwEvent A Boolean that determines whether or not an update event occurs. false by default.
		 ]]></param>
</method>
<method name='updateChildInIndexAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:updateChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;childindex' param_types='int;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the child in the index at a given offset.
		 
		 ]]></description>
<param><![CDATA[index The index.
		 ]]></param>
<param><![CDATA[item The item that contains the index.
		 ]]></param>
<param><![CDATA[childindex The index of the child to update.
		 ]]></param>
</method>
<method name='updateChildInIndex' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:updateChildInIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;oldObject' param_types='int;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates a child in an index, given the item, the index, and the old child object.
		 
		 ]]></description>
<param><![CDATA[index The index to update.
		 ]]></param>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[oldObject The old child data.
		 ]]></param>
</method>
<method name='updateChildInItemAt' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:updateChildInItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;childindex' param_types='Object;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the child in the item at a given index.
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[child The new child data.
		 ]]></param>
<param><![CDATA[childindex The index of the child to update.
		 ]]></param>
</method>
<method name='updateChildInItem' fullname='qnx.ui.data:ISectionDataProvider/qnx.ui.data:ISectionDataProvider:updateChildInItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;oldObject' param_types='Object;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates a child, given the item that contains the child, the new child object and the child to update.
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[child The new child data.
		 ]]></param>
<param><![CDATA[oldObject The child object to update.
		 ]]></param>
</method>
<classRec name='DataProvider' fullname='qnx.ui.data:DataProvider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\data\DataProvider.as' namespace='qnx.ui.data' access='public' baseclass='flash.events:EventDispatcher' interfaces='qnx.ui.data:IDataProvider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	The DataProvider class provides a linear representation of a set of data and methods to enable modification of the data. <code>List</code> classes,
	such as the <code>List</code> and <code>TileList</code> use the <code>DataProvider</code>
	class in order to handle their data. 
	]]></description>
<metadata>
	<Event owner='qnx.ui.data:DataProvider' name='dataChange' type='qnx.ui.events.DataProviderEvent' >
<description><![CDATA[
	  Data Change event dispatched when data is modified. 
	  ]]></description>
<eventType><![CDATA[qnx.ui.events.DataProviderEvent.DATA_CHANGE
	  ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='DataProvider' fullname='qnx.ui.data:DataProvider/DataProvider' isStatic='false' isFinal='false' isOverride='false'  param_names='dp;dispatchCreate' param_types='Array;Boolean' param_defaults='null;false' result_type='*'>
<description><![CDATA[
		Creates a new <code>DataProvider</code> instance.
		
		]]></description>
<param><![CDATA[dp An Array containing the initial set of items.
		]]></param>
<param><![CDATA[dispatchCreate Setting this value to true causes a <code>DataProviderEvent.UPDATE_ALL</code> event to occur on creation. This parameter is
		set to false by default.
		]]></param>
</method>
<method name='addItemAt' fullname='qnx.ui.data:DataProvider/addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an item at the specified index.
		
		]]></description>
<param><![CDATA[item The item to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the item.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='addItem' fullname='qnx.ui.data:DataProvider/addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Appends an item to the end of the data.
		
		]]></description>
<param><![CDATA[item The item to add.
		]]></param>
<see><![CDATA[#addItemAt()
		]]></see>
</method>
<method name='addItemsAt' fullname='qnx.ui.data:DataProvider/addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Adds an array item at the specified index.
		
		]]></description>
<param><![CDATA[items The array of items to add.
		]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		
		]]></param>
<see><![CDATA[#addItem()
		]]></see>
<see><![CDATA[#addItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='checkIndex' fullname='qnx.ui.data:DataProvider/protected:checkIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;maximum' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clone' fullname='qnx.ui.data:DataProvider/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		Creates a clone of this DataProvider. The new instance contains the same data.
		
		]]></description>
<return><![CDATA[The cloned DataProvider.
		]]></return>
</method>
<method name='dispatchChange' fullname='qnx.ui.data:DataProvider/protected:dispatchChange' isStatic='false' isFinal='false' isOverride='false'  param_names='type;items;startIndex;endIndex;childStartIndex;childEndIndex' param_types='String;Array;int;int;int;int' param_defaults='undefined;undefined;undefined;undefined;-1;-1' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getItemAt' fullname='qnx.ui.data:DataProvider/getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		Returns the item at the specified index.
		
		]]></description>
<param><![CDATA[index The index of the item to return.
		
		]]></param>
<return><![CDATA[The item at the specified index
		
		]]></return>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		]]></throws>
</method>
<method name='indexOf' fullname='qnx.ui.data:DataProvider/indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		Returns the index of an item.
		
		]]></description>
<param><![CDATA[item The item for which to return the index.
		
		]]></param>
<return><![CDATA[The index of the item in the data provider. Returns -1 if the item is not found in the data provider.
		]]></return>
</method>
<method name='init' fullname='qnx.ui.data:DataProvider/private:init' isStatic='false' isFinal='false' isOverride='false'  param_names='dp;dispatchCreate' param_types='Array;Boolean' param_defaults='null;false' result_type='void'>
</method>
<method name='removeAll' fullname='qnx.ui.data:DataProvider/removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Removes all items from the data provider.
		
		]]></description>
<see><![CDATA[#removeItem()
		]]></see>
<see><![CDATA[#removeItemAt()
		]]></see>
</method>
<method name='removeItemAt' fullname='qnx.ui.data:DataProvider/removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes an item from the specified index location.
		
		]]></description>
<param><![CDATA[index The index of the object to remove.
		
		]]></param>
<see><![CDATA[#removeItem()
		]]></see>
<see><![CDATA[#removeAll()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		]]></throws>
</method>
<method name='removeItem' fullname='qnx.ui.data:DataProvider/removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Removes the item from the data provider.
		]]></description>
<param><![CDATA[item The item to remove.
		
		]]></param>
<see><![CDATA[#removeItemAt()
		]]></see>
<see><![CDATA[#removeAll()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='replaceItemAt' fullname='qnx.ui.data:DataProvider/replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Replaces the item at the specified index with a new item.
		
		]]></description>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[index The index of the item to replace.
		
		]]></param>
<see><![CDATA[#replaceItem()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		]]></throws>
</method>
<method name='replaceItem' fullname='qnx.ui.data:DataProvider/replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Replaces an item with a new item.
		
		]]></description>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[oldObject The current item to replace.
		
		]]></param>
<see><![CDATA[#replaceItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='setItems' fullname='qnx.ui.data:DataProvider/setItems' isStatic='false' isFinal='false' isOverride='false'  param_names='arr;throwEvent' param_types='Array;Boolean' param_defaults='undefined;false' result_type='void'>
<description><![CDATA[
		Sets the entire data provider to the new array.
		
		]]></description>
<param><![CDATA[arr An Array of new values.
		]]></param>
<param><![CDATA[throwEvent When set to true, a <code>DataProviderEvent.UPDATE_ALL</code> event is fired. The default is false.
		
		]]></param>
</method>
<method name='updateItemAt' fullname='qnx.ui.data:DataProvider/updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Updates the item at the specified index with a new item.
		
		]]></description>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[index The index of the item to replace.
		
		]]></param>
<see><![CDATA[#updateItem()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='updateItem' fullname='qnx.ui.data:DataProvider/updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		Updates an item with a new item at the same position in the data provider.
		
		]]></description>
<param><![CDATA[item The new item.
		]]></param>
<param><![CDATA[oldObject The current item to replace.
		
		]]></param>
<see><![CDATA[#updateItemAt()
		]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		
		]]></throws>
</method>
<method name='data' fullname='qnx.ui.data:DataProvider/data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		Returns the data as an Array.
		
		]]></description>
<return><![CDATA[An array containing the data.
		]]></return>
</method>
<method name='length' fullname='qnx.ui.data:DataProvider/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		Returns the length of the data.
		
		]]></description>
<return><![CDATA[An integer representing the length of the data.
		]]></return>
</method>
<field name='__data' fullname='qnx.ui.data:DataProvider/private:__data' type='Array' isStatic='false' isConst='false' >
</field>
<classRec name='SectionDataProvider' fullname='qnx.ui.data:SectionDataProvider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\data\SectionDataProvider.as' namespace='qnx.ui.data' access='public' baseclass='qnx.ui.data:DataProvider' interfaces='qnx.ui.data:ISectionDataProvider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The SectionDataProvider class provides a tree type representation of a set of data and methods to enable modification of the data. 
	 The SectionDataProvider class provides data in a sectioned list, where a single list contains multiple items, 
	 with each item containing a list of children. The SectionDataProvider class is useful for showing more 
	 complex data lists, such as a calendar of dates, or a catalog of related products.
	 
	 <p>
	 The <code>SectionList</code> and <code>SectionTileList</code> classes use the <code>SectionDataProvider</code>
	 class in order to handle their data.
	 </p>
	 
	 ]]></description>
<see><![CDATA[ISectionDataProvider
	 ]]></see>
<see><![CDATA[DataProvider
	 
	 ]]></see>
</classRec>
<method name='SectionDataProvider' fullname='qnx.ui.data:SectionDataProvider/SectionDataProvider' isStatic='false' isFinal='false' isOverride='false'  param_names='dp;dispatchCreate;initChildren' param_types='Array;Boolean;flash.utils:Dictionary' param_defaults='null;false;null' result_type='*'>
<description><![CDATA[
		 Creates a SectionDataProvider instance given an array of data items.
		 
		 ]]></description>
<param><![CDATA[dp The initial array of data items.
		 ]]></param>
<param><![CDATA[dispatchCreate Setting this value to true causes a <code>DataProviderEvent.UPDATE_ALL</code> 
		 			event to occur on creation. This parameter is set to <em>false</em> by default. 
		 ]]></param>
<param><![CDATA[initChildren Initialize the children in the <code>Dictionary</code>. 
		 ]]></param>
</method>
<method name='addChildToIndexAt' fullname='qnx.ui.data:SectionDataProvider/addChildToIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index;childindex' param_types='Object;int;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an item at a given index.
		 
		 ]]></description>
<param><![CDATA[item The item for which to add the child. 
		 ]]></param>
<param><![CDATA[index The index at which to add the child.
		 ]]></param>
<param><![CDATA[childindex The index within the item, at which to add the child.
		 ]]></param>
</method>
<method name='addChildToIndex' fullname='qnx.ui.data:SectionDataProvider/addChildToIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an index. 
		 
		 ]]></description>
<param><![CDATA[item The item for which to add the child.
		 ]]></param>
<param><![CDATA[index The index at which to add the item.
		 ]]></param>
</method>
<method name='addChildToItemAtIndex' fullname='qnx.ui.data:SectionDataProvider/addChildToItemAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='child;item;index' param_types='Object;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an item at a given index, given the child and the item object.
		 
		 ]]></description>
<param><![CDATA[child The child object to add to the item.
		 ]]></param>
<param><![CDATA[item The item for which to add the child.
		 ]]></param>
<param><![CDATA[index The location at which to add the child.
		 ]]></param>
</method>
<method name='addChildToItem' fullname='qnx.ui.data:SectionDataProvider/addChildToItem' isStatic='false' isFinal='false' isOverride='false'  param_names='child;item' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a child to an item, given the child and the item object.
		 
		 ]]></description>
<param><![CDATA[child The child object to add to the item.
		 ]]></param>
<param><![CDATA[item The item object for which to to add the child.
		 ]]></param>
</method>
<method name='clone' fullname='qnx.ui.data:SectionDataProvider/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getChildInIndexAt' fullname='qnx.ui.data:SectionDataProvider/getChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;childindex' param_types='int;int' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Returns a child in a section, given an index.
		 
		 ]]></description>
<param><![CDATA[index The index of the section for which to return the child.
		 ]]></param>
<param><![CDATA[childindex The index of the child, within the section.
		 ]]></param>
<return><![CDATA[The child.
		 ]]></return>
</method>
<method name='getChildInItemAt' fullname='qnx.ui.data:SectionDataProvider/getChildInItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;childindex' param_types='Object;int' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Returns a child from an item at a given index.
		 
		 ]]></description>
<param><![CDATA[item The item from which to return the child. 
		 ]]></param>
<param><![CDATA[childindex The index of the child to return.
		 ]]></param>
<return><![CDATA[The child.
		 ]]></return>
</method>
<method name='getChildrenAtIndex' fullname='qnx.ui.data:SectionDataProvider/getChildrenAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='qnx.ui.data:DataProvider'>
<description><![CDATA[
		 Returns the children for a given index.
		 
		 ]]></description>
<param><![CDATA[index The index for which to return the children.
		 ]]></param>
<return><![CDATA[A <code>DataProvider</code> containing the children data.
		 ]]></return>
</method>
<method name='getChildrenForItem' fullname='qnx.ui.data:SectionDataProvider/getChildrenForItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='qnx.ui.data:DataProvider'>
<description><![CDATA[
		 Returns the children for a given item.
		 
		 ]]></description>
<param><![CDATA[item The item for which to return the children.
		 ]]></param>
<return><![CDATA[A DataProvider containing the children data.
		 ]]></return>
</method>
<method name='getChildrenLengthAtIndex' fullname='qnx.ui.data:SectionDataProvider/getChildrenLengthAtIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the number of children at a given index. 
		 
		 ]]></description>
<param><![CDATA[index The index, for which to return the number of childen.
		 ]]></param>
<return><![CDATA[The number of childen.
		 ]]></return>
</method>
<method name='getChildrenLengthForItem' fullname='qnx.ui.data:SectionDataProvider/getChildrenLengthForItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='int'>
<description><![CDATA[
		 Returns the number of children for a given item.
		 
		 ]]></description>
<param><![CDATA[item The item for which to return the number of children.
		 ]]></param>
<return><![CDATA[The number of children.
		 ]]></return>
</method>
<method name='indexOfChildAt' fullname='qnx.ui.data:SectionDataProvider/indexOfChildAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='int;Object' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
		 Returns the index of a given child. 
		 
		 ]]></description>
<param><![CDATA[index The index of the section.
		 ]]></param>
<param><![CDATA[item The 
		 ]]></param>
<return><![CDATA[]]></return>
</method>
<method name='removeAllChildrenFromIndex' fullname='qnx.ui.data:SectionDataProvider/removeAllChildrenFromIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes all children from a given index.
		 
		 ]]></description>
<param><![CDATA[index The index (section) for which to remove the children.
		 ]]></param>
</method>
<method name='removeAllChildrenFromItem' fullname='qnx.ui.data:SectionDataProvider/removeAllChildrenFromItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes all children from a given item. 
		 
		 ]]></description>
<param><![CDATA[item The item for which to remove all children.
		 ]]></param>
</method>
<method name='removeAll' fullname='qnx.ui.data:SectionDataProvider/removeAll' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeChildFromIndexAt' fullname='qnx.ui.data:SectionDataProvider/removeChildFromIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;childindex' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child, given a index and a child index.
		 
		 ]]></description>
<param><![CDATA[index The index of the item that contains the child.
		 ]]></param>
<param><![CDATA[childindex The index of the child, within the item.
		 ]]></param>
</method>
<method name='removeChildFromIndex' fullname='qnx.ui.data:SectionDataProvider/removeChildFromIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;child' param_types='int;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child from a given index.
		 
		 ]]></description>
<param><![CDATA[index The index at which to remove the child.
		 ]]></param>
<param><![CDATA[child The child to remove.
		 ]]></param>
</method>
<method name='removeChildFromItemAt' fullname='qnx.ui.data:SectionDataProvider/removeChildFromItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child from an item at a given index.
		 
		 ]]></description>
<param><![CDATA[item The item from which to remove the child.
		 ]]></param>
<param><![CDATA[index The index at which to remove the child.
		 ]]></param>
</method>
<method name='removeChildFromItem' fullname='qnx.ui.data:SectionDataProvider/removeChildFromItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a child from an item, given the child and the item.
		 
		 ]]></description>
<param><![CDATA[item The item from which to remove the given child.
		 ]]></param>
<param><![CDATA[child The child to remove from the item.
		 ]]></param>
</method>
<method name='removeItemAt' fullname='qnx.ui.data:SectionDataProvider/removeItemAt' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='replaceChildInIndexAt' fullname='qnx.ui.data:SectionDataProvider/replaceChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;childindex' param_types='int;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child, given the index of the section, the index of the child, and the new item.
		 
		 ]]></description>
<param><![CDATA[index The index of the section.
		 ]]></param>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[childindex The index of the item to replace.
		 ]]></param>
</method>
<method name='replaceChildInIndex' fullname='qnx.ui.data:SectionDataProvider/replaceChildInIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;oldObject' param_types='int;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child in an index, given the new child and old child. 
		 
		 ]]></description>
<param><![CDATA[index The index of the section at which to replace the child.
		 ]]></param>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='replaceChildInItemAt' fullname='qnx.ui.data:SectionDataProvider/replaceChildInItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;childindex' param_types='Object;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces a child in an item, at a given index.
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[child The child to replace.
		 ]]></param>
<param><![CDATA[childindex The index of the child to replace.
		 ]]></param>
</method>
<method name='replaceChildInItem' fullname='qnx.ui.data:SectionDataProvider/replaceChildInItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;oldObject' param_types='Object;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces the child for a given item, given the item, the new child and the child to replace.
		 
		 ]]></description>
<param><![CDATA[item The item for which to replace the child.
		 ]]></param>
<param><![CDATA[child The new child.
		 ]]></param>
<param><![CDATA[oldObject The old child to replace.
		 ]]></param>
</method>
<method name='replaceItemAt' fullname='qnx.ui.data:SectionDataProvider/replaceItemAt' isStatic='false' isFinal='false' isOverride='true'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setChildrenForIndex' fullname='qnx.ui.data:SectionDataProvider/setChildrenForIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;children;throwEvent' param_types='int;qnx.ui.data:DataProvider;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Sets the children data for a given index, given the index, the <code>DataProvider</code>, and a Boolean that determines whether or 
		 not an event will be dispatched. 
		 
		 
		 ]]></description>
<param><![CDATA[index The index for which to set the children.
		 ]]></param>
<param><![CDATA[children The <code>DataProvider</code> that contains the children data.
		 ]]></param>
<param><![CDATA[throwEvent A Boolean that determines whether or not an event will be dispatched.
		 ]]></param>
</method>
<method name='setChildrenForItem' fullname='qnx.ui.data:SectionDataProvider/setChildrenForItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;children;throwEvent' param_types='Object;qnx.ui.data:DataProvider;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Sets the children data for a given item, given the <code>DataProvider</code>, and a Boolean that determines whether or 
		 not an event will be dispatched. 
		 
		 ]]></description>
<param><![CDATA[item The item for which to add the children.
		 ]]></param>
<param><![CDATA[children The <code>DataProvider</code> that contains the children data.
		 ]]></param>
<param><![CDATA[throwEvent A Boolean that determines whether or not an event will be dispatched.
		 ]]></param>
</method>
<method name='updateChildInIndexAt' fullname='qnx.ui.data:SectionDataProvider/updateChildInIndexAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;childindex' param_types='int;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates a child given the index of the parent (item), the child index and the child item.
		 
		 ]]></description>
<param><![CDATA[index The index of the item.
		 ]]></param>
<param><![CDATA[item The child item to update.
		 ]]></param>
<param><![CDATA[childindex The index of the child to update.
		 ]]></param>
</method>
<method name='updateChildInIndex' fullname='qnx.ui.data:SectionDataProvider/updateChildInIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item;oldObject' param_types='int;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates a child at a given index.
		 
		 ]]></description>
<param><![CDATA[index The index of the child to update.
		 ]]></param>
<param><![CDATA[item The new item.
		 ]]></param>
<param><![CDATA[oldObject The child object to update.
		 ]]></param>
</method>
<method name='updateChildInItemAt' fullname='qnx.ui.data:SectionDataProvider/updateChildInItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;childindex' param_types='Object;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates a child in an item, given the item, the child to update, and the index of the child.
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[child The child to update.
		 ]]></param>
<param><![CDATA[childindex The index of the child to update.
		 ]]></param>
</method>
<method name='updateChildInItem' fullname='qnx.ui.data:SectionDataProvider/updateChildInItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;child;oldObject' param_types='Object;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates a child in an item, given the item, the child to update, and the old child object. 
		 
		 ]]></description>
<param><![CDATA[item The item that contains the child.
		 ]]></param>
<param><![CDATA[child The new child object.
		 ]]></param>
<param><![CDATA[oldObject The child object to update.
		 ]]></param>
</method>
<method name='updateItemAt' fullname='qnx.ui.data:SectionDataProvider/updateItemAt' isStatic='false' isFinal='false' isOverride='true'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__children' fullname='qnx.ui.data:SectionDataProvider/private:__children' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<classRec name='Locale' fullname='qnx.locale:Locale' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\locale\Locale.as' namespace='qnx.locale' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	The Locale class represents a specific locale.
	<p>
	This class can be used to change or access some locale-specific items. 
	To change the locale of the entire application, you must use the <code>LocaleManager</code> class. 
	</p>
	 ]]></description>
<see><![CDATA[qnx.locale.LocaleManager
	 ]]></see>
<see><![CDATA[qnx.locale.LocaleResourceBundle
	]]></see>
<metadata>
	<Event owner='qnx.locale:Locale' name='complete' type='flash.events.Event.COMPLETE' >
<description><![CDATA[
	  Dispatched after a property file has been successfully loaded and parsed.
	  ]]></description>
<eventType><![CDATA[flash.events.Event.COMPLETE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Locale' fullname='qnx.locale:Locale/Locale' isStatic='false' isFinal='false' isOverride='false'  param_names='locale_id;loadResource' param_types='String;Boolean' param_defaults='undefined;false' result_type='*'>
<description><![CDATA[
		Creates a new Locale instance given an ID.
		
		]]></description>
<param><![CDATA[locale_id A <code>String</code> representing the ID of the locale. For example, <i>en_US</i>.
		]]></param>
<param><![CDATA[loadResource An optional parameter that, when set to <i>true</i>, loads the <code>resource.property</code> file 
		for the locale upon creation. The default value is <i>false</i>.
		]]></param>
<see><![CDATA[#loadResources()
		]]></see>
</method>
<method name='getResource' fullname='qnx.locale:Locale/getResource' isStatic='false' isFinal='false' isOverride='false'  param_names='key;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
		Returns the resource for the specified key from the currently loaded localization file.
		
		]]></description>
<param><![CDATA[key The key of the resource that is returned.
		]]></param>
<param><![CDATA[args Optional parameters that can be used as wildcard replacements in the returned String.
		]]></param>
<return><![CDATA[A String representing the value of the key in the localization file.
		]]></return>
</method>
<method name='loadResources' fullname='qnx.locale:Locale/loadResources' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		Loads the resource property file for the current locale.
		
		This method attempts to load a file in the following path <code>locale/locale id/resource.properties</code>, where <i>locale id</i> is the current locale ID.
		
		]]></description>
</method>
<method name='resourcesLoaded' fullname='qnx.locale:Locale/private:resourcesLoaded' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='id' fullname='qnx.locale:Locale/id/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Gets the ID of the locale.
		
		]]></description>
<return><![CDATA[A <code>String</code> representing the ID of the locale.
		
		]]></return>
</method>
<field name='__id' fullname='qnx.locale:Locale/private:__id' type='String' isStatic='false' isConst='false' >
</field>
<field name='__resources' fullname='qnx.locale:Locale/private:__resources' type='qnx.locale:LocaleResourceBundle' isStatic='false' isConst='false' >
</field>
<classRec name='LocaleManager' fullname='qnx.locale:LocaleManager' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\locale\LocaleManager.as' namespace='qnx.locale' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The LocaleManager manages system locale changes enabling you to both listen for system locale changes and set the 
	 locale of an application. 
	 
	 You can place a resource <code>String</code> file in the following folder in the root of your application directory: 
	 <listing>
	 locale/&lt;locale id&gt;/resource.properties 
	 </listing>
	 where &lt;locale id&gt; is a valid locale ID, such as <i>en_US</i>. You can place any other localized assets in this folder, such as
	 images and fonts. The <code>getLocalePath()</code> function returns the path to the current locale directory. The path is relative
	 to the current application directory.
	 
	 ]]></description>
<see><![CDATA[Locale
	 ]]></see>
<see><![CDATA[LocaleResourceBundle
	 ]]></see>
<metadata>
	<Event owner='qnx.locale:LocaleManager' name='change' type='flash.events.Event' >
<description><![CDATA[
	 
	  Dispatched when a locale has been changed and the associated localization resources have finished loading.
	 
	  ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='LocaleManager' fullname='qnx.locale:LocaleManager/LocaleManager' isStatic='false' isFinal='false' isOverride='false'  param_names='enforcer' param_types='LocaleManager.as$64:SingletonEnforcer' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 		 Do not instantiate the LocaleManager by using this constructor.
		 
		 <p>
		 Instead, use the <code>LocaleManager.localeManager</code> property to return the Singleton instance.
		 </p> 
		 
		 ]]></description>
<see><![CDATA[LocaleManager#localeManager
		 ]]></see>
</method>
<method name='dispatchLocaleChange' fullname='qnx.locale:LocaleManager/private:dispatchLocaleChange' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getCurrentLocale' fullname='qnx.locale:LocaleManager/getCurrentLocale' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Returns the current locale of the application.
		
		]]></description>
<return><![CDATA[The ID of the current locale.
		]]></return>
</method>
<method name='getDeviceLocale' fullname='qnx.locale:LocaleManager/getDeviceLocale' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Returns the current locale of the device.
		
		]]></description>
<return><![CDATA[The ID of the current locale.
		]]></return>
</method>
<method name='getLocalePath' fullname='qnx.locale:LocaleManager/getLocalePath' isStatic='true' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		Returns the path from the application directory to the current locale directory in the format, <code>locale/{locale id}/</code>. 
		
		<p>
		You can place any localized asset in its locale directory. This path allows you to reference an asset in the currently selected locale.
		</p>
		]]></description>
<return><![CDATA[The path to the current locale folder.
		]]></return>
</method>
<method name='getResource' fullname='qnx.locale:LocaleManager/getResource' isStatic='false' isFinal='false' isOverride='false'  param_names='key;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
		Returns the resource for the specified key from the currently loaded localization file.
		
		]]></description>
<param><![CDATA[key The key of the resource to be returned.
		]]></param>
<param><![CDATA[args Optional parameters that can be used as wildcard replacements in the returned String.
		]]></param>
<return><![CDATA[A <code>String</code> representing the value of the key in the localization file.
		]]></return>
</method>
<method name='init' fullname='qnx.locale:LocaleManager/private:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onLocaleChange' fullname='qnx.locale:LocaleManager/private:onLocaleChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='onLocaleLoaded' fullname='qnx.locale:LocaleManager/private:onLocaleLoaded' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='setLocale' fullname='qnx.locale:LocaleManager/setLocale' isStatic='false' isFinal='false' isOverride='false'  param_names='locale' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Sets the locale of the application, given the locale ID.
		<p>
		This function dispatches a flash.events.Event.CHANGE event when the current locale resources have been loaded and parsed.
		</p>
		
		]]></description>
<param><![CDATA[locale The ID of the locale.
		]]></param>
</method>
<method name='localeManager' fullname='qnx.locale:LocaleManager/localeManager/get' isStatic='true' isFinal='false' isOverride='false'  result_type='qnx.locale:LocaleManager'>
<description><![CDATA[
		Returns the <code>Singleton</code> instance of the LocaleManager. 
		You can only instantiate a single instance in an application.
		<p>
		The following example returns an instance of the <code>LocaleManager</code>:
		</p>
		<listing>
		var categories:Object = new Object();
		categories.label = LocaleManager.localeManager.getResource("menu_item_categories");
		</listing> 
		<p>
		Do not instantiate the <code>LocaleManager</code> from its public constructor.
		</p>
		]]></description>
<return><![CDATA[Returns the Singleton instance of the LocaleManager.
		]]></return>
</method>
<field name='DEFAULT_LOCALE' fullname='qnx.locale:LocaleManager/DEFAULT_LOCALE' type='String' isStatic='true' isConst='true' defaultValue='en_US' >
<description><![CDATA[
		 A <code>String</code> representing the default locale of the device. 
		 
		 ]]></description>
</field>
<field name='LOCALE_FOLDER' fullname='qnx.locale:LocaleManager/LOCALE_FOLDER' type='String' isStatic='true' isConst='true' defaultValue='locale/' >
<description><![CDATA[
		 A <code>String</code> representing the location of the locale folder.
		 		 
		 ]]></description>
</field>
<field name='__deviceLocale' fullname='qnx.locale:LocaleManager/private:__deviceLocale' type='LocaleManager.as$64:DeviceLocale' isStatic='false' isConst='false' >
</field>
<field name='__instance' fullname='qnx.locale:LocaleManager/private:__instance' type='qnx.locale:LocaleManager' isStatic='true' isConst='false' >
</field>
<field name='__locale' fullname='qnx.locale:LocaleManager/private:__locale' type='qnx.locale:Locale' isStatic='false' isConst='false' >
</field>
<classRec name='LocaleResourceBundle' fullname='qnx.locale:LocaleResourceBundle' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\locale\LocaleResourceBundle.as' namespace='qnx.locale' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>LocaleResourceBundle</code> class loads and parses localized <code>String</code> files.
	 <p>
	 The following parsing rules are supported:
	 </p>
	 <ul>
	 <li>Lines starting with "#" or "!" are not parsed and are considered comments.</li>
	 <li>Any whitespace on the left of the "=" symbol is stripped out and the resulting value is used as the key.</li>
	 <li>Any whitespace at the start of the value, to the right of the "=" symbol, is stripped out.</li>
	 <li>To include whitespace at the beginning of your value, add a "\" to the beginning of the <code>String</code> in order to escape it.</li>
	 <li>Any whitespace at the end of a value is preserved and is not stripped out.</li>
	 <li>You can combine multi-line values by adding a "\" at the end of the line.</li>
	 </ul>
	 <p>
	 Your <code>String</code> can also contain wildcard replacements, which are replaced when a <code>String</code> 
	 is returned.
	 For example: <code>wildcard=And a %1% and a %2% and a %3%</code>
	 </p>
	 <p>
	 To replace the wildcards, add additional parameters to a <code>getResource</code> method call, such as
	 <code>LocaleManager.localeManager.getResource( "wildcard", 1,2,3 );</code>
	 </p>
	 ]]></description>
<metadata>
	<Event owner='qnx.locale:LocaleResourceBundle' name='complete' type='flash.events.Event.COMPLETE' >
<description><![CDATA[	 
	  Dispatched after a property file has been successfully loaded and parsed.
	 
	  ]]></description>
<eventType><![CDATA[flash.events.Event.COMPLETE
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='LocaleResourceBundle' fullname='qnx.locale:LocaleResourceBundle/LocaleResourceBundle' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates an instance of a local resource bundle. 
		 ]]></description>
</method>
<method name='expandNL' fullname='qnx.locale:LocaleResourceBundle/private:expandNL' isStatic='false' isFinal='false' isOverride='false'  param_names='line' param_types='String' param_defaults='undefined' result_type='String'>
</method>
<method name='getResource' fullname='qnx.locale:LocaleResourceBundle/getResource' isStatic='false' isFinal='false' isOverride='false'  param_names='key;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
		Returns the value for the specified key from the loaded property file.
		
		]]></description>
<param><![CDATA[key The key for the value in the property file.
		]]></param>
<param><![CDATA[args Optional parameters that can be used as wildcard replacements in the returned String.
		]]></param>
<return><![CDATA[Returns the value for the specified key.
		]]></return>
</method>
<method name='loadComplete' fullname='qnx.locale:LocaleResourceBundle/private:loadComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='load' fullname='qnx.locale:LocaleResourceBundle/load' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Loads and parses a property file asynchronously at the specified path. An Event.COMPLETE event is fired after the file is loaded and parsed.
				<p>
		The following example shows a simple bundle loader routine that creates and sets up a resource bundle. 
		</p>
		
		<listing>
		public function BundleLoader()
		{
		bundle = new LocaleResourceBundle();
		bundle.addEventListener(Event.COMPLETE, handleLoadComplete);
		}
		public function load():void
		{
		bundle.load("locale/en_US/resource.properties");
		}
		</listing> 
		
		]]></description>
<param><![CDATA[path The path to the property file to be loaded.
		]]></param>
<see><![CDATA[#open()
		]]></see>
</method>
<method name='open' fullname='qnx.locale:LocaleResourceBundle/open' isStatic='false' isFinal='false' isOverride='false'  param_names='file' param_types='flash.filesystem:File' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Loads and parses a property file at synchronously the specified path.
				<p>
		The following example shows a simple bundle loader routine that creates and sets up a resource bundle. 
		</p>
		
		<listing>
		public function BundleLoader()
		{
		bundle = new LocaleResourceBundle();
		bundle.open( File.applicationStorageDirectory.resolvePath( "locale/en_US/resource.properties" ) );
		}
		</listing> 
		
		]]></description>
<param><![CDATA[file The file object to open and parse.
		]]></param>
</method>
<method name='parseData' fullname='qnx.locale:LocaleResourceBundle/private:parseData' isStatic='false' isFinal='false' isOverride='false'  param_names='file' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='parseResult' fullname='qnx.locale:LocaleResourceBundle/private:parseResult' isStatic='false' isFinal='false' isOverride='false'  param_names='result' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='stripStartWhiteSpace' fullname='qnx.locale:LocaleResourceBundle/private:stripStartWhiteSpace' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='String'>
</method>
<method name='stripWhiteSpace' fullname='qnx.locale:LocaleResourceBundle/private:stripWhiteSpace' isStatic='false' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='String'>
</method>
<method name='loaded' fullname='qnx.locale:LocaleResourceBundle/loaded/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Returns <code>true</code> if a property file has been loaded and parsed.
		
		]]></description>
<return><![CDATA[A <code>Boolean</code> indicating whether or not the property file has been loaded and parsed. 
		]]></return>
</method>
<field name='__loaded' fullname='qnx.locale:LocaleResourceBundle/private:__loaded' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='props' fullname='qnx.locale:LocaleResourceBundle/private:props' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
</field>
<classRec name='SoundShortcuts' fullname='caurina.transitions.properties:SoundShortcuts' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\properties\SoundShortcuts.as' namespace='caurina.transitions.properties' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='SoundShortcuts' fullname='caurina.transitions.properties:SoundShortcuts/SoundShortcuts' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
</method>
<method name='_sound_pan_get' fullname='caurina.transitions.properties:SoundShortcuts/_sound_pan_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Returns the current sound pan

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		SoundChannel object

		 ]]></param>
<return><![CDATA[Number		The current pan

		 ]]></return>
</method>
<method name='_sound_pan_set' fullname='caurina.transitions.properties:SoundShortcuts/_sound_pan_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[

		 Sets the sound volume

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		SoundChannel object

		 ]]></param>
<param><![CDATA[p_value				Number		New pan

		 ]]></param>
</method>
<method name='_sound_volume_get' fullname='caurina.transitions.properties:SoundShortcuts/_sound_volume_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Returns the current sound volume

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		SoundChannel object

		 ]]></param>
<return><![CDATA[Number		The current volume

		 ]]></return>
</method>
<method name='_sound_volume_set' fullname='caurina.transitions.properties:SoundShortcuts/_sound_volume_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[

		 Sets the sound volume

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		SoundChannel object

		 ]]></param>
<param><![CDATA[p_value				Number		New volume

		 ]]></param>
</method>
<method name='init' fullname='caurina.transitions.properties:SoundShortcuts/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.

		 ]]></description>
</method>
<classRec name='TextShortcuts' fullname='caurina.transitions.properties:TextShortcuts' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\properties\TextShortcuts.as' namespace='caurina.transitions.properties' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='TextShortcuts' fullname='caurina.transitions.properties:TextShortcuts/TextShortcuts' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
</method>
<method name='_generic_color_splitter' fullname='caurina.transitions.properties:TextShortcuts/_generic_color_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='Number;Array' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[

		 A generic color splitter - from 0xrrggbb to r, g, b with the name of the parameters passed

		 
		 ]]></description>
<param><![CDATA[p_value				Number		The original _color value

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='_textFormat_property_get' fullname='caurina.transitions.properties:TextShortcuts/_textFormat_property_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Generic function for the textformat properties

		 ]]></description>
</method>
<method name='_textFormat_property_set' fullname='caurina.transitions.properties:TextShortcuts/_textFormat_property_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_text_get' fullname='caurina.transitions.properties:TextShortcuts/_text_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Returns the current frame number from the movieclip timeline

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		MovieClip object

		 ]]></param>
<return><![CDATA[Number		The current frame

		 ]]></return>
</method>
<method name='_text_preProcess' fullname='caurina.transitions.properties:TextShortcuts/_text_preProcess' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_originalValueComplete;p_extra' param_types='Object;Array;Object;Object' param_defaults='undefined;undefined;undefined;undefined' result_type='Number'>
</method>
<method name='_text_set' fullname='caurina.transitions.properties:TextShortcuts/_text_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[

		 Sets the timeline frame

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		MovieClip object

		 ]]></param>
<param><![CDATA[p_value				Number		New frame number

		 ]]></param>
</method>
<method name='init' fullname='caurina.transitions.properties:TextShortcuts/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.

		 ]]></description>
</method>
<classRec name='DisplayShortcuts' fullname='caurina.transitions.properties:DisplayShortcuts' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\properties\DisplayShortcuts.as' namespace='caurina.transitions.properties' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='DisplayShortcuts' fullname='caurina.transitions.properties:DisplayShortcuts/DisplayShortcuts' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
</method>
<method name='_autoAlpha_get' fullname='caurina.transitions.properties:DisplayShortcuts/_autoAlpha_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Returns the current alpha

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		MovieClip or Textfield object

		 ]]></param>
<return><![CDATA[Number		The current alpha

		 ]]></return>
</method>
<method name='_autoAlpha_set' fullname='caurina.transitions.properties:DisplayShortcuts/_autoAlpha_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[

		 Sets the current autoAlpha

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		MovieClip or Textfield object

		 ]]></param>
<param><![CDATA[p_value				Number		New alpha

		 ]]></param>
</method>
<method name='_frame_get' fullname='caurina.transitions.properties:DisplayShortcuts/_frame_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 Returns the current frame number from the movieclip timeline

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		MovieClip object

		 ]]></param>
<return><![CDATA[Number		The current frame

		 ]]></return>
</method>
<method name='_frame_set' fullname='caurina.transitions.properties:DisplayShortcuts/_frame_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[

		 Sets the timeline frame

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		MovieClip object

		 ]]></param>
<param><![CDATA[p_value				Number		New frame number

		 ]]></param>
</method>
<method name='_scale_splitter' fullname='caurina.transitions.properties:DisplayShortcuts/_scale_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='Number;Array' param_defaults='undefined;undefined' result_type='Array'>
</method>
<method name='_scrollRect_property_get' fullname='caurina.transitions.properties:DisplayShortcuts/_scrollRect_property_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _scrollRect_
		 Generic function for the properties of the scrollRect object

		 ]]></description>
</method>
<method name='_scrollRect_property_set' fullname='caurina.transitions.properties:DisplayShortcuts/_scrollRect_property_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_scrollRect_splitter' fullname='caurina.transitions.properties:DisplayShortcuts/_scrollRect_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters;p_extra' param_types='flash.geom:Rectangle;Array;Object' param_defaults='undefined;undefined;null' result_type='Array'>
<description><![CDATA[

		 Splits the _scrollRect parameter into specific scrollRect variables

		 
		 ]]></description>
<param><![CDATA[p_value				Rectangle	The original _scrollRect rectangle

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='init' fullname='caurina.transitions.properties:DisplayShortcuts/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.

		 ]]></description>
</method>
<classRec name='FilterShortcuts' fullname='caurina.transitions.properties:FilterShortcuts' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\properties\FilterShortcuts.as' namespace='caurina.transitions.properties' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='FilterShortcuts' fullname='caurina.transitions.properties:FilterShortcuts/FilterShortcuts' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
</method>
<method name='_filter_property_get' fullname='caurina.transitions.properties:FilterShortcuts/_filter_property_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 (filters)

		 Generic function for the properties of filter objects

		 ]]></description>
</method>
<method name='_filter_property_set' fullname='caurina.transitions.properties:FilterShortcuts/_filter_property_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_filter_splitter' fullname='caurina.transitions.properties:FilterShortcuts/_filter_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters;p_extra' param_types='flash.filters:BitmapFilter;Array;Object' param_defaults='undefined;undefined;null' result_type='Array'>
<description><![CDATA[

		 Splits the _filter, _blur, etc parameter into specific filter variables

		 
		 ]]></description>
<param><![CDATA[p_value				BitmapFilter	A BitmapFilter instance

		 ]]></param>
<return><![CDATA[Array			An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='_generic_color_splitter' fullname='caurina.transitions.properties:FilterShortcuts/_generic_color_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='Number;Array' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[

		 A generic color splitter - from 0xrrggbb to r, g, b with the name of the parameters passed

		 
		 ]]></description>
<param><![CDATA[p_value				Number		The original _color value

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='_generic_matrix_splitter' fullname='caurina.transitions.properties:FilterShortcuts/_generic_matrix_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[

		 A generic matrix splitter - from [] to items with the name of the parameters passed

		 
		 ]]></description>
<param><![CDATA[p_value				Array		The original matrix

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='_generic_point_splitter' fullname='caurina.transitions.properties:FilterShortcuts/_generic_point_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='flash.geom:Point;Array' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[

		 A generic mapPoint splitter - from Point to x, y with the name of the parameters passed

		 
		 ]]></description>
<param><![CDATA[p_value				Point		The original point

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='init' fullname='caurina.transitions.properties:FilterShortcuts/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.

		 ]]></description>
</method>
<classRec name='ColorShortcuts' fullname='caurina.transitions.properties:ColorShortcuts' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\properties\ColorShortcuts.as' namespace='caurina.transitions.properties' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='ColorShortcuts' fullname='caurina.transitions.properties:ColorShortcuts/ColorShortcuts' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
</method>
<method name='_brightness_get' fullname='caurina.transitions.properties:ColorShortcuts/_brightness_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _brightness

		 Brightness of an object: -1 -> [0] -> +1

		 ]]></description>
</method>
<method name='_brightness_set' fullname='caurina.transitions.properties:ColorShortcuts/_brightness_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_colorTransform_splitter' fullname='caurina.transitions.properties:ColorShortcuts/_colorTransform_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='Object;Array' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[

		 Splits the _colorTransform parameter into specific color variables

		 
		 ]]></description>
<param><![CDATA[p_value				Number		The original _colorTransform value

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='_color_property_get' fullname='caurina.transitions.properties:ColorShortcuts/_color_property_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _color_
		 Generic function for the redMultiplier/redOffset/etc components of the new colorTransform

		 ]]></description>
</method>
<method name='_color_property_set' fullname='caurina.transitions.properties:ColorShortcuts/_color_property_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_color_splitter' fullname='caurina.transitions.properties:ColorShortcuts/_color_splitter' isStatic='true' isFinal='false' isOverride='false'  param_names='p_value;p_parameters' param_types='*;Array' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[

		 Splits the _color parameter into specific color variables

		 
		 ]]></description>
<param><![CDATA[p_value				Number		The original _color value

		 ]]></param>
<return><![CDATA[Array		An array containing the .name and .value of all new properties

		 ]]></return>
</method>
<method name='_contrast_get' fullname='caurina.transitions.properties:ColorShortcuts/_contrast_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _contrast

		 Contrast of an object: -1 -> [0] -> +1

		 ]]></description>
</method>
<method name='_contrast_set' fullname='caurina.transitions.properties:ColorShortcuts/_contrast_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_hue_get' fullname='caurina.transitions.properties:ColorShortcuts/_hue_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _hue

		 Hue of an object: -180 -> [0] -> 180

		 ]]></description>
</method>
<method name='_hue_set' fullname='caurina.transitions.properties:ColorShortcuts/_hue_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_oldColor_property_get' fullname='caurina.transitions.properties:ColorShortcuts/_oldColor_property_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _color_
		 Generic function for the ra/rb/etc components of the deprecated colorTransform object

		 ]]></description>
</method>
<method name='_oldColor_property_set' fullname='caurina.transitions.properties:ColorShortcuts/_oldColor_property_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='_saturation_get' fullname='caurina.transitions.properties:ColorShortcuts/_saturation_get' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_parameters;p_extra' param_types='Object;Array;Object' param_defaults='undefined;undefined;null' result_type='Number'>
<description><![CDATA[

		 _saturation

		 Saturation of an object: 0 -> [1] -> 2

		 ]]></description>
</method>
<method name='_saturation_set' fullname='caurina.transitions.properties:ColorShortcuts/_saturation_set' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_value;p_parameters;p_extra' param_types='Object;Number;Array;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
</method>
<method name='getHueDistance' fullname='caurina.transitions.properties:ColorShortcuts/getHueDistance' isStatic='true' isFinal='false' isOverride='false'  param_names='mtx1;mtx2' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Number'>
</method>
<method name='getHueMatrix' fullname='caurina.transitions.properties:ColorShortcuts/getHueMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='hue' param_types='Number' param_defaults='undefined' result_type='Array'>
</method>
<method name='getObjectMatrix' fullname='caurina.transitions.properties:ColorShortcuts/private:getObjectMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj' param_types='Object' param_defaults='undefined' result_type='Array'>
</method>
<method name='init' fullname='caurina.transitions.properties:ColorShortcuts/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.

		 ]]></description>
</method>
<method name='setObjectMatrix' fullname='caurina.transitions.properties:ColorShortcuts/private:setObjectMatrix' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj;p_matrix' param_types='Object;Array' param_defaults='undefined;undefined' result_type='void'>
</method>
<field name='LUMINANCE_B' fullname='caurina.transitions.properties:ColorShortcuts/private:LUMINANCE_B' type='Number' isStatic='true' isConst='false' defaultValue='0.072169' >
</field>
<field name='LUMINANCE_G' fullname='caurina.transitions.properties:ColorShortcuts/private:LUMINANCE_G' type='Number' isStatic='true' isConst='false' defaultValue='0.715160' >
</field>
<field name='LUMINANCE_R' fullname='caurina.transitions.properties:ColorShortcuts/private:LUMINANCE_R' type='Number' isStatic='true' isConst='false' defaultValue='0.212671' >
</field>
<classRec name='CurveModifiers' fullname='caurina.transitions.properties:CurveModifiers' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\caurina\transitions\properties\CurveModifiers.as' namespace='caurina.transitions.properties' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 ]]></description>
<author><![CDATA[Zeh Fernando, Nate Chatellier, Arthur Debert

	 ]]></author>
<private><![CDATA[]]></private>
<version><![CDATA[1.0.0

	 ]]></version>
</classRec>
<method name='CurveModifiers' fullname='caurina.transitions.properties:CurveModifiers/CurveModifiers' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 There's no constructor.

		 ]]></description>
</method>
<method name='_bezier_get' fullname='caurina.transitions.properties:CurveModifiers/_bezier_get' isStatic='true' isFinal='false' isOverride='false'  param_names='b;e;t;p' param_types='Number;Number;Number;Array' param_defaults='undefined;undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[

		 Given tweening specifications (beging, end, t), applies the property parameter to it, returning new t

		 
		 ]]></description>
<param><![CDATA[b					Number		Beginning value of the property

		 ]]></param>
<param><![CDATA[e					Number		Ending (desired) value of the property

		 ]]></param>
<param><![CDATA[t					Number		Current t of this tweening (0-1), after applying the easing equation

		 ]]></param>
<param><![CDATA[p					Array		Array of parameters passed to this specific property

		 ]]></param>
<return><![CDATA[Number		New t, with the p parameters applied to it

		 ]]></return>
</method>
<method name='_bezier_modifier' fullname='caurina.transitions.properties:CurveModifiers/_bezier_modifier' isStatic='true' isFinal='false' isOverride='false'  param_names='p_obj' param_types='*' param_defaults='undefined' result_type='Array'>
<description><![CDATA[

		 Given the parameter object passed to this special property, return an array listing the properties that should be modified, and their parameters

		 
		 ]]></description>
<param><![CDATA[p_obj				Object		Parameter passed to this property

		 ]]></param>
<return><![CDATA[Array		Array listing name and parameter of each property

		 ]]></return>
</method>
<method name='init' fullname='caurina.transitions.properties:CurveModifiers/init' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Registers all the special properties to the Tweener class, so the Tweener knows what to do with them.

		 ]]></description>
</method>
<classRec name='FrameworkClasses' fullname='qnx.ui:FrameworkClasses' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\FrameworkClasses.as' namespace='qnx.ui' access='internal' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<classRec name='ThemeGlobals' fullname='qnx.ui.theme:ThemeGlobals' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\theme\ThemeGlobals.as' namespace='qnx.ui.theme' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	  ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='getBlackDialogBackgroundAlpha' fullname='qnx.ui.theme:ThemeGlobals/private:getBlackDialogBackgroundAlpha' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 ]]></description>
<return><![CDATA[Number
		 ]]></return>
<private><![CDATA[]]></private>
</method>
<method name='getBlackSkin' fullname='qnx.ui.theme:ThemeGlobals/private:getBlackSkin' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
		 Returns the dark theme skin class name for the component 
		 ]]></description>
<param><![CDATA[name String that is the name of the registered component skin
		 ]]></param>
<return><![CDATA[String
		 ]]></return>
</method>
<method name='getBlackTextFormat' fullname='qnx.ui.theme:ThemeGlobals/private:getBlackTextFormat' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='flash.text:TextFormat'>
<description><![CDATA[
		 Returns the text format for the dark theme based on component name
		 ]]></description>
<param><![CDATA[name String that is the name of the registered component skin
		 ]]></param>
<return><![CDATA[TextFormat
		 ]]></return>
<see><![CDATA[flash.text.TextFormat
		 ]]></see>
</method>
<method name='getDialogBackgroundAlpha' fullname='qnx.ui.theme:ThemeGlobals/getDialogBackgroundAlpha' isStatic='true' isFinal='false' isOverride='false'  param_names='theme' param_types='String' param_defaults='null' result_type='Number'>
<description><![CDATA[
		 Returns the default dialog background alpha based on the theme
		 ]]></description>
<param><![CDATA[theme String that is the theme to use for the skin look up
		 ]]></param>
<return><![CDATA[Number
		 ]]></return>
</method>
<method name='getSkin' fullname='qnx.ui.theme:ThemeGlobals/getSkin' isStatic='true' isFinal='false' isOverride='false'  param_names='name;theme' param_types='String;String' param_defaults='undefined;null' result_type='String'>
<description><![CDATA[
		 Returns the string class reference for the name of the component skin provided and the theme
		 ]]></description>
<param><![CDATA[name String that is the name of the registered component skin
		 ]]></param>
<param><![CDATA[theme String that is the theme to use for the skin look up
		 ]]></param>
<return><![CDATA[String
		 ]]></return>
</method>
<method name='getTextFormat' fullname='qnx.ui.theme:ThemeGlobals/getTextFormat' isStatic='true' isFinal='false' isOverride='false'  param_names='name;theme' param_types='String;String' param_defaults='undefined;null' result_type='flash.text:TextFormat'>
<description><![CDATA[
		 Returns the text format for the defined component and theme
		 ]]></description>
<param><![CDATA[name String that is the name of the registered component skin
		 ]]></param>
<param><![CDATA[theme String that is the theme to use for the skin look up
		 ]]></param>
<return><![CDATA[TextFormat
		 ]]></return>
<see><![CDATA[flash.text.TextFormat
		 ]]></see>
</method>
<method name='getVolumeSliderDisabledColors' fullname='qnx.ui.theme:ThemeGlobals/getVolumeSliderDisabledColors' isStatic='true' isFinal='false' isOverride='false'  param_names='theme' param_types='String' param_defaults='null' result_type='Array'>
<description><![CDATA[
		 Returns the default volume slider fill disabled colors based on the theme 
		 ]]></description>
<param><![CDATA[theme Theme name
		 ]]></param>
<return><![CDATA[Array Returns an array with two values
		 ]]></return>
</method>
<method name='getVolumeSliderFillColors' fullname='qnx.ui.theme:ThemeGlobals/getVolumeSliderFillColors' isStatic='true' isFinal='false' isOverride='false'  param_names='theme' param_types='String' param_defaults='null' result_type='Array'>
<description><![CDATA[
		 Returns the default volume slider fill colors based on the theme 
		 ]]></description>
<param><![CDATA[theme Theme name
		 ]]></param>
<return><![CDATA[Array Returns an array with two values
		 ]]></return>
</method>
<method name='getWhiteDialogBackgroundAlpha' fullname='qnx.ui.theme:ThemeGlobals/private:getWhiteDialogBackgroundAlpha' isStatic='true' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 ]]></description>
<return><![CDATA[Number
		 ]]></return>
<private><![CDATA[]]></private>
</method>
<method name='getWhiteSkin' fullname='qnx.ui.theme:ThemeGlobals/private:getWhiteSkin' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
		 Returns the light theme skin class name for the component 
		 ]]></description>
<param><![CDATA[name String that is the name of the registered component skin
		 ]]></param>
<return><![CDATA[String
		 ]]></return>
</method>
<method name='getWhiteTextFormat' fullname='qnx.ui.theme:ThemeGlobals/private:getWhiteTextFormat' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='flash.text:TextFormat'>
<description><![CDATA[
		 Returns the text format for the light theme based on component name
		 ]]></description>
<param><![CDATA[name String that is the name of the registered component skin
		 ]]></param>
<return><![CDATA[TextFormat
		 ]]></return>
<see><![CDATA[flash.text.TextFormat
		 ]]></see>
</method>
<field name='ACTIVITY_INDICATOR' fullname='qnx.ui.theme:ThemeGlobals/ACTIVITY_INDICATOR' type='String' isStatic='true' isConst='true' defaultValue='ActivityIndicator' >
<description><![CDATA[
		 A constant representing the activity indicator
		 ]]></description>
</field>
<field name='BLACK' fullname='qnx.ui.theme:ThemeGlobals/BLACK' type='String' isStatic='true' isConst='true' defaultValue='dark' >
<description><![CDATA[
		 A constant indicating the dark color theme for the component set
		 ]]></description>
</field>
<field name='BUTTON_FORMAT_DISABLED' fullname='qnx.ui.theme:ThemeGlobals/BUTTON_FORMAT_DISABLED' type='String' isStatic='true' isConst='true' defaultValue='labelButtonDisabled' >
<description><![CDATA[
		 A constant text format for the disabled state of the button
		 ]]></description>
</field>
<field name='BUTTON_FORMAT_DOWN' fullname='qnx.ui.theme:ThemeGlobals/BUTTON_FORMAT_DOWN' type='String' isStatic='true' isConst='true' defaultValue='labelButtonDown' >
<description><![CDATA[
		 A constant text format for the down state of the button
		 ]]></description>
</field>
<field name='BUTTON_FORMAT_OUT' fullname='qnx.ui.theme:ThemeGlobals/BUTTON_FORMAT_OUT' type='String' isStatic='true' isConst='true' defaultValue='labelButtonOut' >
<description><![CDATA[
		 A constant text format for the out state of the button
		 ]]></description>
</field>
<field name='BUTTON_FORMAT_SELECTED_DISABLED' fullname='qnx.ui.theme:ThemeGlobals/BUTTON_FORMAT_SELECTED_DISABLED' type='String' isStatic='true' isConst='true' defaultValue='labelButtonSelectedDisabled' >
<description><![CDATA[
		 A constant text format for the selected state of the button
		 ]]></description>
</field>
<field name='BUTTON_FORMAT_SELECTED' fullname='qnx.ui.theme:ThemeGlobals/BUTTON_FORMAT_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='labelButtonSelected' >
<description><![CDATA[
		 A constant text format for the selected state of the button
		 ]]></description>
</field>
<field name='BUTTON_SKIN' fullname='qnx.ui.theme:ThemeGlobals/BUTTON_SKIN' type='String' isStatic='true' isConst='true' defaultValue='ButtonSkin' >
<description><![CDATA[
		 A constant representing the button skin 
		 ]]></description>
</field>
<field name='CELL_FORMAT_DISABLED' fullname='qnx.ui.theme:ThemeGlobals/CELL_FORMAT_DISABLED' type='String' isStatic='true' isConst='true' defaultValue='CellRendererDisabled' >
<description><![CDATA[
		 A constant text format for the disabled state of the cell renderer label
		 ]]></description>
</field>
<field name='CELL_FORMAT_DOWN' fullname='qnx.ui.theme:ThemeGlobals/CELL_FORMAT_DOWN' type='String' isStatic='true' isConst='true' defaultValue='CellRendererDown' >
<description><![CDATA[
		 A constant text format for the down state of the cell renderer label
		 ]]></description>
</field>
<field name='CELL_FORMAT_OUT' fullname='qnx.ui.theme:ThemeGlobals/CELL_FORMAT_OUT' type='String' isStatic='true' isConst='true' defaultValue='CellRendererOut' >
<description><![CDATA[
		 A constant text format for the out state of the cell renderer label
		 ]]></description>
</field>
<field name='CELL_FORMAT_SELECTED' fullname='qnx.ui.theme:ThemeGlobals/CELL_FORMAT_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='CellRendererSelected' >
<description><![CDATA[
		 A constant text format for the selected state of the cell renderer label
		 ]]></description>
</field>
<field name='CELL_RENDERER_SKIN' fullname='qnx.ui.theme:ThemeGlobals/CELL_RENDERER_SKIN' type='String' isStatic='true' isConst='true' defaultValue='CellRendererSkin' >
<description><![CDATA[
		 A constant representing the cell renderer skin
		 ]]></description>
</field>
<field name='CHECKBOX_FORMAT_DISABLED' fullname='qnx.ui.theme:ThemeGlobals/CHECKBOX_FORMAT_DISABLED' type='String' isStatic='true' isConst='true' defaultValue='CheckBoxFormatDisabled' >
<description><![CDATA[
		 A constant format for the checkbox disabled		 
		 ]]></description>
</field>
<field name='CHECKBOX_FORMAT_OUT' fullname='qnx.ui.theme:ThemeGlobals/CHECKBOX_FORMAT_OUT' type='String' isStatic='true' isConst='true' defaultValue='CheckBoxFormatUp' >
<description><![CDATA[
		  A constant format for the checkbox up,down
		 ]]></description>
</field>
<field name='CHECKBOX_SKIN' fullname='qnx.ui.theme:ThemeGlobals/CHECKBOX_SKIN' type='String' isStatic='true' isConst='true' defaultValue='CheckBoxSkin' >
<description><![CDATA[
		 A constant representing the checkbox skin 
		 ]]></description>
</field>
<field name='DROPDOWN_BACKGROUND' fullname='qnx.ui.theme:ThemeGlobals/DROPDOWN_BACKGROUND' type='String' isStatic='true' isConst='true' defaultValue='DropDownBackgroundSkin' >
<description><![CDATA[
		 A constant representing the drop down background skin
		 ]]></description>
</field>
<field name='DROPDOWN_BUTTON_SKIN' fullname='qnx.ui.theme:ThemeGlobals/DROPDOWN_BUTTON_SKIN' type='String' isStatic='true' isConst='true' defaultValue='DropDownButtonSkin' >
<description><![CDATA[
		 A constant representing the drop down button skin
		 ]]></description>
</field>
<field name='DROPDOWN_CELL_RENDERER_SKIN' fullname='qnx.ui.theme:ThemeGlobals/DROPDOWN_CELL_RENDERER_SKIN' type='String' isStatic='true' isConst='true' defaultValue='DropDownCellRendererSkin' >
<description><![CDATA[
		 A constant representing the drop down cell renderer skin
		 ]]></description>
</field>
<field name='DROPDOWN_FORMAT_DOWN' fullname='qnx.ui.theme:ThemeGlobals/DROPDOWN_FORMAT_DOWN' type='String' isStatic='true' isConst='true' defaultValue='DropDownFormatDown' >
<description><![CDATA[
		 A constant text format for the down state of the drop down
		 ]]></description>
</field>
<field name='DROPDOWN_FORMAT_SELECTED' fullname='qnx.ui.theme:ThemeGlobals/DROPDOWN_FORMAT_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='DropDownFormatSelected' >
<description><![CDATA[
		 A constant text format for the selected state of the drop down
		 ]]></description>
</field>
<field name='LABEL_FORMAT' fullname='qnx.ui.theme:ThemeGlobals/LABEL_FORMAT' type='String' isStatic='true' isConst='true' defaultValue='labelFormat' >
<description><![CDATA[
		 A constant representing the label format
		 ]]></description>
</field>
<field name='LIST' fullname='qnx.ui.theme:ThemeGlobals/LIST' type='String' isStatic='true' isConst='true' defaultValue='List' >
<description><![CDATA[
		 A constant representing the list
		 ]]></description>
</field>
<field name='PICKER_BACKGROUND' fullname='qnx.ui.theme:ThemeGlobals/PICKER_BACKGROUND' type='String' isStatic='true' isConst='true' defaultValue='pickerBackground' >
<description><![CDATA[
		 A constant representing the picker background skin
		 ]]></description>
</field>
<field name='PICKER_BUTTON' fullname='qnx.ui.theme:ThemeGlobals/PICKER_BUTTON' type='String' isStatic='true' isConst='true' defaultValue='pickerButton' >
<description><![CDATA[
		 A constant representing the picker button skin
		 ]]></description>
</field>
<field name='PICKER_LINE' fullname='qnx.ui.theme:ThemeGlobals/PICKER_LINE' type='String' isStatic='true' isConst='true' defaultValue='pickerLine' >
<description><![CDATA[
		 A constant representing the picker line skin
		 ]]></description>
</field>
<field name='PROGRESS_BAR' fullname='qnx.ui.theme:ThemeGlobals/PROGRESS_BAR' type='String' isStatic='true' isConst='true' defaultValue='ProgressBar' >
<description><![CDATA[
		 A constant representing the progress bar
		 ]]></description>
</field>
<field name='SECTION_HEADER_SKIN' fullname='qnx.ui.theme:ThemeGlobals/SECTION_HEADER_SKIN' type='String' isStatic='true' isConst='true' defaultValue='SectionHeaderSkin' >
<description><![CDATA[
		 A constant representing the section header skin
		 ]]></description>
</field>
<field name='SECTION_HEADER' fullname='qnx.ui.theme:ThemeGlobals/SECTION_HEADER' type='String' isStatic='true' isConst='true' defaultValue='SectionHeader' >
<description><![CDATA[
		 A constant representing the section header
		 ]]></description>
</field>
<field name='SEGMENTED_CONTROL_BACKGROUND' fullname='qnx.ui.theme:ThemeGlobals/SEGMENTED_CONTROL_BACKGROUND' type='String' isStatic='true' isConst='true' defaultValue='SegmentedControlBackground' >
<description><![CDATA[
		 A constant representing the segmented control background 
		 ]]></description>
</field>
<field name='SEGMENTED_CONTROL_SKIN' fullname='qnx.ui.theme:ThemeGlobals/SEGMENTED_CONTROL_SKIN' type='String' isStatic='true' isConst='true' defaultValue='SegmentedControlSkin' >
<description><![CDATA[
		 A constant representing the segmented control skin
		 ]]></description>
</field>
<field name='SLIDER_FILL' fullname='qnx.ui.theme:ThemeGlobals/SLIDER_FILL' type='String' isStatic='true' isConst='true' defaultValue='sliderFill' >
<description><![CDATA[
		 A constant representing the slider fill skin
		 ]]></description>
</field>
<field name='SLIDER_THUMB' fullname='qnx.ui.theme:ThemeGlobals/SLIDER_THUMB' type='String' isStatic='true' isConst='true' defaultValue='sliderThumb' >
<description><![CDATA[
		 A constant representing the slider thumb skin
		 ]]></description>
</field>
<field name='SLIDER_TRACK' fullname='qnx.ui.theme:ThemeGlobals/SLIDER_TRACK' type='String' isStatic='true' isConst='true' defaultValue='sliderTrack' >
<description><![CDATA[
		 A constant representing the slider track skin
		 ]]></description>
</field>
<field name='TEXT_DIALOG_MESSAGE_FORMAT' fullname='qnx.ui.theme:ThemeGlobals/TEXT_DIALOG_MESSAGE_FORMAT' type='String' isStatic='true' isConst='true' defaultValue='TextDialogMessageFormat' >
<description><![CDATA[
		 A constant text format for the text of the dialog message
		 ]]></description>
</field>
<field name='TEXT_DIALOG_TITLE_FORMAT' fullname='qnx.ui.theme:ThemeGlobals/TEXT_DIALOG_TITLE_FORMAT' type='String' isStatic='true' isConst='true' defaultValue='TextDialogTitleFormat' >
<description><![CDATA[
		 A constant text format for text of the dialog title
		 ]]></description>
</field>
<field name='TEXT_INPUT_FORMAT' fullname='qnx.ui.theme:ThemeGlobals/TEXT_INPUT_FORMAT' type='String' isStatic='true' isConst='true' defaultValue='TextInputFormat' >
<description><![CDATA[
		 A constant text format for the text input
		 ]]></description>
</field>
<field name='TEXT_INPUT' fullname='qnx.ui.theme:ThemeGlobals/TEXT_INPUT' type='String' isStatic='true' isConst='true' defaultValue='TextInput' >
<description><![CDATA[
		 A constant representing the text input
		 ]]></description>
</field>
<field name='TILE_LIST' fullname='qnx.ui.theme:ThemeGlobals/TILE_LIST' type='String' isStatic='true' isConst='true' defaultValue='TileList' >
<description><![CDATA[
		 A constant representing the tile list
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_FILL' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_FILL' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchFill' >
<description><![CDATA[
		 A constant representing the toggle switch fill skin
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_FORMAT_DISABLED' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_FORMAT_DISABLED' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchFormatDisabled' >
<description><![CDATA[
		 A constant text format for the disabled state of the toggle switch 
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_FORMAT_SELECTED_DISABLED' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_FORMAT_SELECTED_DISABLED' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchFormatSelectedDisabled' >
<description><![CDATA[
		 A constant text format for the disabled state of the toggle switch 
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_FORMAT_SELECTED' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_FORMAT_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchFormatSelected' >
<description><![CDATA[
		 A constant text format for the selected state of the toggle switch 
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_FORMAT_UP' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_FORMAT_UP' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchFormatUp' >
<description><![CDATA[
		 A constant text format for the out state of the toggle switch 
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_SKIN' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_SKIN' type='String' isStatic='true' isConst='true' defaultValue='ToggleSwitchSkin' >
<description><![CDATA[
		 A constant representing the toggle switch skin 
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_THUMB' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_THUMB' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchThumb' >
<description><![CDATA[
		 A constant representing the toggle switch thumb skin
		 ]]></description>
</field>
<field name='TOGGLE_SWITCH_TRACK' fullname='qnx.ui.theme:ThemeGlobals/TOGGLE_SWITCH_TRACK' type='String' isStatic='true' isConst='true' defaultValue='toggleSwitchTrack' >
<description><![CDATA[
		 A constant representing the toggle switch track skin
		 ]]></description>
</field>
<field name='VOLUME_THUMB' fullname='qnx.ui.theme:ThemeGlobals/VOLUME_THUMB' type='String' isStatic='true' isConst='true' defaultValue='volumeThumb' >
<description><![CDATA[
		 A constant representing the volume thumb
		 ]]></description>
</field>
<field name='VOLUME_TRACK' fullname='qnx.ui.theme:ThemeGlobals/VOLUME_TRACK' type='String' isStatic='true' isConst='true' defaultValue='volumeTrack' >
<description><![CDATA[
		 A constant representing the volume track skin
		 ]]></description>
</field>
<field name='WHITE' fullname='qnx.ui.theme:ThemeGlobals/WHITE' type='String' isStatic='true' isConst='true' defaultValue='white' >
<description><![CDATA[
		 A constant indicating the light color theme for the component set
		 ]]></description>
</field>
<field name='currentTheme' fullname='qnx.ui.theme:ThemeGlobals/currentTheme' type='String' isStatic='true' isConst='false' defaultValue='white' >
<description><![CDATA[
		 Determines what the current theme is
		 ]]></description>
<default><![CDATA["White"
		 ]]></default>
</field>
<classRec name='Slider' fullname='qnx.ui.slider:Slider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\slider\Slider.as' namespace='qnx.ui.slider' access='public' baseclass='qnx.ui.core:UIComponent' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The slider component allows a user to select a value (by dragging the thumb component along a track) between the specified <code>minimum</code> and 
	 <code>maximum</code> values. 
	 
	 <p>
	 The following example instantiates and initializes a new slider component called <code>slider</code>:
	 </p>
	 <listing>
	 slider = new Slider();
	 slider.minimum = 1;
	 slider.maximum = 10;
	 slider.width = 500;
	 slider.x = 40;
	 slider.y = 40;
	 slider.addEventListener( SliderEvent.MOVE, sliderChange );
	 addChild( slider );
	 </listing>
	 <p>
	 The horizontal slider has a minimum value of 1, and a maximum value of 10. The following function, which is called by the event
	 listener updates the value (level) of the slider every time the user moves the slider thumb.  
	 </p>
	 <listing>
	 private function sliderChange( event:SliderEvent ) : void
	 {
	     var newlevel:int = Math.round( slider.value );
	     trace( "slider value =", newlevel );
	 }
	 </listing>
	 ]]></description>
<see><![CDATA[qnx.ui.slider.VolumeSlider
	 ]]></see>
<metadata>
	<Event owner='qnx.ui.slider:Slider' name='slider_drag_started' type='qnx.ui.events.SliderEvent' >
<description><![CDATA[
	 
	 
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.SliderEvent.START
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.slider:Slider' name='slider_drag_ended' type='qnx.ui.events.SliderEvent' >
<description><![CDATA[
	 	 
	 ]]></description>
<eventType><![CDATA[qnx.ui.events.SliderEvent.END
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.slider:Slider' name='slider_move' type='qnx.ui.events.SliderEvent' >
<description><![CDATA[
	
	]]></description>
<eventType><![CDATA[qnx.ui.events.SliderEvent.MOVE
	]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Slider' fullname='qnx.ui.slider:Slider/Slider' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new Slider instance.
		 
		 ]]></description>
</method>
<method name='calculatePercent' fullname='qnx.ui.slider:Slider/protected:calculatePercent' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='constrain' fullname='qnx.ui.slider:Slider/protected:constrain' isStatic='false' isFinal='false' isOverride='false'  param_names='val;min;max' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='doThumbUp' fullname='qnx.ui.slider:Slider/private:doThumbUp' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='drawFill' fullname='qnx.ui.slider:Slider/protected:drawFill' isStatic='false' isFinal='false' isOverride='false'  param_names='percent' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.slider:Slider/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleThumbDown' fullname='qnx.ui.slider:Slider/protected:handleThumbDown' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleThumbUp' fullname='qnx.ui.slider:Slider/protected:handleThumbUp' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.slider:Slider/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeChildren' fullname='qnx.ui.slider:Slider/protected:initializeChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='instantiateHitArea' fullname='qnx.ui.slider:Slider/protected:instantiateHitArea' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='monitorDrag' fullname='qnx.ui.slider:Slider/protected:monitorDrag' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.slider:Slider/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onStageUp' fullname='qnx.ui.slider:Slider/private:onStageUp' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onThumbDown' fullname='qnx.ui.slider:Slider/private:onThumbDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onThumbUp' fullname='qnx.ui.slider:Slider/private:onThumbUp' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionHitArea' fullname='qnx.ui.slider:Slider/protected:positionHitArea' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeListeners' fullname='qnx.ui.slider:Slider/private:removeListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='resetChildren' fullname='qnx.ui.slider:Slider/protected:resetChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setEnabled' fullname='qnx.ui.slider:Slider/protected:setEnabled' isStatic='false' isFinal='false' isOverride='true'  param_names='enabled_' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setFillSkin' fullname='qnx.ui.slider:Slider/setFillSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the fill skin for the slider. 
		 
		 ]]></description>
<param><![CDATA[skin The fill skin to set.
		 ]]></param>
</method>
<method name='setThumbSkin' fullname='qnx.ui.slider:Slider/setThumbSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the skin for the slider thumb button.
		 
		 ]]></description>
<param><![CDATA[skin The button skin to set.
		 ]]></param>
</method>
<method name='setTrackSkin' fullname='qnx.ui.slider:Slider/setTrackSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the skin for the track of the slider.
		 
		 ]]></description>
<param><![CDATA[skin The track skin to set.
		 ]]></param>
</method>
<method name='startDragging' fullname='qnx.ui.slider:Slider/private:startDragging' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='trackClick' fullname='qnx.ui.slider:Slider/protected:trackClick' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='trackThumb' fullname='qnx.ui.slider:Slider/private:trackThumb' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='active' fullname='qnx.ui.slider:Slider/active/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		Gets or sets the <code>active</code> property of the slider.
		<p>
		The <code>active</code> property is used to determine whether or not the user can interact with the 
		slider. If set to false, the slider can only be used for display purposes.
		</p>
		
		]]></description>
<default><![CDATA[true
		]]></default>
</method>
<method name='maximum' fullname='qnx.ui.slider:Slider/maximum/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the maximum value of the slider. 
		
		<p>
		The maximum value represents the very right extent of the track.
		</p>
		]]></description>
<default><![CDATA[100
		]]></default>
</method>
<method name='minimum' fullname='qnx.ui.slider:Slider/minimum/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the minimum value of the slider. 
		<p>
		The minimum value represents the very left extent of the track.
		</p>
		
		]]></description>
<default><![CDATA[0
		]]></default>
</method>
<method name='value' fullname='qnx.ui.slider:Slider/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		Gets or sets the value of the slider. 
		
		<p>
		Setting this property will cause the thumb to update its position. This value is 
		updated as the user drags the slider thumb.
		</p>
		<p>
		The value is constrained to be within the minimum and maximum values.
		</p>
		]]></description>
<default><![CDATA[0
		]]></default>
</method>
<method name='active' fullname='qnx.ui.slider:Slider/active/set' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		Gets or sets the <code>active</code> property of the slider.
		<p>
		The <code>active</code> property is used to determine whether or not the user can interact with the 
		slider. If set to false, the slider can only be used for display purposes.
		</p>
		
		]]></description>
<default><![CDATA[true
		]]></default>
</method>
<method name='maximum' fullname='qnx.ui.slider:Slider/maximum/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='minimum' fullname='qnx.ui.slider:Slider/minimum/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='value' fullname='qnx.ui.slider:Slider/value/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='MIN_THUMB_HEIGHT' fullname='qnx.ui.slider:Slider/private:MIN_THUMB_HEIGHT' type='int' isStatic='true' isConst='true' defaultValue='50' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='MIN_THUMB_WIDTH' fullname='qnx.ui.slider:Slider/private:MIN_THUMB_WIDTH' type='int' isStatic='true' isConst='true' defaultValue='50' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__active' fullname='qnx.ui.slider:Slider/protected:__active' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultFillSkin' fullname='qnx.ui.slider:Slider/protected:__defaultFillSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultThumbSkin' fullname='qnx.ui.slider:Slider/protected:__defaultThumbSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultTrackSkin' fullname='qnx.ui.slider:Slider/protected:__defaultTrackSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__event' fullname='qnx.ui.slider:Slider/private:__event' type='qnx.ui.events:SliderEvent' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__hitSprite' fullname='qnx.ui.slider:Slider/protected:__hitSprite' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__maxVal' fullname='qnx.ui.slider:Slider/protected:__maxVal' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__maximum' fullname='qnx.ui.slider:Slider/protected:__maximum' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__minVal' fullname='qnx.ui.slider:Slider/protected:__minVal' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__minimum' fullname='qnx.ui.slider:Slider/protected:__minimum' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__thumbOffset' fullname='qnx.ui.slider:Slider/protected:__thumbOffset' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__value' fullname='qnx.ui.slider:Slider/protected:__value' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='fill' fullname='qnx.ui.slider:Slider/fill' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='thumb' fullname='qnx.ui.slider:Slider/thumb' type='qnx.ui.buttons:Button' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='track' fullname='qnx.ui.slider:Slider/track' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='VolumeSlider' fullname='qnx.ui.slider:VolumeSlider' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\slider\VolumeSlider.as' namespace='qnx.ui.slider' access='public' baseclass='qnx.ui.slider:Slider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The volume slider component provides the functionality for implementing a volume control.
	 
	 <p>The volume slider differs from the base Slider class in that it has a specific look and feel and
	 is used for media-based components. 
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.slider.Slider
	 ]]></see>
</classRec>
<method name='VolumeSlider' fullname='qnx.ui.slider:VolumeSlider/VolumeSlider' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a VolumeSlider instance.
		 ]]></description>
</method>
<method name='drawFill' fullname='qnx.ui.slider:VolumeSlider/protected:drawFill' isStatic='false' isFinal='false' isOverride='true'  param_names='percent' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='drawGradientFill' fullname='qnx.ui.slider:VolumeSlider/protected:drawGradientFill' isStatic='false' isFinal='false' isOverride='false'  param_names='colors;wid' param_types='Array;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.slider:VolumeSlider/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.slider:VolumeSlider/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setThumbSkin' fullname='qnx.ui.slider:VolumeSlider/setThumbSkin' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the thumb skin. 
		 
		 <p>
		 This function expects a skin that extends IProgress.
		 </p>
		 
		 ]]></description>
<param><![CDATA[value The skin object to use of the thumb.
		 ]]></param>
</method>
<method name='trackClick' fullname='qnx.ui.slider:VolumeSlider/protected:trackClick' isStatic='false' isFinal='false' isOverride='true'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='disabledColors' fullname='qnx.ui.slider:VolumeSlider/disabledColors/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Gets or sets the colors that are used to draw the disabled fill 
		 gradient; the gradient that appears when the control is disabled.
		 
		 <p>
		 This function expects an array of two values, representing the colors used to 
		 create the gradient.
		 </p> 
		 ]]></description>
</method>
<method name='fillColors' fullname='qnx.ui.slider:VolumeSlider/fillColors/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		  Gets or sets the fill colors that are used to draw the inside gradient.
		 <p>
		  This function expects an array of two values, representing the colors used to 
		 create the gradient.
		 </p>
		 ]]></description>
</method>
<method name='disabledColors' fullname='qnx.ui.slider:VolumeSlider/disabledColors/set' isStatic='false' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enabled' fullname='qnx.ui.slider:VolumeSlider/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fillColors' fullname='qnx.ui.slider:VolumeSlider/fillColors/set' isStatic='false' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__disabledColors' fullname='qnx.ui.slider:VolumeSlider/protected:__disabledColors' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__fillColors' fullname='qnx.ui.slider:VolumeSlider/protected:__fillColors' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__glowFilter' fullname='qnx.ui.slider:VolumeSlider/private:__glowFilter' type='flash.filters:GlowFilter' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='containerMask' fullname='qnx.ui.slider:VolumeSlider/protected:containerMask' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Picker' fullname='qnx.ui.picker:Picker' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\picker\Picker.as' namespace='qnx.ui.picker' access='public' baseclass='qnx.ui.core:UIComponent' interfaces='qnx.ui.data:IDataViewer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The <code>Picker</code> class is used to display information that requires a more complex scrolling list, such as dates and numbers.
	 
	 <p>The user can scroll through
	 multiple lists of data at once, while selecting a value from each column. For example, you might implement a picker to enable a user to select his or her date of 
	 birth, where each columen representts day, month and year. The picker uses lists of scrolling data. By default, the picker comes 
	 in two sizes: large, which uses five scrolling rows of data, and small, which uses three scrolling rows of data.
	 </p>
	 
	 <p>
	 In the following example, a <code>Picker</code> is instantiated and initialized. An array of <code>DataProvider</code>s is created
	 and passed to the picker (as <code>Pickerlist</code>s) using the <code>dataProvider</code> method.
	 </p>
	 <listing>
	 picker = new Picker();
	 var arr:Array = new Array();
	 for (var i:int=0; i&lt;15; i++) {
	   arr.push({label:"Label "+i.toString()});
	  }
	 var rangeDP:DataProvider = new DataProvider( arr );
	 var dpp:DataProvider  = new DataProvider();
	 dpp.addItem(rangeDP);
	 dpp.addItem(rangeDP);
	 dpp.addItem(rangeDP); 
	 	
	 picker.dataProvider = dpp;
	 picker.addEventListener(Event.SELECT, handlePickerSelected);
	 picker.x = 610;
	 picker.y = 125;
	 
	 this.addChild(picker);
	 // Set the selected index of the list at index 0
	 picker.getListAt(0).selectedIndex = 5;
	 
	 </listing>
	 
	 ]]></description>
<see><![CDATA[PickerList
	 ]]></see>
<metadata>
	<Event owner='qnx.ui.picker:Picker' name='close' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the picker closes.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CLOSE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.picker:Picker' name='open' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when picker opens
	 ]]></description>
<eventType><![CDATA[flash.events.Event.OPEN
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.picker:Picker' name='change' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the <code>DataProvider</code> changes for the picker component.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='qnx.ui.picker:Picker' name='select' type='flash.events.Event' >
<description><![CDATA[
	 Dispatched when the user selects an item from a column in the picker.
	 ]]></description>
<eventType><![CDATA[flash.events.Event.SELECT
	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Picker' fullname='qnx.ui.picker:Picker/Picker' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a <code>Picker</code> instance.
		 ]]></description>
</method>
<method name='addItemAt' fullname='qnx.ui.picker:Picker/addItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to the data provider at a given offset.
		 
		 <p>
		 When you add an item to the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The item to add to the data provider.
		 ]]></param>
<param><![CDATA[index The index at which to add the item.
		 ]]></param>
</method>
<method name='addItem' fullname='qnx.ui.picker:Picker/addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds an item to the data provider.
		 
		 <p>
		 When you add an item to the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The item to add to the data provider.
		 ]]></param>
</method>
<method name='addItemsAt' fullname='qnx.ui.picker:Picker/addItemsAt' isStatic='false' isFinal='false' isOverride='false'  param_names='items;index' param_types='Array;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds an array item at the specified index.
		 
		 ]]></description>
<param><![CDATA[items The array of items to add.
		 ]]></param>
<param><![CDATA[index The index, or offset, at which to add the items.
		 
		 ]]></param>
<see><![CDATA[#addItem()
		 ]]></see>
<see><![CDATA[#addItemAt()
		 ]]></see>
<throws><![CDATA[RangeError Thrown if the specified index is less than 0, or greater than or equal to the length of the data provider.
		 
		 ]]></throws>
</method>
<method name='addLists' fullname='qnx.ui.picker:Picker/private:addLists' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clearItems' fullname='qnx.ui.picker:Picker/private:clearItems' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeAddItem' fullname='qnx.ui.picker:Picker/protected:dataChangeAddItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeRemoveItem' fullname='qnx.ui.picker:Picker/protected:dataChangeRemoveItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeReplaceItem' fullname='qnx.ui.picker:Picker/protected:dataChangeReplaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateAll' fullname='qnx.ui.picker:Picker/protected:dataChangeUpdateAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateItem' fullname='qnx.ui.picker:Picker/protected:dataChangeUpdateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='startindex;items' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataChangeUpdateRemoveAll' fullname='qnx.ui.picker:Picker/protected:dataChangeUpdateRemoveAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='qnx.ui.picker:Picker/destroy' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='draw' fullname='qnx.ui.picker:Picker/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableAllLists' fullname='qnx.ui.picker:Picker/private:enableAllLists' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enableButton' fullname='qnx.ui.picker:Picker/private:enableButton' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getButtonSkin' fullname='qnx.ui.picker:Picker/getButtonSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Returns the button skin for the picker. 
		 ]]></description>
<return><![CDATA[skin The button skin.
		 ]]></return>
</method>
<method name='getColumnData' fullname='qnx.ui.picker:Picker/private:getColumnData' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getDividerSkin' fullname='qnx.ui.picker:Picker/getDividerSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Returns the divider skin. 
		 
		 ]]></description>
<return><![CDATA[The divider skin.
		 ]]></return>
</method>
<method name='getItemAt' fullname='qnx.ui.picker:Picker/getItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
<description><![CDATA[ 
		 Get the data object from the data provider at a certain index.
		 
		 <p>
		 When you add or remove an item from the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[index An integer representing the index for which to get the data.
		 ]]></param>
<return><![CDATA[An Object representing the data.
		 ]]></return>
</method>
<method name='getListAt' fullname='qnx.ui.picker:Picker/getListAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='qnx.ui.listClasses:List'>
<description><![CDATA[ 
		 Gets the <code>PickerList</code> at a given index.
		 
		 <p>
		 The following routine shows the <code>getListAt</code> method being used to 
		 update the selected picker item with timer information:
		 </p>
		 <listing>
		 private function updatePicker():void
		 {
		    //hours col
		    picker.getListAt(0).selectedIndex = countDownDate.hoursUTC;
		 
		    //minutes col
		    picker.getListAt(1).selectedIndex = countDownDate.minutesUTC;
		   		
		    //secs col
		    picker.getListAt(2).selectedIndex = countDownDate.secondsUTC;
		 }
		 </listing>
		 
		 ]]></description>
<param><![CDATA[index An integer representing the index of the <code>PickerList</code>.
		 ]]></param>
<return><![CDATA[The <code>PickerList</code> at the given index.
		 ]]></return>
<see><![CDATA[PickerList
		 
		 ]]></see>
</method>
<method name='getListBackgroundSkin' fullname='qnx.ui.picker:Picker/getListBackgroundSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Returns the skin that is used as the background for the list. 
		 
		 ]]></description>
<return><![CDATA[skin The skin that is used as the backgrdound of the picker.
		 ]]></return>
</method>
<method name='getLists' fullname='qnx.ui.picker:Picker/getLists' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[ 
		 Returns an array of the lists (columns) used in the picker.
		 
		 ]]></description>
<return><![CDATA[An Array of <code>PickerList</code> objects.
		 ]]></return>
</method>
<method name='handleButtonClick' fullname='qnx.ui.picker:Picker/private:handleButtonClick' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleColumnPress' fullname='qnx.ui.picker:Picker/private:handleColumnPress' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleInvalidate' fullname='qnx.ui.picker:Picker/private:handleInvalidate' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleListChange' fullname='qnx.ui.picker:Picker/private:handleListChange' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='qnx.ui.events:ListEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleListSelect' fullname='qnx.ui.picker:Picker/private:handleListSelect' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleMouseClick' fullname='qnx.ui.picker:Picker/private:handleMouseClick' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleMouseDown' fullname='qnx.ui.picker:Picker/private:handleMouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='e' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hidePicker' fullname='qnx.ui.picker:Picker/private:hidePicker' isStatic='false' isFinal='false' isOverride='false'  param_names='sendEvent' param_types='Boolean' param_defaults='true' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initDefaultDataProvider' fullname='qnx.ui.picker:Picker/protected:initDefaultDataProvider' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initDefaultSkins' fullname='qnx.ui.picker:Picker/protected:initDefaultSkins' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initUIElements' fullname='qnx.ui.picker:Picker/protected:initUIElements' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.picker:Picker/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeList' fullname='qnx.ui.picker:Picker/protected:initializeList' isStatic='false' isFinal='false' isOverride='false'  param_names='list;dp;i' param_types='qnx.ui.picker:PickerList;qnx.ui.data:DataProvider;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[list The column to be initialized.
		 ]]></param>
<param><![CDATA[dp The data provider that will provide the list with data.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='invalidate' fullname='qnx.ui.picker:Picker/private:invalidate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='layoutChildren' fullname='qnx.ui.picker:Picker/private:layoutChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.picker:Picker/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onDataChange' fullname='qnx.ui.picker:Picker/private:onDataChange' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='qnx.ui.events:DataProviderEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onListAdded' fullname='qnx.ui.picker:Picker/protected:onListAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='list' param_types='qnx.ui.picker:PickerList' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[list The List that was added.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='onListRemoved' fullname='qnx.ui.picker:Picker/protected:onListRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='list' param_types='qnx.ui.picker:PickerList' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[list The list that was removed.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='positionBackgrounds' fullname='qnx.ui.picker:Picker/protected:positionBackgrounds' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='positionChild' fullname='qnx.ui.picker:Picker/protected:positionChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child;previousItem' param_types='flash.display:MovieClip;flash.display:MovieClip' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[child The child to position in the holder.
		 ]]></param>
<param><![CDATA[previousItem The previous item, used to position the child.
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='positionDividers' fullname='qnx.ui.picker:Picker/protected:positionDividers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeAll' fullname='qnx.ui.picker:Picker/removeAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all items from the data provider.
		 
		 <p>
		 When you remove an item from the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<returns><![CDATA[void
		 ]]></returns>
</method>
<method name='removeItemAt' fullname='qnx.ui.picker:Picker/removeItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes an item from the data provider given the index of the item to remove.
		 <p>
		 When you remove an item from the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[index The index of the item to remove.
		 ]]></param>
</method>
<method name='removeItem' fullname='qnx.ui.picker:Picker/removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a given item from the data provider. 
		 <p>
		 When you remove an item from the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The item to remove from the data provider.
		 ]]></param>
</method>
<method name='replaceItemAt' fullname='qnx.ui.picker:Picker/replaceItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces the item in the data provider at a given index.
		 
		 <p>
		 When you add or remove an item from the data provider, a data provider event is fired causing the data in the picker to be cleared and the picker to be redrawn.
		 </p>
		 ]]></description>
<param><![CDATA[item The item to be replaced.
		 ]]></param>
<param><![CDATA[index The index of the item to be replaced.
		 Adding fires a data provider event, which results in the columns being cleared and redrawn
		 ]]></param>
</method>
<method name='replaceItem' fullname='qnx.ui.picker:Picker/replaceItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Replaces an item, given the new item object and the old item.
		 
		 ]]></description>
<param><![CDATA[item The new item object data.
		 ]]></param>
<param><![CDATA[oldObject The item to replace.
		 ]]></param>
</method>
<method name='resetIndicies' fullname='qnx.ui.picker:Picker/private:resetIndicies' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setButtonSkin' fullname='qnx.ui.picker:Picker/setButtonSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the button skin for the picker. 
		 ]]></description>
<param><![CDATA[skin The button skin to set.
		 ]]></param>
</method>
<method name='setDataProvider' fullname='qnx.ui.picker:Picker/private:setDataProvider' isStatic='false' isFinal='false' isOverride='false'  param_names='dp' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setDividerSkin' fullname='qnx.ui.picker:Picker/setDividerSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the skin for the divider. The divider separates columns in the picker.
		 
		 ]]></description>
<param><![CDATA[skin The skin to use as the divider.
		 ]]></param>
</method>
<method name='setListBackgroundSkin' fullname='qnx.ui.picker:Picker/setListBackgroundSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the skin for the background list. 
		 
		 ]]></description>
<param><![CDATA[skin The skin to use as the background of the picker.
		 ]]></param>
</method>
<method name='setListIndex' fullname='qnx.ui.picker:Picker/protected:setListIndex' isStatic='false' isFinal='false' isOverride='false'  param_names='list;index' param_types='qnx.ui.listClasses:List;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<param><![CDATA[list List to set the selected index on 
		 ]]></param>
<param><![CDATA[index Index of the list 
		 ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='setListSkinAt' fullname='qnx.ui.picker:Picker/setListSkinAt' isStatic='false' isFinal='false' isOverride='false'  param_names='skin;listAtIndex' param_types='Object;int' param_defaults='undefined;0' result_type='void'>
<description><![CDATA[
		 Sets the list skin given the skin and an index.
		 
		 ]]></description>
<param><![CDATA[skin The skin to set for the list.
		 ]]></param>
<param><![CDATA[listAtIndex The index of the list.
		 ]]></param>
</method>
<method name='setListSkin' fullname='qnx.ui.picker:Picker/setListSkin' isStatic='false' isFinal='false' isOverride='false'  param_names='skin' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setListWidth' fullname='qnx.ui.picker:Picker/setListWidth' isStatic='false' isFinal='false' isOverride='false'  param_names='listAtIndex;listWidth' param_types='int;int' param_defaults='0;100' result_type='void'>
<description><![CDATA[
		 Sets the width of a list given an index and a width in pixels.
		 <p>
		 Setting the width through this accessor method, rather than getting the column and setting it directly, ensures that
		 the lists are properly laid out. 
		 </p>
		 ]]></description>
<param><![CDATA[listAtIndex The index at which to set the width.
		 ]]></param>
<param><![CDATA[width The width which will be treated as a ratio with the width of the component.All sizes are added up ( for the columns
		 and then calculated as a percentage of the overall width of the component.
		 ]]></param>
<see><![CDATA[PickerList
		 ]]></see>
</method>
<method name='setListWidths' fullname='qnx.ui.picker:Picker/private:setListWidths' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setListsHeight' fullname='qnx.ui.picker:Picker/private:setListsHeight' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSelectedIndices' fullname='qnx.ui.picker:Picker/private:setSelectedIndices' isStatic='false' isFinal='false' isOverride='false'  param_names='indicies' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setSize' fullname='qnx.ui.picker:Picker/setSize' isStatic='false' isFinal='false' isOverride='true'  param_names='w;h' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showBackgroundAndDividers' fullname='qnx.ui.picker:Picker/private:showBackgroundAndDividers' isStatic='false' isFinal='false' isOverride='false'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showMask' fullname='qnx.ui.picker:Picker/protected:showMask' isStatic='false' isFinal='false' isOverride='false'  param_names='visible' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showPicker' fullname='qnx.ui.picker:Picker/private:showPicker' isStatic='false' isFinal='false' isOverride='false'  param_names='sendEvent' param_types='Boolean' param_defaults='true' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stageMouseDown' fullname='qnx.ui.picker:Picker/private:stageMouseDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateItemAt' fullname='qnx.ui.picker:Picker/updateItemAt' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates the item in the list at the specified index
		 ]]></description>
<param><![CDATA[item The updated item.
		 ]]></param>
<param><![CDATA[index The index of the item to update.
		 
		 ]]></param>
<throws><![CDATA[RangeError The specified index is less than 0 or greater than or equal to the length of the data provider.
		 ]]></throws>
</method>
<method name='updateItem' fullname='qnx.ui.picker:Picker/updateItem' isStatic='false' isFinal='false' isOverride='false'  param_names='value;oldObject' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Updates an item in the list, given the new item and the item to update.
		 
		 ]]></description>
<param><![CDATA[value The new, or updated item.
		 ]]></param>
<param><![CDATA[oldObject The item to update.
		 ]]></param>
</method>
<method name='updateListProperties' fullname='qnx.ui.picker:Picker/private:updateListProperties' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updatePickerShownState' fullname='qnx.ui.picker:Picker/protected:updatePickerShownState' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='updateSelectedIndicies' fullname='qnx.ui.picker:Picker/protected:updateSelectedIndicies' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dataProvider' fullname='qnx.ui.picker:Picker/dataProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='qnx.ui.data:IDataProvider'>
<description><![CDATA[
		 Gets or sets the data provider.
		 ]]></description>
</method>
<method name='data' fullname='qnx.ui.picker:Picker/data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Gets or sets the selected data that is stored in the picker. 
		 <p>
		 Typically, the data is stored as an array of selection objects from each picker list.
		 </p>
		 ]]></description>
<returns><![CDATA[An Array, or Object.
		 ]]></returns>
</method>
<method name='defaultListWidth' fullname='qnx.ui.picker:Picker/defaultListWidth/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isOpen' fullname='qnx.ui.picker:Picker/isOpen/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Gets or sets a value that determines if the picker is open, interactive, and by default showing all lists.
		 <p>
		 Setting isOpen to true ensures that the picker will stay open and  will not react to adjacent or nearby stage mouse events when you click off. 
		 </p>
		 ]]></description>
<param><![CDATA[val A Boolean indicating whether or not the picker is open.
		 
		 ]]></param>
</method>
<method name='rowCount' fullname='qnx.ui.picker:Picker/rowCount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Gets or sets an integer that determines the number of rows the Picker will display.
		 <p>
		 Setting this property, which currently should be 3 or 5 rows, will in turn set the <code>topOffSet</code> property. The <code>topOffSet</code> property 
		 determines how much cell offset is required to suggest that the "middle" cell is treated as the "first" cell, therefore requiring a cell number
		 offset from the top. For exampe, a picker with 3 rows has a 1 row offset, while a picker with 5 rows has a 2 row offset.
		 </p>
		 ]]></description>
<see><![CDATA[qnx.ui.picker.Picker#topOffSet
		 ]]></see>
</method>
<method name='rowHeight' fullname='qnx.ui.picker:Picker/rowHeight/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='selectedIndices' fullname='qnx.ui.picker:Picker/selectedIndices/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Gets and sets the selected indicies for the list items 
		 ]]></description>
</method>
<method name='selectedItems' fullname='qnx.ui.picker:Picker/selectedItems/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Returns selected items
		 ]]></description>
</method>
<method name='topOffSet' fullname='qnx.ui.picker:Picker/topOffSet/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		  Gets the offset from the top cell 
		 ]]></description>
</method>
<method name='dataProvider' fullname='qnx.ui.picker:Picker/dataProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='_dataProvider' param_types='qnx.ui.data:IDataProvider' param_defaults='undefined' result_type='void'>
</method>
<method name='data' fullname='qnx.ui.picker:Picker/data/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Setter to store the selected items for all the picker column objects.
		 ]]></description>
<params><![CDATA[value:Object
		 
		 ]]></params>
</method>
<method name='defaultListWidth' fullname='qnx.ui.picker:Picker/defaultListWidth/set' isStatic='false' isFinal='false' isOverride='false'  param_names='defaultWidth' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the default width for each of the columns in the picker.
		 ]]></description>
<default><![CDATA[100
		 
		 ]]></default>
</method>
<method name='enabled' fullname='qnx.ui.picker:Picker/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='bool' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isOpen' fullname='qnx.ui.picker:Picker/isOpen/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets or sets a value that determines if the picker is open, interactive, and by default showing all lists.
		 <p>
		 Setting isOpen to true ensures that the picker will stay open and  will not react to adjacent or nearby stage mouse events when you click off. 
		 </p>
		 ]]></description>
<param><![CDATA[val A Boolean indicating whether or not the picker is open.
		 ]]></param>
</method>
<method name='rowCount' fullname='qnx.ui.picker:Picker/rowCount/set' isStatic='false' isFinal='false' isOverride='false'  param_names='rows' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rowHeight' fullname='qnx.ui.picker:Picker/rowHeight/set' isStatic='false' isFinal='false' isOverride='false'  param_names='height' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets or sets the row height property of the list items and the middle section part
		 ]]></description>
<param><![CDATA[height Height of the row height
		 ]]></param>
</method>
<method name='selectedIndices' fullname='qnx.ui.picker:Picker/selectedIndices/set' isStatic='false' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets and sets the selected indicies for the list items 
		 ]]></description>
</method>
<method name='selectedItems' fullname='qnx.ui.picker:Picker/selectedItems/set' isStatic='false' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the selected items 
		 ]]></description>
<param><![CDATA[Array of item objects
		 ]]></param>
</method>
<method name='topOffSet' fullname='qnx.ui.picker:Picker/topOffSet/set' isStatic='false' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Gets or sets the row offset from the middle cell to the top cell. This ensures that the middle cell is treated as the first cell in the picker.
		 For exampe, a picker with 3 rows has a 1 row offset, while a picker with 5 rows has a 2 row offset.
		 ]]></description>
<param><![CDATA[val Should be value between 1 or 2
		 ]]></param>
</method>
<field name='HEIGHT' fullname='qnx.ui.picker:Picker/private:HEIGHT' type='String' isStatic='true' isConst='true' defaultValue='pickerHeight' >
</field>
<field name='LIST_SELECTED' fullname='qnx.ui.picker:Picker/private:LIST_SELECTED' type='String' isStatic='true' isConst='true' defaultValue='selected' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='REDRAW' fullname='qnx.ui.picker:Picker/private:REDRAW' type='String' isStatic='true' isConst='true' defaultValue='pickerRedraw' >
</field>
<field name='SIZE_LARGE' fullname='qnx.ui.picker:Picker/SIZE_LARGE' type='int' isStatic='true' isConst='true' defaultValue='5' >
<description><![CDATA[
		 A constant indicating the large picker. The large picker size uses five rows of data.
		 ]]></description>
</field>
<field name='SIZE_SMALL' fullname='qnx.ui.picker:Picker/SIZE_SMALL' type='int' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[
		 A constant indicating the small picker. The small picker size uses three rows of data
		]]></description>
</field>
<field name='WIDTH' fullname='qnx.ui.picker:Picker/private:WIDTH' type='String' isStatic='true' isConst='true' defaultValue='pickerWidth' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__backgroundButton' fullname='qnx.ui.picker:Picker/protected:__backgroundButton' type='qnx.ui.buttons:Button' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__containerMask' fullname='qnx.ui.picker:Picker/protected:__containerMask' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__dataProvider' fullname='qnx.ui.picker:Picker/private:__dataProvider' type='qnx.ui.data:IDataProvider' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__data' fullname='qnx.ui.picker:Picker/private:__data' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultButtonSkin' fullname='qnx.ui.picker:Picker/protected:__defaultButtonSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultDividerSkin' fullname='qnx.ui.picker:Picker/protected:__defaultDividerSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultListBackgroundSkin' fullname='qnx.ui.picker:Picker/protected:__defaultListBackgroundSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultListSkin' fullname='qnx.ui.picker:Picker/protected:__defaultListSkin' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__defaultListWidth' fullname='qnx.ui.picker:Picker/protected:__defaultListWidth' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__dirtyFlags' fullname='qnx.ui.picker:Picker/private:__dirtyFlags' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__drawnItems' fullname='qnx.ui.picker:Picker/private:__drawnItems' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__explicitWidthsSet' fullname='qnx.ui.picker:Picker/private:__explicitWidthsSet' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__holder' fullname='qnx.ui.picker:Picker/protected:__holder' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__isOpen' fullname='qnx.ui.picker:Picker/protected:__isOpen' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__listBackground' fullname='qnx.ui.picker:Picker/protected:__listBackground' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__listDividers' fullname='qnx.ui.picker:Picker/protected:__listDividers' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__mousePosition' fullname='qnx.ui.picker:Picker/private:__mousePosition' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__rowCount' fullname='qnx.ui.picker:Picker/protected:__rowCount' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__rowHeight' fullname='qnx.ui.picker:Picker/protected:__rowHeight' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__selectedIndices' fullname='qnx.ui.picker:Picker/private:__selectedIndices' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[
		 Selected indicies for the selected items 
		 ]]></description>
</field>
<field name='__selectedItems' fullname='qnx.ui.picker:Picker/private:__selectedItems' type='Array' isStatic='false' isConst='false' >
</field>
<field name='__topOffSet' fullname='qnx.ui.picker:Picker/protected:__topOffSet' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PickerList' fullname='qnx.ui.picker:PickerList' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\picker\PickerList.as' namespace='qnx.ui.picker' access='public' baseclass='qnx.ui.listClasses:RoundList' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>PickerList</code> class provides the list functiionality within the <code>Picker</code>.

	 <p>

	 The <code>PickerList</code> differs from a <code>RoundList</code> in that the mask is a gradient to give a sense of depth.

	 </p>

	 

	 ]]></description>
<see><![CDATA[Picker

	 ]]></see>
<metadata>
	<Event owner='qnx.ui.picker:PickerList' name='select' type='flash.events.Event' >
<description><![CDATA[

	 Dispatched when the user selects an item from a column in the picker.

	 ]]></description>
<eventType><![CDATA[flash.events.Event.SELECT

	 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='PickerList' fullname='qnx.ui.picker:PickerList/PickerList' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[

		 Creates a new <code>PickerList</code> instance.

		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.picker:PickerList/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[

		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='DEGREES' fullname='qnx.ui.picker:PickerList/private:DEGREES' type='Number' isStatic='true' isConst='true' defaultValue='-1.5707963267948966' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__alphas' fullname='qnx.ui.picker:PickerList/private:__alphas' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__colors' fullname='qnx.ui.picker:PickerList/private:__colors' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__ratios' fullname='qnx.ui.picker:PickerList/private:__ratios' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PickerListCellRenderer' fullname='qnx.ui.picker:PickerListCellRenderer' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\picker\PickerListCellRenderer.as' namespace='qnx.ui.picker' access='public' baseclass='qnx.ui.listClasses:CellRenderer' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>PickerListCellRenderer</code> class is used to render the contents in the <code>PickerList</code> cells.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.listClasses.CellRenderer
	 
	 ]]></see>
</classRec>
<method name='PickerListCellRenderer' fullname='qnx.ui.picker:PickerListCellRenderer/PickerListCellRenderer' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new <code>PickerListCellRenderer</code> instance.
		 ]]></description>
</method>
<method name='drawLabel' fullname='qnx.ui.picker:PickerListCellRenderer/protected:drawLabel' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeTextFormatForState' fullname='qnx.ui.picker:PickerListCellRenderer/protected:initializeTextFormatForState' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onAdded' fullname='qnx.ui.picker:PickerListCellRenderer/protected:onAdded' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='DropDownBackgroundSkinWhite' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\listClasses\DropDownBackgroundSkinWhite.as' namespace='qnx.ui.skins.listClasses' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the background of the list in the DropDown component in the dark color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.listClasses.DropDownBackgroundSkinBlack
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.DropDown#setBackgroundSkin()
	 ]]></see>
</classRec>
<method name='DropDownBackgroundSkinWhite' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinWhite/DropDownBackgroundSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new DropDownBackgroundSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinWhite/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CellRendererSkinBlack' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\listClasses\CellRendererSkinBlack.as' namespace='qnx.ui.skins.listClasses' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the CellRenderer in the dark color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.listClasses.CellRendererSkinWhite
	 ]]></see>
</classRec>
<method name='CellRendererSkinBlack' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack/CellRendererSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new CellRendererSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack/private:disabledSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack/private:selectedSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upOddSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack/private:upOddSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinBlack/private:upSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SectionListHeaderSkinBlack' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\listClasses\SectionListHeaderSkinBlack.as' namespace='qnx.ui.skins.listClasses' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the SectionListHeader in the dark color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.listClasses.SectionListHeaderSkinWhite
	 
	 ]]></see>
</classRec>
<method name='SectionListHeaderSkinBlack' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinBlack/SectionListHeaderSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SectionListHeaderSkinBlack instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinBlack/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='bg' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinBlack/private:bg' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<classRec name='SectionListHeaderSkinWhite' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\listClasses\SectionListHeaderSkinWhite.as' namespace='qnx.ui.skins.listClasses' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin of the SectionListHeader in the white color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.listClasses.SectionListHeaderSkinBlack
	 ]]></see>
</classRec>
<method name='SectionListHeaderSkinWhite' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinWhite/SectionListHeaderSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SectionListHeaderSkinWhite instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinWhite/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='bg' fullname='qnx.ui.skins.listClasses:SectionListHeaderSkinWhite/private:bg' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CellRendererSkinWhite' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\listClasses\CellRendererSkinWhite.as' namespace='qnx.ui.skins.listClasses' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the CellRenderer in the white color theme. 
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.listClasses.CellRendererSkinBlack
	 ]]></see>
</classRec>
<method name='CellRendererSkinWhite' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite/CellRendererSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new CellRendererSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite/private:disabledSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite/private:selectedSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upOddSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite/private:upOddSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.listClasses:CellRendererSkinWhite/private:upSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='DropDownBackgroundSkinBlack' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\listClasses\DropDownBackgroundSkinBlack.as' namespace='qnx.ui.skins.listClasses' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the background of the list in the DropDown component in the dark color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.listClasses.DropDownBackgroundSkinWhite
	 ]]></see>
<see><![CDATA[qnx.ui.listClasses.DropDown#setBackgroundSkin()
	 ]]></see>
</classRec>
<method name='DropDownBackgroundSkinBlack' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinBlack/DropDownBackgroundSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new DropDownBackgroundSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.listClasses:DropDownBackgroundSkinBlack/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SliderThumbSkinWhite' fullname='qnx.ui.skins.slider:SliderThumbSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\SliderThumbSkinWhite.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the slider thumb component in the white color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.slider.SliderThumbSkinBlack
	 
	 ]]></see>
</classRec>
<method name='SliderThumbSkinWhite' fullname='qnx.ui.skins.slider:SliderThumbSkinWhite/SliderThumbSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SliderThumbSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:SliderThumbSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.slider:SliderThumbSkinWhite/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.slider:SliderThumbSkinWhite/protected:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.slider:SliderThumbSkinWhite/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='VolumeThumbButtonSkinBlack' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\VolumeThumbButtonSkinBlack.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' interfaces='qnx.ui.progress:IProgress' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the volume thumb button control for the dark color theme.
	 
	 ]]></description>
</classRec>
<method name='VolumeThumbButtonSkinBlack' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/VolumeThumbButtonSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new VolumeThumbButtonSkinBlack instance.
		 ]]></description>
</method>
<method name='getSkinByLevel' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/private:getSkinByLevel' isStatic='false' isFinal='false' isOverride='false'  param_names='level' param_types='int' param_defaults='undefined' result_type='flash.display:Sprite'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='progress' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/progress/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Sets the percent between 0-1 to update and draw the visual.
		 ]]></description>
<param><![CDATA[progress Number between 0-1
		 ]]></param>
</method>
<method name='progress' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/progress/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='state' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/state/set' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__disabledSkins' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/private:__disabledSkins' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__level' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/private:__level' type='int' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__percent' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/private:__percent' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__upSkins' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/private:__upSkins' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='bg' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/protected:bg' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin0' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/protected:upSkin0' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin1' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/protected:upSkin1' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin2' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/protected:upSkin2' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin3' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinBlack/protected:upSkin3' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SliderFillSkin' fullname='qnx.ui.skins.slider:SliderFillSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\SliderFillSkin.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The default skin for the slider fill component. The fill component is used to draw the 
	 scale or volume on the slider as you adjust the position of the slider.
	 ]]></description>
</classRec>
<method name='SliderFillSkin' fullname='qnx.ui.skins.slider:SliderFillSkin/SliderFillSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SliderFillSkin instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:SliderFillSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.slider:SliderFillSkin/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.slider:SliderFillSkin/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='VolumeTrackSkin' fullname='qnx.ui.skins.slider:VolumeTrackSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\VolumeTrackSkin.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the volume slider track control.
	 ]]></description>
</classRec>
<method name='VolumeTrackSkin' fullname='qnx.ui.skins.slider:VolumeTrackSkin/VolumeTrackSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new VolumeTrackSkin instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:VolumeTrackSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.slider:VolumeTrackSkin/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='VolumeThumbButtonSkinWhite' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\VolumeThumbButtonSkinWhite.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' interfaces='qnx.ui.progress:IProgress' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the volume thumb button control for the dark color theme.
	 
	 ]]></description>
</classRec>
<method name='VolumeThumbButtonSkinWhite' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/VolumeThumbButtonSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new VolumeThumbButtonSkinBlack instance.
		 ]]></description>
</method>
<method name='getSkinByLevel' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/private:getSkinByLevel' isStatic='false' isFinal='false' isOverride='false'  param_names='level' param_types='int' param_defaults='undefined' result_type='flash.display:Sprite'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='progress' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/progress/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Sets the percent between 0-1 to update and draw the visual.
		 ]]></description>
<param><![CDATA[progress Number between 0-1
		 ]]></param>
</method>
<method name='progress' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/progress/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='state' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/state/set' isStatic='false' isFinal='false' isOverride='true'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='__disabledSkins' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/private:__disabledSkins' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__level' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/private:__level' type='int' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__percent' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/private:__percent' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='__upSkins' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/private:__upSkins' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='bg' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:bg' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='disabledSkin0' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:disabledSkin0' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='disabledSkin1' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:disabledSkin1' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='disabledSkin2' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:disabledSkin2' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='disabledSkin3' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:disabledSkin3' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin0' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:upSkin0' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin1' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:upSkin1' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin2' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:upSkin2' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin3' fullname='qnx.ui.skins.slider:VolumeThumbButtonSkinWhite/protected:upSkin3' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SliderThumbSkinBlack' fullname='qnx.ui.skins.slider:SliderThumbSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\SliderThumbSkinBlack.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the slider thumb component in the dark color theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.slider.SliderThumbSkinWhite
	 
	 ]]></see>
</classRec>
<method name='SliderThumbSkinBlack' fullname='qnx.ui.skins.slider:SliderThumbSkinBlack/SliderThumbSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SliderThumbSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:SliderThumbSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.slider:SliderThumbSkinBlack/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.slider:SliderThumbSkinBlack/protected:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.slider:SliderThumbSkinBlack/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SliderTrackSkin' fullname='qnx.ui.skins.slider:SliderTrackSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\slider\SliderTrackSkin.as' namespace='qnx.ui.skins.slider' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the slider track. The slider track represents the track that the
	 slider is positioned on.
	 
	 ]]></description>
</classRec>
<method name='SliderTrackSkin' fullname='qnx.ui.skins.slider:SliderTrackSkin/SliderTrackSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SliderTrackSkin instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.slider:SliderTrackSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.slider:SliderTrackSkin/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ActivityIndicatorSkin' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\assets\src\qnx\ui\skins\progress\ActivityIndicatorSkin.as' namespace='qnx.ui.skins.progress' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the ActivityIndicator class.
	 ]]></description>
<see><![CDATA[qnx.ui.progress.ActivityIndicator
	 ]]></see>
</classRec>
<method name='ActivityIndicatorSkin' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin/ActivityIndicatorSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='draw' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		 Overrode to size the animation
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='play' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin/play' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stop' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin/stop' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='animation_mc' fullname='qnx.ui.skins.progress:ActivityIndicatorSkin/animation_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ProgressBarSkin' fullname='qnx.ui.skins.progress:ProgressBarSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\assets\src\qnx\ui\skins\progress\ProgressBarSkin.as' namespace='qnx.ui.skins.progress' access='public' baseclass='qnx.ui.skins:UISkin' interfaces='qnx.ui.progress:IProgress' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The ProgressBarSkin is the default skin for the ProgressBar component.
	 ]]></description>
<see><![CDATA[qnx.ui.progress.ProgressBar
	 ]]></see>
</classRec>
<method name='ProgressBarSkin' fullname='qnx.ui.skins.progress:ProgressBarSkin/ProgressBarSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Constructs a ProgressBarSkin object.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.progress:ProgressBarSkin/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.progress:ProgressBarSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='progress' fullname='qnx.ui.skins.progress:ProgressBarSkin/progress/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
		 Gets or set the progress of the skin.
		 ]]></description>
</method>
<method name='progress' fullname='qnx.ui.skins.progress:ProgressBarSkin/progress/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='__percent' fullname='qnx.ui.skins.progress:ProgressBarSkin/protected:__percent' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='bar_mc' fullname='qnx.ui.skins.progress:ProgressBarSkin/bar_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='progress_mc' fullname='qnx.ui.skins.progress:ProgressBarSkin/progress_mc' type='flash.display:MovieClip' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CheckBoxSkinWhite' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\CheckBoxSkinWhite.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The CheckBoxSkinWhite class is the default skin for the CheckBox button in the white colour theme.
	 <p>
	 It provides additional functionality over a regular button skin. For example, the CheckBoxSkinWhite class
	 provides a highlight state that appears when you press down on the button, regardless of whether or not the button is selected.
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.CheckBoxSkinBlack
	 ]]></see>
</classRec>
<method name='CheckBoxSkinWhite' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/CheckBoxSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new CheckBoxSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSelectedSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/private:disabledSelectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/private:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='downSelectedSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/private:downSelectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='downSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/private:downSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/private:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinWhite/private:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='DropDownButtonSkinWhite' fullname='qnx.ui.skins.buttons:DropDownButtonSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\DropDownButtonSkinWhite.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The DropDownButtonSkinWhite class is the default skin for the drop down list button in the white colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.DropDownButtonSkinBlack
	 	 ]]></see>
</classRec>
<method name='DropDownButtonSkinWhite' fullname='qnx.ui.skins.buttons:DropDownButtonSkinWhite/DropDownButtonSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new DropDownButtonSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:DropDownButtonSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:DropDownButtonSkinWhite/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.buttons:DropDownButtonSkinWhite/protected:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:DropDownButtonSkinWhite/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='CheckBoxSkinBlack' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\CheckBoxSkinBlack.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The CheckBoxSkinBlack class is the default skin for the CheckBox button in the dark colour theme.
	 <p>
	 It provides additional functionality over a regular button skin. For example, the CheckBoxSkinBlack class
	 provides a highlight state that appears when you press down on the button, regardless of whether or not the button is selected.
	 </p>
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.CheckBoxSkinWhite
	 ]]></see>
</classRec>
<method name='CheckBoxSkinBlack' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/CheckBoxSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new CheckBoxSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSelectedSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/private:disabledSelectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/private:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='downSelectedSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/private:downSelectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='downSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/private:downSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/private:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:CheckBoxSkinBlack/private:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ToggleSwitchThumbSkinBlack' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\ToggleSwitchThumbSkinBlack.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The ToggleSwitchThumbSkinBlack class is the default skin for the thumb in the ToggleSwitch component in the black colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.ToggleSwitch
	 ]]></see>
<see><![CDATA[qnx.ui.skins.buttons.ToggleSwitchThumbSkinWhite
	 ]]></see>
</classRec>
<method name='ToggleSwitchThumbSkinBlack' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinBlack/ToggleSwitchThumbSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new ToggleSwitchThumbSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinBlack/disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinBlack/upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='DropDownButtonSkinBlack' fullname='qnx.ui.skins.buttons:DropDownButtonSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\DropDownButtonSkinBlack.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The DropDownButtonSkinBlack class is the default skin for the drop down list button in the dark colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.DropDownButtonSkinWhite
	 
	 ]]></see>
</classRec>
<method name='DropDownButtonSkinBlack' fullname='qnx.ui.skins.buttons:DropDownButtonSkinBlack/DropDownButtonSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new DropDownButtonSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:DropDownButtonSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:DropDownButtonSkinBlack/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.buttons:DropDownButtonSkinBlack/protected:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:DropDownButtonSkinBlack/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='RoundedButtonSkinWhite' fullname='qnx.ui.skins.buttons:RoundedButtonSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\RoundedButtonSkinWhite.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The RoundedButtonSkinWhite class is the default skin for the Button component in the white colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.RoundedButtonSkinBlack
	 ]]></see>
<see><![CDATA[qnx.ui.buttons.Button
	 ]]></see>
</classRec>
<method name='RoundedButtonSkinWhite' fullname='qnx.ui.skins.buttons:RoundedButtonSkinWhite/RoundedButtonSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new RoundedButtonSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:RoundedButtonSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:RoundedButtonSkinWhite/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.buttons:RoundedButtonSkinWhite/protected:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:RoundedButtonSkinWhite/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ToggleSwitchTrackSkinWhite' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\ToggleSwitchTrackSkinWhite.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The ToggleSliderTrackSkinWhite class is the default skin for the ToggleSwitch components track in the dark colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.ToggleSwitch
	 ]]></see>
</classRec>
<method name='ToggleSwitchTrackSkinWhite' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinWhite/ToggleSwitchTrackSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new ToggleSliderTrackSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinWhite/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='TransparentButtonSkin' fullname='qnx.ui.skins.buttons:TransparentButtonSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\TransparentButtonSkin.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The TransparentButtonSkin class is a transparent skin. This can be used to provide a hit state to a component without having a visual element.
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.Button
	 ]]></see>
</classRec>
<method name='TransparentButtonSkin' fullname='qnx.ui.skins.buttons:TransparentButtonSkin/TransparentButtonSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new TransparentButtonSkin instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:TransparentButtonSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.buttons:TransparentButtonSkin/private:upSkin' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<classRec name='ToggleSwitchTrackSkinBlack' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\ToggleSwitchTrackSkinBlack.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The ToggleSliderTrackSkinWhite class is the default skin for the ToggleSwitch components track in the dark colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.ToggleSwitch
	 ]]></see>
</classRec>
<method name='ToggleSwitchTrackSkinBlack' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinBlack/ToggleSwitchTrackSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new ToggleSliderTrackSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[
		]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchTrackSkinBlack/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='RoundedButtonSkinBlack' fullname='qnx.ui.skins.buttons:RoundedButtonSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\RoundedButtonSkinBlack.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The RoundedButtonSkinBlack class is the default skin for the Button component in the black colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.RoundedButtonSkinWhite
	 ]]></see>
<see><![CDATA[qnx.ui.buttons.Button
	 ]]></see>
</classRec>
<method name='RoundedButtonSkinBlack' fullname='qnx.ui.skins.buttons:RoundedButtonSkinBlack/RoundedButtonSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new RoundedButtonSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:RoundedButtonSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:RoundedButtonSkinBlack/protected:disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='selectedSkin' fullname='qnx.ui.skins.buttons:RoundedButtonSkinBlack/protected:selectedSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:RoundedButtonSkinBlack/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ToggleSwitchFillSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchFillSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\ToggleSwitchFillSkin.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The ToggleSwitchFillSkin class is the default skin for the fill in the ToggleSwitch component.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.ToggleSwitch
	 ]]></see>
</classRec>
<method name='ToggleSwitchFillSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchFillSkin/ToggleSwitchFillSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new ToggleSwitchFillSkin instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:ToggleSwitchFillSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='upSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchFillSkin/protected:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ToggleSwitchThumbSkinWhite' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\ToggleSwitchThumbSkinWhite.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The ToggleSwitchThumbSkinWhite class is the default skin for the thumb in the ToggleSwitch component in the white colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.buttons.ToggleSwitch
	 ]]></see>
<see><![CDATA[qnx.ui.skins.buttons.ToggleSwitchThumbSkinBlack
	 ]]></see>
</classRec>
<method name='ToggleSwitchThumbSkinWhite' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinWhite/ToggleSwitchThumbSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new ToggleSwitchThumbSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='disabledSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinWhite/disabledSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<field name='upSkin' fullname='qnx.ui.skins.buttons:ToggleSwitchThumbSkinWhite/upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SegmentedControlSkinBlack' fullname='qnx.ui.skins.buttons:SegmentedControlSkinBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\SegmentedControlSkinBlack.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins.buttons:RoundedButtonSkinBlack' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The SegmentedControlSkinBlack class is the default skin for the a button in the SegementedControl component in the black colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.SegmentedControlSkinWhite
	 ]]></see>
<see><![CDATA[qnx.ui.buttons.SegmentedControl
	 ]]></see>
</classRec>
<method name='SegmentedControlSkinBlack' fullname='qnx.ui.skins.buttons:SegmentedControlSkinBlack/SegmentedControlSkinBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SegmentedControlSkinBlack instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:SegmentedControlSkinBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='SegmentedControlSkinWhite' fullname='qnx.ui.skins.buttons:SegmentedControlSkinWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\buttons\SegmentedControlSkinWhite.as' namespace='qnx.ui.skins.buttons' access='public' baseclass='qnx.ui.skins.buttons:RoundedButtonSkinWhite' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 
	 The SegmentedControlSkinWhite class is the default skin for the a button in the SegementedControl component in the white colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.skins.buttons.SegmentedControlSkinBlack
	 ]]></see>
<see><![CDATA[qnx.ui.buttons.SegmentedControl
	 ]]></see>
</classRec>
<method name='SegmentedControlSkinWhite' fullname='qnx.ui.skins.buttons:SegmentedControlSkinWhite/SegmentedControlSkinWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new SegmentedControlSkinWhite instance.
		 ]]></description>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.buttons:SegmentedControlSkinWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='PickerLineWhite' fullname='qnx.ui.skins.picker:PickerLineWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\picker\PickerLineWhite.as' namespace='qnx.ui.skins.picker' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The PickerLineWhite class is the default skin for the divider in the Picker component in the white colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.picker.Picker
	 ]]></see>
<see><![CDATA[qnx.ui.skins.picker.PickerLineBlack
	 ]]></see>
</classRec>
<method name='PickerLineWhite' fullname='qnx.ui.skins.picker:PickerLineWhite/PickerLineWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new PickerLineWhite instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.picker:PickerLineWhite/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.picker:PickerLineWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='line' fullname='qnx.ui.skins.picker:PickerLineWhite/private:line' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<classRec name='PickerLineBlack' fullname='qnx.ui.skins.picker:PickerLineBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\picker\PickerLineBlack.as' namespace='qnx.ui.skins.picker' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The PickerLineBlack class is the default skin for the divider in the Picker component in the black colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.picker.Picker
	 ]]></see>
<see><![CDATA[qnx.ui.skins.picker.PickerLineWhite
	 ]]></see>
</classRec>
<method name='PickerLineBlack' fullname='qnx.ui.skins.picker:PickerLineBlack/PickerLineBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new PickerLineBlack instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.picker:PickerLineBlack/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.picker:PickerLineBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='line' fullname='qnx.ui.skins.picker:PickerLineBlack/private:line' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<classRec name='PickerListBackgroundWhite' fullname='qnx.ui.skins.picker:PickerListBackgroundWhite' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\picker\PickerListBackgroundWhite.as' namespace='qnx.ui.skins.picker' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The PickerListBackgroundWhite class is the default skin for the background in the Picker component in the white colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.picker.Picker
	 ]]></see>
<see><![CDATA[qnx.ui.skins.picker.PickerListBackgroundBlack
	 ]]></see>
</classRec>
<method name='PickerListBackgroundWhite' fullname='qnx.ui.skins.picker:PickerListBackgroundWhite/PickerListBackgroundWhite' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new PickerListBackgroundWhite instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.picker:PickerListBackgroundWhite/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.picker:PickerListBackgroundWhite/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='bg' fullname='qnx.ui.skins.picker:PickerListBackgroundWhite/private:bg' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<classRec name='PickerListBackgroundBlack' fullname='qnx.ui.skins.picker:PickerListBackgroundBlack' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\picker\PickerListBackgroundBlack.as' namespace='qnx.ui.skins.picker' access='public' baseclass='qnx.ui.skins:UISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The PickerListBackgroundBlack class is the default skin for the background in the Picker component in the black colour theme.
	 
	 ]]></description>
<see><![CDATA[qnx.ui.picker.Picker
	 ]]></see>
<see><![CDATA[qnx.ui.skins.picker.PickerListBackgroundWhite
	 ]]></see>
</classRec>
<method name='PickerListBackgroundBlack' fullname='qnx.ui.skins.picker:PickerListBackgroundBlack/PickerListBackgroundBlack' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new PickerListBackgroundBlack instance.
		 ]]></description>
</method>
<method name='draw' fullname='qnx.ui.skins.picker:PickerListBackgroundBlack/protected:draw' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.picker:PickerListBackgroundBlack/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='bg' fullname='qnx.ui.skins.picker:PickerListBackgroundBlack/private:bg' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<classRec name='TextInputSkin' fullname='qnx.ui.skins.text:TextInputSkin' sourcefile='E:\hudson\workspace\SWF_deckard_sdk\src\screen\src\qnx\ui\skins\text\TextInputSkin.as' namespace='qnx.ui.skins.text' access='public' baseclass='qnx.ui.skins:UISkin' interfaces='qnx.ui.skins:ISkin' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The default skin for the TextInput component.
	 ]]></description>
</classRec>
<method name='TextInputSkin' fullname='qnx.ui.skins.text:TextInputSkin/TextInputSkin' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new TextInputSkin instance.
		 ]]></description>
</method>
<method name='getLayoutRect' fullname='qnx.ui.skins.text:TextInputSkin/getLayoutRect' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='init' fullname='qnx.ui.skins.text:TextInputSkin/protected:init' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeStates' fullname='qnx.ui.skins.text:TextInputSkin/protected:initializeStates' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<method name='height' fullname='qnx.ui.skins.text:TextInputSkin/height/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='width' fullname='qnx.ui.skins.text:TextInputSkin/width/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='height' fullname='qnx.ui.skins.text:TextInputSkin/height/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='width' fullname='qnx.ui.skins.text:TextInputSkin/width/set' isStatic='false' isFinal='false' isOverride='true'  param_names='value' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[]]></description>
<private><![CDATA[]]></private>
</method>
<field name='downSkin' fullname='qnx.ui.skins.text:TextInputSkin/private:downSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='focusSkin' fullname='qnx.ui.skins.text:TextInputSkin/private:focusSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='hoffset' fullname='qnx.ui.skins.text:TextInputSkin/private:hoffset' type='int' isStatic='false' isConst='false' >
</field>
<field name='upSkin' fullname='qnx.ui.skins.text:TextInputSkin/private:upSkin' type='flash.display:Sprite' isStatic='false' isConst='false' >
</field>
<field name='woffset' fullname='qnx.ui.skins.text:TextInputSkin/private:woffset' type='int' isStatic='false' isConst='false' >
</field>
</asdoc>
